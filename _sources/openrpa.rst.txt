==============
 **OpenRPA** 
==============

.. 3.
*********************
 **What is OpenRPA?** 
*********************

**OpenRPA** is where the actual automation happens, inside it you create workflows and invoke them, run all the activities needed to complete your task and deploy them with the assistance of **OpenFlow** and **Node-RED**. The framework also offers integration with other tools that are essential such as a message broker and repository management tools. **OpenRPA** also includes other features within itself, such as Image detection/OCR, Browser Navigation and many others.

***************************
 **Installing, First Run** 
***************************
In this section, the user is provided with a thorough explanation of how to install **OpenRPA**.

.. note::

   Although not recommended unless you are creating a developer setup, you may also always run OpenRPA directly from the source code by using Visual Studio 2019.

Installing OpenRPA through Windows .msi
============================================
To install OpenRPA, you first need to download the installer executable provided `here <https://github.com/open-rpa/openrpa/releases/latest/download/OpenRPA.msi>`_ (``https://github.com/open-rpa/openrpa/releases/latest/download/OpenRPA.msi``).


Installing Universally or User-Only
-----------------------------------
.. figure:: images/openrpa_installation_installation_scope.png
   :align: center

   **OpenRPA's installation scope.**

The installer first prompts the user whether **OpenRPA** should be installed only for the specific single user or universally (all users). **It is recommended to install it universally (requires administrator previleges)**, as it have no downsides, so unless something (or someone) prohibits you from installing it for all users, always do it so.
Installing **OpenRPA** single-user prevents other regular users from the machine from using **OpenRPA**, however, both **OpenFlow** and **NodeRED** accesses are not limited nor related to this, as they are accessed by simply using a browser.
After selecting the desired option, click Next.

Installing OpenRPA Plugins
============================================
During OpenRPA installation, you may specify which Plugins should be installed.

For production, it is extremely recommended to install only the Plugins that will be used. The reasoning is: some plugins such as **NM**, **SAP** and **Java** (as well as others) use machine resources in order to run and just by having them installed and enable, they might significantly impact CPU usage, specially when running **OpenRPA** on low-spec machines (such as cloud-hosted ones, as they are commonly low-spec in order to save costs). Be aware that CPU usage is further amplified when using HD Robots service, as for each instance of HD Robot user each Plugin will takes its toll.

For development (and experimentation), it is obviously encouraged to run as many plugins as you can afford and are willing to try, our solution has already a wide range of plugins and users can themselves develop plugins as well.

.. figure:: images/openrpa_installation_installation_libraries.png
   :align: center

   **OpenRPA's installation libraries.**

After selecting the plugins you desire to install, click ``Next`` once again and ``Install`` so the installation can be concluded.

If everything goes well the installation finishes and the window on **Fig. 3** appears.

.. figure:: images/openrpa_installation_finished.png
   :align: center

   **OpenRPA finished installation.**

.. 3.3.
************************
 **Configuring OpenRPA**
************************

**OpenRPA** settings are saved locally in a file named ``settings.json`` and it is always ยน located in user's ``Documents\OpenRPA`` folder (or full path ``C:\Users\{YOUR_USER}\Documents\OpenRPA``). This file contains all configuration parameters for **OpenRPA**, including some which are not accessible through the GUI.

**OpenRPA** GUI layout settings, however, are saved in another file: ``layout.config``. Deleting ``layout.config`` bears no trouble, since it will only lose the user's layout preferences (panel sizes, order, location etc).

Editing either file (``settings.json`` / ``layout.config``) while **OpenRPA** is running will have no effect and, when the application is closed, any value changed will be lost/overwritten. Hence, if you desire to edit any setting, always make sure that **OpenRPA** is not running.

Further on this section, readers will find documentation for all the parameters from ``settings.json`` and their possible values.

*ยน - Currently, it is not possible to specify the directory where OpenRPA local temporary files (workflows, settings) will be saved.*

.. image:: images/openrpa_settings_json.png
   :align: center
  
.. 3.3.1
Parameters
==========

wsurl (**OpenRPA** online/offline[local])
-------------------------------------
This parameter dictates to which **OpenFlow** enviroment **OpenRPA** should connect.

The expected value is a valid websocket URL.

Default value is **OpenIAP** demo enviroment: ``wss://app.openiap.io/``.

If the value is set as blank ``""`` (empty string), **OpenRPA** will run locally, that is, without being connected to an **OpenFlow** (and consequently, **NodeRED**) and will no longer benefit from the cloud features of the **OON** stack, such as **MongoDB** or ``Workflows`` remote invoking (as well as many others features).

Examples of valid websockets URL:

.. code-block:: json-object

   "wsurl": "wss://app.openiap.io/",
   "wsurl": "ws://localhost.openrpa.dk",
   "wsurl": "",

Notice that ``wss`` indicates that the websocket URL is secured, whereas URLs starting with ``ws`` are not (same principles as ``http`` vs ``https`` for webpages). Therefore, users should make use of the respective protocol that matches with their **OpenFlow** enviroment.

.. note::
   User that were once connected to an **OpenFlow** websocket, but changed this parameter to blank and are now running **OpenRPA** locally, will still have access to the ``Workflows`` (and ``Detectors``) that were cached in the last access to the repository. However, they must be careful. Next time they connect to the environment, they will NOT commit their changes to the cloud repository and these changes will be overwritten (by latest version available on the cloud repository) and lost, unless properly exported.

.. note::
   Users are always welcome to use ``wss://app.openiap.io/`` demo enviroment for experimentation purposes. However, running production processes in this demo enviroment is NOT recommended.

.. 3.3.2
username / jwt / password / entropy
-----------------------------------
These four parameters work somewhat together and are used by **OpenRPA** to keep track of the last logged user, besides allowing automatic logins, provided that the saved ``jwt`` is still valid.

Default value for ``username`` is empty string ``""``.

Default values for ``jwt`` and ``password`` are ``null``.

Default value for ``entropy`` is a randomly generated key created by the user's Windows (example ``"JungBLhauG+JvQipkQPIp9sLwJw="``).

After an user logs in to **OpenRPA**, the application will automatically generate a JSON Web Token ``jwt`` from the combination of ``username`` and ``password`` ยน, with a given secret ``entropy``. After the user logs out (or the application is closed), this ``jwt`` is then saved and, from there, the same user may log back in without the need of typing the credentials again.

ยน - ``username`` and ``password`` that were typed in the login screen, not from the ``settings.json`` file.

..
   Thiago Note 31/July/2020: Commented out this part because even tho it should be working this way ( as per training session ), for some reason it isn't.
   Tested on OpenRPA 1.0.138.0

   Additionally, you have the option to provide raw (non-encrypted) credentials through the parameters ``username`` and ``password`` ...

   .. code-block:: json-object
      "username": "wss://app.openiap.io/",
      "password": "ws://localhost.openrpa.dk",

   And then, when **OpenRPA** runs the next time, if the credentials are valid and login is possible, the application will automatically create the ``jwt`` the same way as above. Notice that after the ``jwt`` has been created, **OpenRPA** will always delete the value from the parameter ``password``, so raw credentials are never stored.

If, for any reason, the login is not possible (``password`` has been changed, user no longer exists or ``jwt`` is invalid), **OpenRPA** will erase the values of both ``username`` and ``password`` and will prompt the user with the login screen.

.. 3.3.3
isagent
-------
This parameter modifies **OpenRPA** GUI. It should be used when it is desirable to hide ``Workflows`` logic or if user wants to prevent other users from making changes to ``Workflows``.
Expected values are either ``true`` or ``false``.

Default value is ``false``.

If this parameter is set to ``true``, **OpenRPA** client will no longer show the UI elements that allow users to view or edit ``Workflows``, but it will still be possible to invoke them (both manually/locally or remotely).

.. figure:: images/subchap_running_workflows/openrpa_running_workflows_running_as_agent.png
   :align: center
   :scale: 50%

.. 3.3.4
cancelkey
---------
This parameter refers to which key button is responsible for stopping the ``Recorder`` when the user wants to cease recording.

Default value is ``{ESCAPE}``.

.. 3.3.5
showloadingscreen
-----------------
This parameter defines whether **OpenRPA** loadscreen should show up or not (i.e, the splashscreen with the gears in grey scale when the application is initialized).

Default value is ``true``.

There are no pro/cons performance-wise in disabling the loadscreen. In some cases, it might be desirable to turn it off, especially when the robot is running on someone's computer who is not (and does not need to be) aware of the robot.

.. 3.3.6
culture
-------
This parameter defines the language used in most elements (tooltips, buttons etc.) in the **OpenRPA** GUI. Notice that the list of all possible values will not be shown here, since this list is still expanding (thanks to our contributors).
The most intuitive way to set this parameter is choosing the language through ``UI Language``, on the upper ribbon of the the **OpenRPA** GUI, in the ``Settings tab``.

Default value is ``en`` (which stands for "English").

.. 3.3.7
ocrlanguage
-----------
This parameter sets the language OCR will use to interpret text on images. The full list of supported languages can be found on **OpenRPA** GUI ribbon in the ``Settings tab`` under the name ``Tesseract`` (next to ``UI Language``).

Default value is ``eng`` (which stands for "English").

.. 3.3.8
openworkflows
-------------
A list of IDs of the ``Workflows`` that were open the last time **OpenRPA** was closed. This parameter exists so **OpenRPA** keeps track of the ``Workflows`` tabs and automatically open them next time the application is initialized.

Default value is an empty list ``[]``.

.. 3.3.9
mainwindow_position
-------------------
This parameter stores information about size and position of the **OpenRPA** GUI on the screen, so that it will be displayed in the same way next time the application is initialized.

The four values refer the to Windows Coordinate System. The first two represent the X and Y coordinates of the upper-left corner of the window, whereas the second pair of values represent the coordinates of the bottom-left corner of the windown.

Default value is "0, 0, 0, 0".

.. 3.3.10
designerlayout
--------------
`[DEPRECATED] This is no longer needed as it was replaced by ``layout.config`` file.`

This parameter sets the default **OpenRPA** UI elements, such as the size and position of ``Toolbox``, ``Design`` and ``Properties``.

Default value is an empty string ``""`` and it means these element were never adjusted and are on their original spot.

.. 3.3.11
properties
----------
This parameter is a set of inherited classes settings. This is a dynamically created list of the add-ons settings that are loaded when **OpenRPA** is executed. In the case of new add-ons, their settings can be added to the global settings in this list. Note that the first word of each parameter is the name of the plugin being setted.

This is an important parameter, since it allows users to configurate their own add-ons.

These settings can also be accessed through **OpenRPA** GUI, in ``Recorder plugins`` in the ``Settings`` tab.

``IE_enable_xpath_support`` - It enables experimental XPath support in **IE**. Default value is ``false``.

``NM_unique_xpath_ids`` - A list of unique IDs for creating XPath selectors.

``NM_debug_console_output`` - It writes debug information to browser console. Default value is ``false``.

``NM_wait_for_tab_after_set_value`` - It waits for tab status to be in ready state after setting a value. Default value is ``false``.

``NM_wait_for_tab_click`` - It waits for tab status to be in ready state after clicking a button. Default value is ``false``.

``NM_compensate_for_old_addon`` - It adds pixel compensation for old add-ons. Default value is ``false``.

``Script_csharp_intellisense`` - It activates Intellisense for C# scripts. Default value is ``true``.

``Script_vb_intellisense`` - It activates Intellisense for Visual Basic scripts. Default value is ``true``.

``Script_use_embedded_python`` - **OpenRPA** comes with Python embedded, but will use default system Python if disabled. Default value is ``true``.

``Script_py_create_no_window`` - It states whether the Python script should be started in a new window or not. Default value is ``true``.

``Windows_allow_child_searching`` - If an Element in a Selector is not found, automatically search all children for match. Default value is ``false``.

``Windows_allow_multiple_hits_mid_selector`` - It allows an Element Selector in a Selector to find more than one children. Default value is ``false``.

``Windows_enum_selector_properties`` - It tests each Selector Element for the minimum required amount of properties needed. Default value is ``true``.

``Windows_get_elements_in_different_thread`` - ``GetElement`` uses another thread while searching in order to avoid locks if selector finds robot. Default value is ``true``.

``Windows_traverse_selector_both_ways`` - It traverses UI tree both ways to filter out ghost Selector Elements. Default value is ``true``.

``Windows_cache_timeout": "00:05:00`` - Timeout for caching of Elements. Default value is ``true``.

``Windows_enable_cache`` - It enables caching of Elements for faster automation at the expense of RAM. Default value is ``true``.

``Windows_search_descendants`` - It searches all descendants. Please note that this makes the robot slower, so it is recommended to use this option for more simple Selectors. Default value is ``false``.

.. 3.3.12
record_overlay
--------------
The ``Recording Overlay`` checkbox (which can also be set inside **OpenRPA** ribbon in the **Settings tab**) is used to highlight the Elements as they are moused over while recording. Be aware that CPU performance may be affected when this parameter is set to ``true``, hence it is recommended to keep it to ``false`` and change it only during debugging/presentations purposes.

Default value is ``true``.

.. 3.3.13
querypagesize
-------------
This parameter sets the maximum number of results per MongoDB query when Activities in **OpenRPA** are using **OpenFlow**'s API to communicate with the MondoDB.

Each query has a cost of its own and then the data transfer (querypagesize) also has a cost. A high value for ``querypagesize`` means that MongoDB will be queried less often, but the load of each query will be higher.

There is no perfect value for this parameter, but knowing the differences may optimize specific scenarios for an **OpenRPA** ``Workflow`` needs.

Default value is 50.

.. 3.3.14
lastupdatecheck / updatecheckinterval / doupdatecheck
-----------------------------------------------------
These parameters refer to update checking done by the robot when it is started. If a new update is found, a message will be displayed to the user for him to decide if the updates should be installed or not.

``lastupdatecheck`` is a log of the last time the robot checked for updates.

``updatecheckinterval`` sets the interval between update checks. Default value is "1.00:00:00" (i.e., one day).

``doupdatecheck`` is a boolean value that states if the robot should look for updates or not. Default value is ``true``.

.. 3.3.15
autoupdateupdater
-----------------
This parameter sets if the Updater should auto update itself or not. If ``true``, it will proceed with the updating without displaying any message to the user.

Default value is ``true``.

.. 3.3.16
log (12 parameters)
-------------------
The following parameters refer to the log file created to store all the outputs of the ``Workflows``, as well as error or exception messages. There will be more information in this file than in the ``Logging`` section of the Output bar, since showing too much information in this section slows down the robot. Some of these parameters can be set through the upper ribbon of the GUI, in the ``Settings`` tab.

The "Level" refers to the type of information user wants to get. Lower numbers mean more critical information, whereas higher numbers mean less critical information. In other words, if user sets minimum and maximum values to, e.g., 1 and 2, only the most important information will be logged. if, on the other hand, the user sets the values to 1 and 7, less critical information will be added to the log file.

The broader the range between the lowest to the highest level, the more information will be retrieved. Please note that this operation slows the robot down, since more processing is required.

``log_to_file`` - If user enables logs, the robot will create a .txt log file and save it in the root folder of the robot. Default value is ``false``.

``log_file_level_minimum`` - Default value is "2".

``log_file_level_maximum`` - Default value is "5".

``log_verbose`` - This parameter habilitates the verbose mode, that is, more words are added to log file in order to make it more readable to humans. Default value is ``false``.

``log_activity`` - When set to ``true``, this parameter adds logs of the activities performed by user during execution of **OpenRPA**, such as changes to ``Designer``. Default value is ``false``.

``log_debug`` - It adds information about debugging to log file. Default value is ``false``.

``log_selector`` - It adds logs of ``Selectors`` activities. Default value is ``false``.

``log_selector_verbose`` - This parameter habilitates verbose mode for selector logs. Default value is ``false``.

``log_information`` - This parameter enables logging information that is not fundamental to the operation of the robot, but is important for humans to be aware of or keep record of. Default value is ``true``.

``log_output`` - It adds messages that were displayed in the ``Output`` tab, as well as messages from ``Writeline`` Activity. Default value is ``true``.

``log_warning`` - It adds warning messages to the log file, that is, issues that had an effect on the platform or robot, but did not prevent it from running. Default value is ``true``.

``log_error`` - It adds error messages to the log file, that is, issues that could not be handled by the robot and prevented it from running. Default value is ``true``.

.. 3.3.17
use_sendkeys
------------
When set to ``true`` while recording, this parameter mimics an user typing one key at the time. When set to ``false``, the Recorder will try to directly change the control on the selected application and apply the whole text at once. Each application/control may react in a different way, hence the reason why this parameter might be useful.

This parameter can also be accessed through **OpenRPA** ribbon, in the ``Settings`` tab.

Default value is ``false``.

.. 3.3.18
use_virtual_click
-----------------
**OpenRPA** tries to do a Virtual Click instead of actually clicking with the mouse. See more at :ref:`Virtual Click`.

Default value is ``true``.

.. 3.3.19
use_animate_mouse
-----------------
When playing a recorded Sequence, the cursor will appear changing its position throughout execution. It becomes easier to visualize the actions that were recorded. It also is a way to produce material for RPA presentations.

This parameter can also be accessed through **OpenRPA** ribbon, in the ``Settings`` tab.

Default value is ``true``.

.. 3.3.20
use_postwait
------------
This parameter sets the default value for all Activities that have ``post_wait`` property.

It means that the robot will wait this amount of time after each of these Activity to make sure that the computer is responsive before moving on to the next.

It slows down the performance of the robot when running the ``Workflow``, as each Activity will have an overhead. This parameter is not necessary, but for extremely specific cases, this is already implemented and may come handy.

Default value is "00:00:00".

.. 3.3.21
minimize
--------
This parameter defines whether **OpenRPA** UI should minimize when running the robot or not.

In order to optimize performance, this parameter should be set to ``true``. When running, the robot will access the Desktop and check all open windows to find the one required. So, it doesn't need to check its own window.

It may be useful to have the window maximized when debugging, so that the user will be able to see what is happenning during execution.

Default value is ``true``.

.. 3.3.22
recording_add_to_designer
-------------------------
The ``Record directly into designer`` checkbox (set inside **OpenRPA** ribbon in the ``Settings`` tab) is used when the user wants to see the activities being inserted into the designer as they are recording it. 

Having this parameter enabled is advised during development or while debugging, but be aware that it might cause some input delay. If disabled, the ``Recorder`` will memorize the activities and only insert them after recording is over.

Default value is ``true``.

.. 3.3.23
reloadinterval
--------------
Time interval that the robot will use to reload local files when **OpenRPA** is running connected to an **OpenFlow**.

The robot will query **OpenFlow** for a list of ``Workflows`` and ``Detectors`` and it will compare the last updated assign on those with the time it has on its local copy. If there are any changes, it will then reload the file or files.

If the ``Worflow`` or ``Detector`` is already open in the Designer, **OpenRPA** will then raise a warning to the user and ask if the newer version should be loaded or not. If new files are found or if files were deleted, **OpenRPA** will automatically proceed to create or delete files in local directory.

There is also the option of realoding at any time through **OpenRPA** UI, at the ``General`` tab at the upper ribbon.

Default value is "00:05:00". If value is set to "00:00:00", it will never be reaload.

.. 3.3.24
move_animation_run_time / move_animation_steps
----------------------------------------------
When playing a recorded Sequence, the user may choose whether the movement of a window will be shown as an animation or not. It can be set in the Properties menu of the Activity.

``move_animation_run_time`` - This parameter sets the amount of time between each of the steps of the animation. Default value is "00:00:00.5000000".

``move_animation_steps`` - This parameter sets how many steps the animation will take. If set to 1, no movement will visible, since the window will move directly to the new position. The more steps, the smothier the movement. Default value is "20".

.. 3.3.25
remote_allow_multiple_running / remote_allow_multiple_running_max
-----------------------------------------------------------------
When a robot is running ``Workflows`` that rely on application GUI, keyboard or mouse and parallel ``Workflow`` executions would result in conflicting actions, these parameters set limitations so **OpenFlow**/**Node-RED** will only invoke a given number of workflows at once.


``remote_allow_multiple_running`` - This parameter sets the permission for the robot to run additional ``Workflows`` at the same time. Default value is ``false``.

``remote_allow_multiple_running_max`` - It sets the maximum number of ``Workflows`` that can be run at the same time. Default value is "2".

.. note::
   These parameters only apply when the ``Workflows`` are invoked remotely. When running manually (i.e.: clicking the Play button), the number of allowed ``Workflows`` is not limited by these.

.. 3.3.26
cef_useragent
-------------
This parameter allows user to define what ``user-agent`` value should the robot use when logging in a Google account. Some users may find issues when loggin in **OpenRPA** using a Google account due to different versions of Chromium browser, so this parameter makes sure the robot is using the most up-to-date version.

Default value is an empty string ``""``.

Possible values are the literal ``user-agent`` header used in most common ``http-requests``, such as "Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0".

.. 3.3.27
show_getting_started
--------------------
This parameter lets the user decide if the "Getting Started" tab will be shown when **OpenRPA** is initialized. This message contains basic information about the App, such as most common shortcuts, as well as links to the Wiki page and explanatory videos.

Default value is ``true``.

Users may also disable "Getting Started" on the right botton corner of the page ("Show again" checkbox).

.. 3.3.28
notify_on_workflow_remote_start / notify_on_workflow_end / notify_on_workflow_remote_end
----------------------------------------------------------------------------------------
These parameters set the notification behavior of **OpenRPA** during execution start and end.

``notify_on_workflow_remote_start`` - It shows a notification when the ``Workflow`` is started remotely. Default value is ``true``.

``notify_on_workflow_end`` - It shows a notification when ``Workflow`` ends running. Default value is ``true``.

``notify_on_workflow_remote_end`` - It shows a anotification when ``Workflow`` ends running remotely. Default value is ``false``.

.. 3.3.29
log_busy_warning
----------------
This parameter defines if a message is logged everytime **OpenFlow** tries to run a ``Workflow`` and the robot is busy.

This is a performance oriented parameter. It is advised to keep it set to ``false`` if it is expected for the message to show up often.

Default value is ```true``.

***************
**Quick Start** 
***************

Create New Project
==================
To create a new project on OpenRPA simply click on **New > New Project** at the Ribbon. It will then open an empty Workflow named **New Workflow**.

.. figure:: images/openrpa_new_project.png
   :align: center
   :scale: 50%

Granting permissions to users/roles
===================================
To set the permissions for the current workflow or project, whichever is selected, simply click in the Permissions button at the Ribbon. It opens the **Permissions Window** with the names of all current users for the workflow. There are 4 types of permission available which will be discussed next.


Read
----
Users have access to execute and view the content of the workflow.

Update
------
Users have access to update and view the content of the workflow.

Delete
------
Users have access to delete the workflow or group of workflows from the workspace.

Invoke
------
Users have access to invoke the content of the workflow.

To set these permissions simply click in the user you want to grant or revoke permissions and click the desired button. If the user is available at the OpenFlow repository but not in the current workflow, simply click the new button and type their username, a dropdown will come up with suggestions for the name of the user you are looking for. Select the user and click OK.

.. figure:: images/openrpa_permissions_window.png
   :align: center

New Workflow
============
Immediately after clicking **New Project** inside the **New** ribbon, a new empty workflow appears on the screen with a single sequence containing the caption *Drop activity here*. This is where you are going to add activities to build and implement the BPM process you have in mind. 

If you are running **OpenRPA** online (that is, connected to a websocket/**OpenFlow**), your workflows are automatically inside OpenFlow's repository and will be automatically be synced after each save. The OON stack takes care of workflow deployment, storage and readily makes the most recent version immediately availableยน to everyone (that have permission) in the same **OpenFlow**.

*ยน - After a save occurs, **OpenFlow** is immediately updated but other users may need to wait until their synchronization happens before your changes are reflected to them (they can also force an update by manually refreshing / reopening **OpenRPA**).*

.. figure:: images/openrpa_empty_workflow.png
   :align: center

Using the Designer
==================
Below are instructions on how to use OpenRPA's **Designer** to accomplish a few common tasks inside OpenRPA.

Dragging an Activity
--------------------
To drag an activity into OpenRPA, simply click the activity inside the **Toolbox** keep the left button of the mouse pressed and drag it into the workspace.

.. figure:: images/subchap_using_the_designer/openrpa_using_the_designer_drag_an_activity.png
   :align: center
   :scale: 50%

Then, the activity will appear inside the sequence.

.. figure:: images/subchap_using_the_designer/openrpa_using_the_designer_activity_inside_sequence.png
   :align: center
   :scale: 50%

This shows how easy it is to drag it to the main sequence! Try it yourself! Drag another activity into the main sequence.

If, on the other hand, you'd like to drag it into a nested sequence simply repeat the procedure but instead of simply dragging it into the workspace, drag it into the block inside the desired sequence.

.. figure:: images/subchap_using_the_designer/openrpa_using_the_designer_drag_an_activity_into_inner_sequence_drag.png
   :align: center
   :scale: 50%

Organizing the Workflow
------------------------
Organizing the workflow in OpenRPA is easily done through changing activities' display names and organizing sequences by nesting them.

**Changing an Activity's Display Name**

To change an activity's display name, the user can either click the name of the activity or change its property ``DisplayName`` inside the **Properties box**, as seen in the image below.

.. figure:: images/subchap_using_the_designer/openrpa_using_the_designer_display_name_changing_displayname.png
   :align: center
   :scale: 50%

**Nesting Sequences**

Nesting a sequence inside the main sequence is easy. Simply drag a **Sequence** activity inside the main sequence.

.. figure:: images/subchap_using_the_designer/openrpa_using_the_designer_nesting_sequence_drag_into.png
   :align: center
   :scale: 50%

After that, a new sequence will appear with its default display name set as ``Sequence``.

.. figure:: images/subchap_using_the_designer/openrpa_using_the_designer_nesting_sequence_dragged.png
   :align: center
   :scale: 50%

To do the same into already nested sequences or activities containing pseudo sequences, simply drag the **Sequence** activity into the desired block.

Creating and Deleting Variables & Arguments
-------------------------------------------

**Creating a Variable**

To create a variable automatically, the user must have the text caret inside an input field and inside some activity or property belonging to any. Afterwards, they can simply press ``Ctrl+K`` to create that variable. Remember that after creating that variable, the user must assign a value to its alias through the ``Variables`` section inside the **Variables, Arguments & Imports box** or through the **Assign** activity. In our case, this variable is assigned to the value "This is variable one".

To create a variable manually, the user can simply click the field containing the ``Create Variable`` placeholder inside the ``Variables`` section in the **Variables, Arguments & Imports box**, type the variable's name and if needed, assign a ``Variable type`` to it - or just leave it as ``String`` - then assign its ``Default value``. The user can change its ``Scope`` as well, which is discussed in the **Variables, Arguments** sections next in this chapter.

.. figure:: images/subchap_using_the_designer/openrpa_using_the_designer_creating_variables_and_arguments_create_variable.png
   :align: center
   :scale: 50%

It is useful to remind the user that a variable must always have a specific type. Refer to **Appendix A** for more information on types.

.. note::
   Press ``Ctrl+K`` to automatically create the variable when entering it upon an input field or create it manually by clicking the **Variables box** under the bottom part of the screen. Use the right-hand side to enter the value which will be assigned to the variable.

**Deleting a Variable**

To delete a variable, simply click with the right button mouse in its row inside the ``Variables`` section of the **Variables, Arguments & Imports box** and click ``Delete``.

.. figure:: images/subchap_using_the_designer/openrpa_using_the_designer_creating_variables_and_arguments_delete_variable.png
   :align: center
   :scale: 50%

**Creating an Argument**

The process for creating an argument is similar, yet there is no way to create an argument automatically. The user must always create it inside the ``Arguments`` section in the **Variables, Arguments & Imports box** and obligatorily set its ``Direction``, which will be discussed in the **Variables, Arguments** section next in this very same chapter.

In order to create an argument, simply click the field containing the placeholder ``Create Argument`` inside the ``Arguments`` section of the **Variables, Arguments & Imports box** type the argument's name and assign a type to it, if needed - else just leave it as ``String``.

.. figurs:: images/subchap_using_the_designer/openrpa_using_the_designer_creating_variables_and_arguments_create_argument.png
   :align: center
   :scale: 50%

**Deleting an Argument**

To delete an argument, simply click with the right button mouse in its row inside the ``Arguments`` section of the **Variables, Arguments & Imports box** and click ``Delete``.

.. figure:: images/subchap_using_the_designer/openrpa_using_the_designer_creating_variables_and_arguments_delete_argument.png
   :align: center
   :scale: 50%   

Output & Debug
--------------
The ``Output`` section inside the **Output bar** is used to output every information pertaining to the execution of workflows inside OpenRPA. This information includes debugging output, ie. error messages, output from the **WriteLine** activity - more on this below - and messages indicating that the workflow has executed successfully. Please refer to the **Designer** section to see a thorough explanation of the Output bar.

**Debugging Error Messages**

OpenRPA's error messages are very similar to any C# **trace output**, an example follows below.

.. code-block:: csharp

   [13:00:08.797][Output] Using the Designer failed in 00:03.325
   # OpenRPA.Interfaces.ElementNotFoundException: Failed locating 1 item(s)
      at OpenRPA.Windows.GetElement.Execute(NativeActivityContext context)
      at System.Activities.NativeActivity.InternalExecute(ActivityInstance instance, ActivityExecutor executor, BookmarkManager bookmarkManager)
      at System.Activities.Runtime.ActivityExecutor.ExecuteActivityWorkItem.ExecuteBody(ActivityExecutor executor, BookmarkManager bookmarkManager, Location resultLocation)

This is the most common error in OpenRPA, it occurs when an element is selected with any **Get Element** activities but it ends up not existing upon running the workflow - either because its existence has timed out or because the user has willingly closed it.

The **first block** inside the square brackets (``[13:00:08.797]``) is the ``Timestamp`` of the debug error message. It denotes the exact time when it occurred.

The **second block** inside the square brackets (``[Output]``) denotes the type of message - in our case, obviously, it is an output message.

The **third block** is the content of the debug error message. It contains the name of the workflow which failed (``Using the Designer``), followed by its relative execution time (``00:;03.325``) - ie. the time that has elapsed from its start to the failure - and the error which occurred - in our case ``OpenRPA.Interfaces.ElementNotFoundException``.

It is recommended that when reporting bugs the user denotes the type of error which occurred - in our case ``ElementNotFoundException`` - for the purposes of making it easier for people to understand and thus be able to quickly help you solving the error!

**Writing Output to the Console with WriteLine**

The user can also write expressions to the ``Output`` console by using the **WriteLine** activity. Any object of type ``String`` can be used inside an expression which is going to be outputted to the console. Everything else will need to be casted into the type ``String``, more on that in **Appendix A**. Expressions need to be prefixed suffixed with ``"`` to indicate they are strings.

.. figure:: images/subchap_using_the_designer/openrpa_using_the_designer_output_logic_using_writeline.png
   :align: center
   :scale: 50%

The user can also write any expressions involving variables, just remember to concatenate them using the ``+`` operator.

.. figure:: images/subchap_using_the_designer/openrpa_using_the_designer_output_logic_using_writeline_with_variable.png
   :align: center
   :scale: 50%

Running the Workflow
====================
Running a workflow using the **Designer** is very easy! Simply click the **Play** button inside OpenRPA's ribbon, as shown below, or press **F5**. The workflow will run and its output can be seen in the ``Output`` section of the **Output bar**.

.. figure:: images/subchap_running_workflows/openrpa_running_workflows_run_from_designer.png
   :align: center
   :scale: 50%

**************
 **Interface**
**************

Activities/Toolbox
==================
The toolbox is where all the possible activities in **OpenRPA** are contained. Imagine it as a box where all the instruments you'd normally use are, such as a screwdriver or drill. The toolbox is essentially where you'd reach out for getting these tools.

The activities in OpenRPA are separated by categories which clearly represent what they are used for. These categories are properly discussed in the next section.

Designer
========
The designer is where the main process of desigining and implementing a task happens inside OpenRPA. It is where you drag and drop activities and add or nest sequences to fulfill your implementation choices, as well as set properties and variables pertaining to your workflow business process. It contains five components: Toolbox & Snippets sidebar, Workspace, Properties box, Output bar and Connection bar.

.. figure:: images/openrpa_sections.png
   :align: center

   **OpenRPA Designer components.**

Toolbox & Snippets sidebar
--------------------------
This is the place where all activities lie as well as some code snippets which teaches the user on how to use of the tool for various purposes.

To use an activity, simply drag it into the ``Workspace`` sequence you want to add it to.

For more information on these activities, such as a detailed explanation of each one, refer to the **Toolbox Detailed** section.

.. figure:: images/openrpa_designer_toolbox.png
   :align: center
   :scale: 50%

   **OpenRPA's Toolbox.**

Workspace
---------
The workspace is where the user organizes all the activities pertaining to the task which will be fulfilled by the workflow. It is also where the user will set all variables, arguments and import namespaces for further use.

Once the user drags activities into the sequence, upon pressing the **Play** button inside the ribbon or pressing the ``F5`` key, they will be executed in a cascading manner - each one after the previous one. And if there are any errors - untreated by **TryCatch** or **Throw** activities - the workflow execution will stop and the error message will appear in the Output box, which will be discussed in the **Output bar** section.

Each **Sequence** activity has its own scope as well, which will be discussed in the **Variables** section, further below.

.. figure:: images/openrpa_designer_workspace.png
   :align: center
   :scale: 50%

   **OpenRPA's Workspace.**

The user can also organize their workflow by nesting **Sequence** activities, as shown in the picture below.

.. figure:: images/openrpa_designer_workspace_nesting_sequences.png
   :align: center
   :scale: 50%

   **Nesting sequences inside OpenRPA.**

As well as nesting, the user can use the **Comment Out** activity to ignore everything inside it. In the picture below, all activities inside the **Comment Out** activity won't be executed.

.. figure:: images/openrpa_designer_workspace_comment_out.png
   :align: center
   :scale: 50%

   **Commenting activities out outside OpenRPA.**

Properties Box
--------------
Every activity in OpenRPA has its own property box, containing parameters passed that change the workings of the given activity. Inside the property box there are also sections which are pretty much self explanatory and refer to the given parameters they cause changes upon, such as **Input**, **Output** or **Misc**.

.. figure:: images/openrpa_property_box.png
   :align: center
   :scale: 50%

   **Properties box.**

The only property common to all activities is ``Displayname``, which changes the name of the activity inside the workspace. It is shown below.

.. figure:: images/openrpa_designer_property_box_displayname.png
   :align: center
   :scale: 50%

   **Displayname Property.**


Output bar
----------
The output bar contains three sections: ``Logging``, ``Output`` and ``Workflow Instances``.

**Logging**

The ``Logging`` section shows the output of the ``Workflows`` as well as any instance of any error or exception which occurred inside **OpenRPA**.

.. figure:: images/chap_interface/openrpa_logging_section.png
   :align: center
   :scale: 50%

**Output**

The ``Output`` section contains only outputs generated by any workflows that were executed.

.. figure:: images/chap_interface/openrpa_output_section.png
   :align: center
   :scale: 50%

**Workflow Instances**

The ``Workflow Instances`` section contains all workflow instances pertaining to the queues to which the currently logged user is listening. It is useful as a catalog of recent workflow results and to see which workflows are queued, idle, complete, failed or running (in progress).

.. figure:: images/chap_interface/openrpa_workflow_instances_section.png
   :align: center
   :scale: 50%

Connection bar
--------------
The connection bar contains information related to the connection status of the **OpenFlow** web service set in the :ref:`Configuring OpenRPA` section as well as the status of both ``NM`` and ``SAP`` plugins.

.. figure:: images/chap_interface/openrpa_connection_bar.png
   :align: center
   :scale: 50%

.. 3.5.3.


Variables, Arguments
====================
.. figure:: images/openrpa_variables_arguments_box.png
   :align: center

   **Variables, Arguments & Import box.**

**Variables**
-------------
Variables, as their very name states - are changeable values assigned to aliases inside the execution of a sequence. These aliases can be used in mathematical or computational expressions. For example, if you want to save a variable named "price" to assign the price of a product along a sequence. You can use the assign activity and an expression to assign it's value.

Upon inserting an activity with an input box, if you mention a non-existent variable and want to easily create it you can press ``Ctrl+K`` and a dropdown will appear with many types of variable to be selected.

Variables in OpenRPA are statically typed and their type can be selected from the **variable type** field inside the argument box.

Variable use case: Saving the result of a computation
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A use case of a variable is demonstrated next. In this example, we will save the result of a computation into a variable.

First, drag an **Assign** activity to the main sequence.

Then, type a name for the variable and press ``Ctrl+K`` to create it automatically. In this case, the chosen name is ``resultOfComputation``.

Afterwards, assign the result of the computation (``2*6``)[right-hand side] to the variable [left-hand side].

The user now may notice that a warning now appears in the right-hand side of the activity. That is because the expression is a ``Int32`` type, the variable ``resultOfComputation`` is a ``string`` and Microsoft Workflow Foundation is strongly typed. if the user has no experience with programming a thorough explanation is given on **Appendix A**. For now, just select the type of the variable as ``Int32`` in the ``Variable type`` parameter inside the **Variables, Arguments & Imports box**, as seen in the picture below.

.. figure:: images/subchap_variables_arguments/openrpa_variables_arguments_variable_use_case_change_variable_type.png
   :align: center
   :scale: 50%

**Scope**
---------
It refers to the reach of the objects contained within a sequence. If you have some knowledge of programming and scope, you can skip this part.
First, let's think of it as sets. In this example, we are going to use variables since arguments function as if they were globally scoped. 

Per the code block below, one may observe that sequence **B** has access to only variables x, - but since **B** is inside the scope of **A**, it makes sequence **B** to have access to all variables {n, p, x, y}. In simple words, sequences can be used to organize variable scopes and to group activities, just like a developer would normally do in a programming language using functions to avoid monolithic code. 

.. literalinclude:: scope_example.c

**Arguments**
-------------
Arguments are simply variables that can be passed to other sequences, external services or workflows and have global scope. They act exactly as variables, except for that single characteristic. If you pass an argument to a sequence created within another sequence, the argument is still valid within the outer sequence. If you pass a variable, that does not happen.

It is important to notice that both variables and arguments can have a **default value**, which are assigned to both if a value isn't necessarily assigned during the execution of the sequence. It is also required for arguments with the **isRequired** property checked to have an 'In' value, ie. already passed or having a default value.

Similarly to Variables, Arguments in OpenRPA are statically typed and their type can be selected from the **variable type** field inside the argument box.

**Output (In - In/Out - Out)**   
Output refers to the way a variable or argument is handled during run-time. They are classified below.

- **In**

   In this case the argument is received from external service and is only given an input value that can't be returned after the execution of the workflow

- **In/Out**

   In this case the argument can both be given an input value or be changed and outputted after the execution of the workflow

- **Out**

   In this case the argument returns a value to an external service, and it can't be changed after the execution of the workflow

- **Properties**

   This turns the argument into a ``Property``, which means it has the same features of an **In/Out** argument but can also have a default value

**Imports**
-----------
Imports tab shows all the modules used and referenced in the selected sequence.

**Serializable vs Non-Serializable Arguments**
----------------------------------------------
Microsoft Workflow Fundation (MWF), the technology which **OpenRPA** is based on, diversificates variables/arguments into two diferent categories: ``Serializable`` and ``Non-Serializable``. 
For the great majority of workflows there is no need to understand the differences, as they will not affect anything, but there are cases that knowing the technical limitations of non-serializable objects might explain why your workflow or process is not working exactly as you may expect.

In short: non-serializable objects, as the name suggests, can not be serialized. This term, in this context, can be simplified to: these objects can not be saved / can not be transmitted over a network. That consequently implies that a workflow state can not be saved if the workflow contains any variable/argument that is non-serializable, and also, invoking workflows with non-serializable arguments is not supported. The most common non-serializable variable/arguments types are: ``DataTables`` and ``DataSets`` but other types (from the infinitely many existing types from all the namespaces) also fall into this category.

With this brief explanation, here are some limitations that users may face when dealing with workflows containing non-serializable variables/arguments as well as some suggested workarounds:

- **Saving workflow states**

   When **OpenRPA** is connected to an **OpenFlow**, workflows states are saved automatically in **OpenFlow** whenenver specific activitiesยน are reached. These states exist to indicate the current situation relevant to a workflow instance, such as the designer layout (activities, sequences) being run, the variables and arguments and their current values, etc. Hence, if the workflow contains non-serializable objects such a `DataTable`, the state can not be saved.

   *ยน - All the activities that "go idle" (Detectors, Delay, Invoke Remote with wait) as well as Persist activity.*

   *Workaround*: Split complex workflows into smaller workflows, leaving the smaller workflows to manage the non-serializable objects. That way if an unexpected interruption occurs, you will not lose all the data.


- **Remote Remote OpenRPA / invoking with non-serializable arguments**
- **Invoke Openflow / Node-RED invoke and data return**

   If one desires to use ``Invoke Remote OpenRPA`` Activity, be aware that the workflow being invoked may not use non-serializable arguments. As the destination computer / **OpenRPA** is different than the source **OpenRPA**, the non-serializable arguments can not be passed around and thus the invoking will fail.

   Similar limitation also happens when an user invokes a flow in **Node-RED** by using the ``Invoke Openflow`` activity, non-serializable objects are not supported to be used as arguments. Exception to this rule is the ``DataTable`` type, **OpenRPA** will attempt to neatly convert these to ``JArray Objects`` before contacting **Node-RED** as well as convert it back to ``DataTable`` when the data is returned / node ``workflow out`` is used.

   *Workaround*: Use the activities from ``OpenRPA.OpenFlowDB`` toolbox to upload files/update data/create entities and collections in **OpenFlow** MongoDB and then, on the destionation computer, access the data by querying **OpenFlow** MongoDB. This way, the entire ``Data/DataSet/DataTable`` (any non-serializable object) is stored within MongoDB and the parameter being passed during the invoke can be the ``_id`` or some other identifier.

   *Workaround2*: Convert the non-serializable object into a serializable one, for example base 64 string, then pass it as parameter and convert it back if needed.


Toolbox Detailed
================

OpenRPA
-------

.. py:module:: OpenRPA
      :noindex:

Here belong the activities located inside the OpenRPA toolbox.

.. 3.5.4.1.1
.. py:class:: Click Element


 Click on an Element found with **GetElement**.

   **Properties Parameters**

   ``Animate Mouse`` - If set to ``True``, the cursor will appear changing its position throughout execution. It only works on Physical Clicks!

   ``Displayname`` - Title of the Activity inside the Sequence.

   ``Double Click`` - If set to ``True``, the cursor clicks twice inside the window. 

   ``Element`` - The application selected with the **Get Element** activity.

   ``Key Modifiers`` - If set, the corresponding keys act as if pressed during execution.

   ``Mouse Button`` - Set to ``1`` if the Left Mouse button is to be clicked;``2`` if it is the Middle Mouse button; ``3`` for the Right Mouse button.

   ``Post Wait`` - Time **OpenRPA** should wait for this activity to finish after completing its execution.

   ``Virtual Click`` - Set by default as ``True``. **OpenRPA** tries to do a **Virtual Click** instead of actually clicking with the mouse. Visit **Appendix B** - :ref:`Virtual Clicking` for more information.

   ``X Offset`` - The horizontal offset inside the window to be clicked. Units are in pixels. It also allows for negative values. Only works on Physical Click!

   ``Y Offset`` - The vertical offset inside the window to be clicked. Units are in pixels. It also allows for negative values. Only works on Physical Click! 

.. figure:: images/openrpa_click_element.png
   :align: center


   **OpenRPA Click Element.**

.. 3.5.4.1.2
.. py:class:: Close Application

   Closes a given application selected with the **Get Element** activity.

   **Properties Parameters**

   ``Displayname`` - Title of the activity inside the sequence.

   ``Force``- If set to ``True``, it kills the application.

   ``Selector`` - Contains all the data belonging to the application selected.

   ``Timeout`` - Time until the Activity ceases if not successfully able to close the application.

.. figure:: images/openrpa_close_application.png
   :align: center

   **OpenRPA Close Application.**

.. 3.5.4.1.3
.. py:class:: Comment Out

   Every Activity inside **Comment Out** is ignored by the execution of the workflow. This Activity is useful for remarking something out of the sequence.

   **Properties Parameters**

   ``Displayname`` - Title of the Activity inside the sequence.

.. figure::images/openrpa_comment_out.png
   :align: center

   **OpenRPA Comment Out.**

.. 3.5.4.1.4
.. py:class:: Copy Clipboard

   Saves the content from Windows clipboard into a variable.

   Repetitive sequential usage of this Activity, however, is not recommended, as it is unreliable due to buffer issues. As a suggestion/workaround, one can use the ``Invoke Code`` Activity and run the following AHK code ``variable1 := Clipboard``. Notice that ``variable1`` is the name of the variable. 
   
   If the content of the Windows clipboard which will be copied is a ``String`` the user has to specify the variable inside the ``String Result`` field in the **Properties Box**, else if it is an image the user has to specify the ``BitmapSource`` variable to which the image will be saved inside ``Image Result``.

   **Properties Parameters**

   ``Displayname`` - Title of the Activity inside the sequence.

   ``Image Result`` - Creates a bitmap from the image copied into the clipboard and returns it as a ``BitmapSource`` variable.

   ``Send Ctrl+C`` - Send ``Ctrl+C`` before trying to copy the Clipboard Content.

   ``String Result`` - Returns the result from the clipboard as a string.

.. figure:: images/openrpa_copy_clipboard.png
   :align: center

.. 3.5.4.1.5
.. py:class:: Detector Activity

   **Detector** turns workflow into idle mode, waiting on selected **Detector** to trigger.

   It is worthy reminding the user that **Detectors** can also be used to trigger **StateMachines** inside **OpenRPA**.

   An example of how to set a **Detector** is found at :ref:`Windows Automation` section.

   **Properties Parameters**

   ``Detector`` - ID of the **Detector** which will be used to trigger the condition.

   ``Displayname`` - Title of the Activity inside the sequence.

.. 3.5.4.1.6
.. py:class:: Foreach DataRow

   **Foreach DataRow** enumerates through each row inside a ``DataTable``.

   This Activity iterates through a ``DataTable`` or ``DataView``.ยฒ All the Activities inside **Foreach DataRow** will be looped over each row. Examples of using **Foreach DataRow** Activities are shown both at :ref:`Web Automation` and :ref:`Excel Read` workflow examples. 

   **Properties Parameters**

   ``DataTable`` - The data table used to gather the data.

   ``DataView`` - The data view used to gather the data. For more information on how to use a ``DataView``, please refer to Appendix B's :ref:`DataView`. 
   
   ``Displayname`` - Title of the Activity inside the sequence.

.. figure:: images/openrpa_foreach_datarow.png
   :align: center

   **OpenRPA Foreach DataRow.**

ยฒ - `What is the difference between DataView and DataTable? <https://stackoverflow.com/questions/7382932/what-is-the-difference-between-dataview-and-datatable>`_ (``https://stackoverflow.com/questions/7382932/what-is-the-difference-between-dataview-and-datatable``)

.. 3.5.4.1.7
.. py:class:: Highlight Element

  Coming soon - Work in progress

.. 3.5.4.1.8
.. py:class:: Insert Clipboard

	Sets the content of parameter ``Text`` into the Windows clipboard buffer.
	Repetitive sequencial usage of this Activity, however, is not recommended, as it is unreliable due to buffer issues. As a suggestion/workaround, one can use the ``Invoke Code`` Activity and run the following AHK code:

.. code-block:: ahk

   Clipboard := variable1 ; "variable1" is the name of the variable, can be changed.
   Timeout := 3
   WaitForAnyData := 1
   ; More info at https://www.autohotkey.com/docs/commands/ClipWait.htm (yes .htm, not .html)
   ClipWait, % Timeout, % WaitForAnyData


**Properties Parameters**

``Displayname`` - Title of the Activity inside the sequence.

``Ignore Errors`` - If an error occurs, will ignore it and continue. Default value is ``False``.

``Text`` - Text which will be inserted into the clipboard.

.. figure:: images/openrpa_insert_clipboard.png
   :align: center

.. 3.5.4.1.9
.. py:class:: Invoke OpenFlow

   **Invoke OpenFlow** allows the user to invoke ``Workflows`` which have been configured with **OpenFlow**/**Node-RED**, i.e., available at the `Workflows page <http://localhost.openrpa.dk/#/Workflows>`_ (e.g. ``http://localhost.openrpa.dk/#/Workflows``).

   **Properties Parameters**

   ``Displayname`` - Title of the Activity inside the sequence.

   ``Wait until Completed`` - If set to ``True``, **OpenRPA** waits until the ``Workflow`` invoke call is finished - either success or error. If successful, the message containing the data (as designed in the flow at **Node-RED**) is returned to the **OpenRPA** robot. 

   If set to ``False``, however, **OpenRPA** will no longer have access to the returned message - communication will be one-way. Therefore, all logic that would otherwise depend on it must then be redesigned. Think of it as a try/catch exception block that does not return any exception message. ยณ
   
   ``Workflow`` - The ``Workflow`` which is to be invoked.

.. note ::
   The ``Workflow`` is invoked by the user currently logged in **OpenRPA**/**OpenFlow**. It means that the user must have access to the desired ``Workflow`` which is to be invoked, otherwise it won't even be displayed in the ``Workflows`` dropdown.

.. figure:: images/openrpa_invoke_openflow.png
   :align: center

   **OpenRPA Invoke OpenFlow.**

.. 3.5.4.1.10
.. py:class:: Invoke OpenRPA

   **Invoke OpenRPA** allows the user to invoke **OpenRPA** ``Workflows`` saved in **OpenFlow**'s repository - those available at the `RPA Workflows page <http://localhost.openrpa.dk/#/RPAWorkflows>`_ (eg. ``http://localhost.openrpa.dk/#/RPAWorkflows``).

   The **Map Variables** button allows the currently set variables and arguments to be passed to the ``Workflow`` invoke call. In order to do that, after choosing your ``Workflow`` from the dropdown, create the arguments in the **Variables, Arguments & Imports box** and click the **Map Variables** button in the activity.

   **Properties Parameters**

   ``Displayname`` - Title of the Activity inside the sequence.

   ``Wait until Completed`` - If set to ``True``, **OpenRPA** waits until the **Workflow** invoke call is finished - either success or error. If successful, the message containing the data (as designed in the flow at **Node-RED**) is returned to the **OpenRPA** robot. 

   If set to ``False``, however, **OpenRPA** no longer has access to the returned message - communication now is one-way - and therefore all logic that would otherwise depend on it must then be redesigned. Think of it as a try/catch exception block that does not return any exception message. 
   
   ``Workflow`` - The ``Workflow`` which is to be invoked.

.. figure:: images/openrpa_invoke_openrpa.png
   :align: center

   **OpenRPA Invoke OpenRPA.**

.. 3.5.4.1.11
.. py:class:: Invoke Remote OpenRPA

   Allows to remotely invoke RPA Workflows, saved in OpenFlow's repository, to be executed at other OpenRPA clients. 

   The **Map Variables** button allows the currently set variables and arguments to be passed to the workflow invoke call. In order to do that, after choosing your workflow from the dropdown, create the arguments in the **Variables, Arguments & Imports box** and click the **Map Variables** button in the activity.

   **Properties Parameters**

   ``Displayname`` - Title of the activity inside the sequence.

   ``Target`` - OpenFlow's hash string identifying the target which will be activated to execute the workflow.

   ``Wait until Completed`` 

   If set to ``True``, OpenRPA waits until the Workflow invoke call is finished - either success or error. If successful, the message containing the data (as designed in the flow at Node-RED) is returned to the OpenRPA robot. 

   If set to ``False``, however, OpenRPA no longer has access to the returned message - communication now is one-way - and therefore all logic that would otherwise depend on it must then be redesigned. Think of it as a try/catch exception block that does not return any exception message. 
   
  
   ``Workflow`` - **OpenFlow**'s hash string identifying the workflow which will be executed.

.. figure:: images/openrpa_invoke_remote_openrpa.png
   :align: center

   **OpenRPA Invoke Remote OpenRPA.**

.. 3.5.4.1.12
.. py:class:: Move Mouse
   
   Move mouse cursor to a location relative to an element found with **GetElement** (or desktop if no element is supplied).
   
   This Activity has two modes of usage.
   
   The first mode of usage is **Selector**-less. In this mode, the Activity will use the absolute values of the screen to find the ``X`` and ``Y`` offset values. As an example, if the ``user`` has a ``1366x768`` display, the activity will move the mouse according to that resolution inside the screen. To use this mode, all the ``user`` needs to do is to delete any value inside the ``Element`` property of the activity  - its default value is ``item`` - and you can define the ``X`` and ``Y`` offset values. 

   The second mode of usage is **Selector**-bound. In this mode, after selecting a **Windows element**, the activity will use the relative values of the part of the screen which the element occupies to find the ``X`` and ``Y`` offset values. To use this mode, all the user needs to do is drag the **Move Mouse** activity into the element selected and define the ``X`` and ``Y`` offset values.

      The application must be selected by using the **Get Element** Activity.

   **Properties Parameters**

   ``Animate Mouse`` - If set to ``True``, the cursor will appear changing its position throughout execution. Good for showing what is happening in a presentation.

   ``Displayname`` - Title of the Activity inside the sequence.

   ``Element`` - The application selected with the **Get Element** Activity.

   ``Post Wait`` - How long **OpenRPA** should wait for this Activity to finish after completing its execution.

   ``X Offset`` - The horizontal offset inside the window which the cursor will be moved to. Units are in pixels. It also allows for negative values.

   ``Y Offset`` - The vertical offset inside the window which the cursor will be moved to. Units are in pixels. It also allows for negative values.

.. note::

   This activity requires a Mouse IO. If it fails to find one, it will return the error: ``Could not send mouse input. Error Code: 5``. This may happen if **OpenRPA** Client was launched from inside a Windows Remote Desktop and the session was disconnected. To avoid this, please use HDRobots extension, do not disconnect/close the RDP session or make the session persistent by using other techniques (i.e.: running a VNC server).

.. figure:: images/openrpa_move_mouse.png
   :align: center

   **OpenRPA Move Mouse.**

.. 3.5.4.1.13
.. py:class:: Open Application
   
   **Open Application** searches for **Windows element** based on a ``Selector``, and focus on in. If the Application was not found, it will start it. 

   Clicking **Highlight** will red-highlight the first element that matches the criteria on the ``Selector``. Useful for checking if the ``Selector`` is properly set up. 

   This Activity also supports working with ``Selector`` inside itself. All you need to do is drag a ``GetElement``, or according activity, inside its sequence.

   This activity can also be used to work with browsers and other applications such as Java, SAP etc.
   **Properties Parameters**
   
   ``Animate Move`` - Visibly move the window of the application which will be opened, instead of instantly moving it. Useful for presentations.

   ``Check Running`` - Check if application is already running using the ``Selector``. If set to ``Falseยด`, it will launch a new application no matter what.

   ``Displayname`` - Title of the Activity inside the sequence.

   ``Height`` - If set, the application is opened with this given height. Units are in pixels.

   ``Result`` - Save the result of the execution to a variable. By default, it saves the application Element itself.

   ``Selector`` - Contains all the data used to identify applications.

   ``Timeout`` - Time to check for whether the application was found. Essentially a timeout for the ``Check Running`` parameter.

   ``Width`` - If set, the application is opened with this given height. Units are in pixels.

   ``X`` - If set, move the application to this horizontal offset. Units are in pixels. It also allows for negative values.

   ``Y`` - If set, moves the application to this vertical offset. Units are in pixels. It also allows for negative values.

.. figure:: images/openrpa_open_application.png
   :align: center

   **OpenRPA Open Application.**

.. 3.5.4.1.14
.. py:class:: Show Balloon Tip

   **Show Balloon Tip** shows a message similar to the **Show Notification** activity near the system tray. It differs from **Show Notification** only in that it also contains a title and allows for other types of notifications such as Error or Warning.

   **Properties Parameters**

   ``Duration`` - How long the message will appear.

   ``Message`` - Message which will be shown. Needs to be included inside quotes.

   ``Title`` - Title of the balloon tip.

   ``Displayname`` - Title of the Activity inside the sequence.

   ``NotificationType`` - Different notification types: Information, Error or Warning.

.. note::
   
   Refrain from using too many Activities that change UI elements (such as Show Balloon Tip, WriteLine or Show Notification). These activities run single-threaded, which means that each time they are executed, they briefly stop Workflow execution.

.. figure:: images/openrpa_show_balloon_tip.png
   :align: center

   **OpenRPA Show Balloon Tip.**

.. 3.5.4.1.15
.. py:class:: Type Text
   
   The user is strongly discouraged from using this Activity. It is preferable to select an element with the **GetElement** activity and use the **Assign** property to assign a string value to it.

   **Type Text** sends keystrokes from the text contained inside **Hint** to the window currently focused. Instead of memorizing every keystroke, it is recommended to use the **Recorder** as it will map every keystroke automatically.ยน 

   The key stroke syntax should be "{{Modifier1, Key1} {Modifier2, Key2} {...} {ModifierN, KeyN}}".Keep in mind that **Modifiers**, which would be auxiliary keys - such as ``Ctrl``, ``Alt``, ``Shift`` - are not obligatory.

   The user can also send **variables** or **hardcoded text**, such as sending "{{Modifier1, Key1} SOME TEXT " + desired_variable + "{Enter}".

   **Properties Parameters**

   ``Click Delay`` - Delay between each keystroke.

   ``Displayname`` - Title of the Activity inside the sequence.

   ``Text`` - Displayname inside the ``Workflow`` designer.

.. note::

   This activity requires a Keyboard IO. If it fails to find one, it will return "Could not send keyboard input. Error Code: 5". This may happen if **OpenRPA** Client was launched from inside a Windows Remote Desktop Session and the session was disconnected. In order to avoid this, please use the HDRobots extension. Do not disconnect/close the RDP session or persist the session using other techniques (e.g. running VNC).

.. figure:: images/openrpa_type_text.png
   :align: center

   **OpenRPA Type Text.**
   
*ยน - `Overview of TypeText Activity <https://openrpa.openrpa.dk/pages/typetext-syntax>`_ (``https://openrpa.openrpa.dk/pages/typetext-syntax``)*

OpenRPA.AviRecorder
-------------------
Coming soon - Work in progress

OpenRPA.Database
----------------
.. py:module:: OpenRPA.Database
      :noindex:

Here belong the activities located inside the OpenRPA.Database toolbox.

.. 3.5.4.3.1
.. py:class:: Database Scope

   Selects the database which will be used to query, insert, update or delete data by opening a connection and ending it once all the activities inside its scope are concluded. A thorough example is shown in the :ref:`OpenRPA.Database Activities, DataTable, DataView` section.

   **Properties Parameters**

   ``ConnectionString`` - The `ConnectionString <https://docs.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlconnection.connectionstring?view=dotnet-plat-ext-3.1>`_ (``https://docs.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlconnection.connectionstring?view=dotnet-plat-ext-3.1``) which will be used to connect to the database. An example is ``"Server=localhost;Port=3306;Database=using_datatables;Uid=root;Pwd='life is fine 9#';"``.

   ``DataProvider`` - The provider used for the given database. Default for **MySQL** is ``"MySql.Data.MySqlClient"``.

   ``DataSource`` - The name of the ``database schema`` which will be used to gather data from.

   ``DisplayName`` - Title of the Activity inside the sequence.

   ``Timeout`` - Time to wait for until the connection is completed. If connection is not completed until this time, activity will pass on through others inside the outer sequence.

.. figure:: images/openrpa_database_scope.png
   :align: center

.. 3.5.4.3.2
.. py:class:: Execute Non Query

   Runs a query that returns no results, useful for ``INSERT``, ``UPDATE``, and ``DELETE`` statements, the ``Result`` value is the number of rows affected by the command. If no rows are affected, it returns ``0``.

   **Properties Parameters**

   ``Query`` - The query which will be executed.

   ``activity_displayname`` - Title of the Activity inside the sequence.

   ``CommandType`` - Default is set to ``Text`` - which means the command inside the ``Query`` field will be executed. If set to ``StoredProcedure``, the text inside ``Query`` should be the name of a stored procedure. If set to ``TableDirect`` all rows and columns of the named table will be returned when you call one of the Execute methods.

   ``Result`` - ``Int32`` output of the executed query.

.. figure:: images/openrpa_execute_non_query.png
   :align: center

.. 3.5.4.3.3
.. py:class:: Execute Query

   Runs a query and returns the results as a DataTable. Useful to be used with ``SELECT`` statements.

   **Properties Parameters**

   ``Query`` - The query which will be ezecuted.

   ``activity_displayname`` - Title of the Activity inside the sequence.

   ``CommandType`` - Default is set to ``Text`` - which means the command inside the ``Query`` field will be executed. If set to ``StoredProcedure``, the text inside ``Query`` should be the name of a stored procedure. If set to ``TableDirect`` all rows and columns of the named table will be returned when you call one of the Execute methods.

   ``DataTable`` - The ``DataTable`` object where to save the result of the query.

.. figure:: images/openrpa_execute_query.png
   :align: center

.. note::
   In OpenRPA, a ``DataTable`` corresponds to a 2-dimensional non-serializable object used to hold values. Think of it as a matrix with ``i`` rows and ``j`` columns. The ``i`` rows are accessible by using the ``.Rows(n)`` attribute, where ``n`` is the number of the row - starting from 0 - which you want to access. The ``j`` columns are accessible by using the ``.Item(n)`` attribute, where ``n`` is the number of the column - starting from 0 - which you want to access. It is useful to remind here that the user must have accessed the ``Rows`` attribute, therefore, if the user wanted to access the 2nd column on the 3rd row of the datatable they would use ``.Rows(2).Item(1)`` attribute.

.. 3.5.4.3.4
.. py:class:: Execute Scalar<>

   Runs a query that returns exactly one result, such as aggregate functions: ``SUM``, ``AVG``, ``MAX``, ``MIN`` and ``COUNT``.

   **Properties Parameters**

   ``Query`` - The query which will be executed.

   ``activity_displayname`` - Title of the Activity inside the sequence.

   ``ArgumentType`` - Type of the result which will be returned.

   ``CommandType`` - Default is set to ``Text`` - which means the command inside the ``Query`` field will be executed. If set to ``StoredProcedure``, the text inside ``Query`` should be the name of a stored procedure. If set to ``TableDirect`` all rows and columns of the named table will be returned when you call one of the Execute methods.

   ``Result`` - Result output of the executed query. - has type defined as in ``ArgumentType``.

.. figure:: images/openrpa_execute_scalar.png
   :align: center   

.. 3.5.4.3.5
.. py:class:: Update from DataTable

   Adds data in ``SQL table`` with the data contained inside the given ``DataTable``. The ``DataTable`` must first have been selected with the **Execute Query** Activity by using the ``"SELECT * from ${TABLE};"`` statement, where ``"${TABLE}"`` is the table to which the data will be added, then the user can change its data by adding rows with the **AddDataRow** activity and finally update it using this activity. It is interesting to remind the user that the headers and content must match those of the ``SQL Table``.

   **Properties**

   ``DataTable with the data you want to update from`` - self-explanatory.

   ``TableName`` - Table to insert rows into.

   ``activity_displayname`` - Title of the Activity inside the sequence.

   ``Result`` - number of rows affected.

.. figure:: images/openrpa_update_from_datatable.png
   :align: center

OpenRPA.ElisRossum
------------------
Coming soon - Work in progress

OpenRPA.Forms
-------------
.. py:module:: OpenRPA.Forms
      :noindex:

Here belong the activities located inside the OpenRPA.Forms toolbox.

.. 3.5.4.4.1
.. py:class:: Invoke Form

   Allows the user to create a static form which uses `ForgeForms language <https://wpf-forge.github.io/Forge.Forms/guides/getting-started.html>`_ (``https://wpf-forge.github.io/Forge.Forms/guides/getting-started.html``). ``SimpleForm`` and ``ImageForm`` examples are shown in the **Snippets toolbox**, just besides the **Activities toolbox**. This is very useful when a Workflow needs to gather input from an user before executing its business logic. The user can set up the form and preview it by clicking the **Open Designer** button. After creating it, all the user needs to do to create the variables used by it is click the **Create variables** button. An example is shown in the :ref:`OpenRPA Forms` section. 

   **Properties Parameters**

   ``DisplayName`` - Title of the Activity inside the sequence.

   ``Form`` - String containing the form which will be created.

   ``Result`` - Creates a ``FormResult`` variable which will hold the DOM object created by the form. To access the values inside the DOM object created, the user can simply use the ``Model.Values(i).ToString`` to access the ``i-th`` input variable.

.. figures:: images/openrpa_invoke_formula.png
  :align: center

.. 3.5.4.4.2
.. py:class:: Show Notification

   Shows a notification in the lower right corner of the screen for a limited amount of time.

   **Properties Parameters**

   ``DisplayName`` - Title of the Activity inside the sequence.

   ``Message`` - Message which will be shown.

   ``NotificationType`` - Different notification types: Information, Error or Warning.

.. note::
   
   Refrain from using too many Activities that change UI elements (such as Show Balloon Tip, WriteLine or Show Notification). These activities run single-threaded, which means that each time they are executed, they briefly stop Workflow execution.

.. figure:: images/openrpa_show_notification.png
   :align: center

   **OpenRPA.Forms Show Notification.**

OpenRPA.IE
----------
.. py:module:: OpenRPA.IE
      :noindex:


Here belongs the activities located inside the OpenRPA.IE toolbox.


.. 3.5.4.5.1
.. py:class:: Get Element

 This Activity is similar to OpenRPA.GetElement. It selects an Element - or elements - filtered with the IE selector. 

 Clicking **Highlight** will red-highlight the first element that matches the criteria on the selector. Useful for checking if the selector is properly set up.

This activity also supports nesting **GetElements**. In order to know more about that, please refer to :ref:`Return multiple elements` section.

 **Properties Parameters**

   ``Displayname`` - Title of the Activity inside the sequence.

   ``Elements`` - the selected IE Elements.
   
   ``From`` - Allows search only within an Element found within any of the IEElement's instances.

   ``LoopAction`` - Loop the selected ``Activity`` until something is found.

   ``MaxResults`` - Maximum number of elements to be found.

   ``MinResults`` - Number of minimum results. If this value is higher than 0 and this Activity fails to find an element, it throws an exception (``ElementNotFound``). If you want to check whether an element exists or not, set this value to 0 and test for 'item.Length() == 0' inside the sequence. 

   ``Selector`` - Contains all the data to identify the IE application.

   ``Timeout`` - Time when the Activity ceases if it is not successfully able to find an element.

   ``Wait for ready`` - If true, wait until the page is fully loaded.

.. note::
   
   The user can also use **XPath Selector** to select elements inside the page. **XPath Selectors** use the following syntax:

   - * - Matches any element node
   - @* - Matches any attribute node
   - node() - Matches any node of any kind

   So, for instance, if the user wanted to select all the child element nodes of a **bookstore** node, they'd use ``/bookstore/*``. To select all elements in a document, they'd use ``//*``. Now if they'd like to select all **title** elements which have **at least one** attribute of any kind, they'd use ``//title[@*]``. To concatenate XPath expressions, the user can use the ``| operator``. So, if they'd like to select all **title AND price** elements of all book elements, they'd use the expression ``//book/title | //book/price``.ยน

*ยน - `XPath Syntax <https://www.w3schools.com/xml/xpath_syntax.asp>`_ (``https://www.w3schools.com/xml/xpath_syntax.asp``).*

.. note::

   As well as the **XPath Selector**, the user can also use the **CSS Selector**. CSS Selectors use the following syntax:

   - **.{CLASS}** - Matches all elements with that class.
   - **#{CLASS}** - Matches all elements with that id.
   - ** * ** - Matches all elements.
   - **{ELEMENT}** - Matches all <p> elements.

   The syntax is pretty similar to that of **XPath Selectors**. For more on **CSS Selectors**, refer to `CSS Selectors <https://www.w3schools.com/cssref/css_Selectors.asp>`_ (``https://www.w3schools.com/cssref/css_Selectors.asp``).


.. figure:: images/openrpa_ie_get_element.png
   :align: center

   **OpenRPA.IE Get Element.**

.. 3.5.4.5.2
.. py:class:: Open URL

 Opens an URL in the currently selected InternetExplorer.Application instance. If there is no URL set, it will automatically start a new Internet Explorer instance.

  **Properties Parameters**

  ``DisplayName`` - Title of the Activity inside the sequence.

  ``FocusBrowser`` - If set to ``True``, will focus the window opened by the browser.

  ``Url`` - The URL which the browser will navigate to.

.. figure:: images/openrpa_open_url.png
   :align: center

   **OpenRPA.IE Open URL.**

OpenRPA.Image
-------------
.. py:module:: OpenRPA.Image
      :noindex:


Here belongs the activities located inside the OpenRPA.Image toolbox.

.. note::
   
   Activities that use OCR to recognize text inside images must have first have the language which OCR will use first on the **Settings tab**.

..3.5.2.6.1
.. py:class:: Get Color

 Gets RGBA color at the specified coordinates inside an element provided by **Image.GetElement**.

 **Properties Parameters**

   ``Displayname`` - Title of the Activity inside the sequence.

   ``Element`` - Element from which the colors will be acquired.

   ``Result`` - Variable to which to save the color.
    
   ``X Offset`` - The horizontal offset inside the element from which to capture the color. Units are in pixels. It also allows for negative values.

   ``Y Offset`` - The vertical offset inside the element from which to capture the color. Units are in pixels. It also allows for negative values.

.. figure:: images/openrpa_get_color.png
   :align: center

   **OpenRPA.Image Get Color.**

.. 3.5.4.6.2
.. py:class:: Get Element
 
   Locates an image in screen or in a specific application window and creates an **ImageElement** from it. Use the **Select Image** button to select the image you want to capture or use the **Recorder**.

   The **Recorder** at first tries to create Elements from controls in Windows Applications, Java Apps or Web elements. As a last resource, it will then make use of **Image.GetElement** to create Elements by capturing the smallest unique images inside the image you drag while recording.

   Clicking the **Highlight** button will red-highlight the first element that matches the criteria in the **Selector**. It is useful for checking if the **Selector** is properly set up.

   **Properties Parameters**

   ``CompareGray`` - If set to ``True``, compares the image in grayscale to find the desired element. This parameter also saves performance.

   ``Displayname`` - Title of the Activity inside the sequence.

   ``Elements`` - Element from which the image will be gathered.
   
   ``From`` - Allows search only within an Element found within any of the **ImageElement**'s instances.
   
   ``Limit`` - Limit the number of Elements.
   
   ``LoopAction`` - Loop the selected ``Activity`` until something is found.
   
   ``MaxResults`` - Number of maximum results.
   
   ``MinResults`` - Number of minimum results. If this value is higher than 0 and this activity fails to find an Element, it throws an exception (``ElementNotFound``). If you want to check whether an image exists or not, set this value to 0 and test for 'item.Length() == 0' inside the sequence. 
   
   ``Processname`` - Limits the Element's process to a specific processname.
   
   ``Threshold`` - Threshold used to find a matching image.
   
   ``Timeout`` - Time until the Activity ceases if not successfully able to find an Element.

.. figure:: images/openrpa_get_element.png
   :align: center

   **OpenRPA.Image Get Element.**

.. 3.5.4.6.3
.. py:class:: Get Image

 Gets an image from the screen relative to another image or Element found with **Image.GetElement**. 

 First of all, user must use the Image.Get Element Activity to select the image which this Activity will act upon, then use the **Select Image** button to specify the relative area within the screen you want to capture. That is, the selection **Get Image** does it match to another image selected with the Image.Get Element Activity.

 Clicking **Highlight** will green-highlight the image selected that is relative to the other one, which will appear blue-highlighted. This is useful for checking if the **Selector** is properly set up.

 For more on Image Handling inside **OpenRPA**, please visit Appendix B - :ref:`Image Handling`.

   **Properties Parameters**

   ``Displayname`` - Title of the Activity inside the sequence.

   ``Element`` - Element from which the image will be gathered.

   ``Height`` - Height of the image to be captured.

   ``OffsetX`` - The horizontal offset inside the Element from which to capture the image. Units are in pixels. It also allows for negative values.

   ``OffsetY`` - The vertical offset inside the picture from which to capture the image. Units are in pixels. It also allows for negative values.

   ``Result`` - Variable to which the image Element will be saved.

   ``Width`` - Width of the image to be captured.

.. figure:: images/openrpa_get_image.png
   :align: center

   **OpenRPA.Image Get Image.**

.. 3.5.4.6.4
.. py:class:: Get Text
 
 Gets text from an image using OCR. It can be limited to a specific word or sentence. It can also be used to split or limit text gathered from other image-related activities.

 The ``Limit to`` or ``WordLimit`` parameter is used to limit the output of the OCR processing. It is useful if you want to limit the output of ``Get Text`` to a given set of words. To access the text created from OCR, simply access the ``item.Value`` variable - or the ``Value`` property of the ``Element`` defined.

 **Properties Parameters**
 
   ``CaseSensitive`` - Differentiate between lowercase and uppercase letters.

   ``Displayname`` - Title of the Activity inside the sequence.
 
   ``Element`` - Element from which the image will be gathered.

   ``Result`` - Variable to which the **ImageElement** gathered will be saved.

   ``WordLimit`` - Maximum numbers of words to gather.

.. figure:: images/openrpa_get_text.png
   :align: center

   **OpenRPA.Image Get Text.**

.. 3.5.4.6.5
.. py:class:: Load From File

 Loads an image from a file and returns it as an **ImageElement**. 

 It also uses OCR Image Recognition automatically to capture the text inside the screenshot and saves it inside the result's ``ImageElement.value`` attribute. The extensions allowed are: ``gif, jpg, jpeg`` and ``png``, that is, only image extensions.

 **Properties Parameters**

   ``Displayname`` - Title of the Activity inside the sequence.

   ``Filename`` - Filename of the file that will be used to acquire the image from.

   ``Result`` - Variable to which to save the **ImageElement**.

 .. note::

   Note: OCR Image Recognition is done automatically upon the image. Users may access the resulting text by accessing ``ImageElement.value`` property.
   
.. figure:: images/openrpa_load_from_file.png
   :align: center

   **OpenRPA.Image Load From File.**

.. 3.5.4.6.6
.. py:class:: Take Screenshot
 
 Takes a screenshot of the whole screen or of a specific Element found by using **Image.GetElement** and returns it as an **ImageElement**.
 
 This Activity has two modes of usage.
   
 The first mode of usage is **Selector**-less. In this mode the Activity will take a screenshot of the whole screen if no ``Width``, ``Height`` and offsets are set. To use this mode, all the user needs to do is deleting any value inside the ``Element`` property of the activity  - its default value is ``item`` - and define the ``X`` and ``Y`` offset values, if desired. 

 The second mode of usage is **Selector**-bound. In this mode, after selecting an **Image Element**, the Activity will use the relative values of the **Image Element** to find the ``X`` and ``Y`` offset values. To use this mode, all the user needs to do is drag the **Take Screenshot** activity into the Element selected and define the ``Width``, ``Height`` and ``X``,``Y`` offset values.

 **Properties Parameters**

   ``Displayname`` - Title of the Activity inside the sequence.
 
   ``Element`` - Name of the Element from which the screenshot will be captured.

   ``Height`` - Height of the screenshot.

   ``Result`` - Variable to which to save the screenshot.

   ``Width`` - Width of the screenshot.

   ``X`` - The horizontal offset inside the picture from which to capture the screenshot. Units are in pixels. It also allows for negative values. 

   ``Y`` - The vertical offset inside the picture from which to capture the screenshot. Units are in pixels. It also allows for negative values.

 .. note::

   Note: OCR Image Recognition is done automatically upon the image and you may access the resulting text by accessing the ``value`` property of the resulting ``Image Element``.

.. figure:: images/openrpa_take_screenshot.png
   :align: center

   **OpenRPA.Image Take Screenshot.**

OpenRPA.Java
-------------------
Coming soon - Work in progress

OpenRPA.NM
----------
.. py:module:: OpenRPA.IE
      :noindex:


Here belong the activities located inside the OpenRPA.NM toolbox.

.. 3.5.4.7.3
.. py:class:: Get Element

 This Activity is similar to OpenRPA.Get Element. It selects an element - or elements - filtered with the NM **Selector**. 

 Clicking **Highlight** will red-highlight the first Element that matches the criteria on the selector. Useful for checking if the selector is properly set up.

 **Properties Parameters**

   ``Displayname`` - Title of the Activity inside the sequence.

   ``Elements`` - The selected NM elements.
   
   ``From`` - It allows search only within an Element found within any of the NMElement's instances.

   ``MaxResults`` - Maximum elements to be found.

   ``MinResults`` - Number of minimum results. If this value is higher than 0 and this activity fails to find an element, it throws an exception (``ElementNotFound``). If you want to check whether an elements exists or not, set this value to 0 and test for 'item.Length() == 0' inside the sequence. 

   ``Selector`` - Contains all the data to identify the NM application.

   ``Timeout`` - Time until the activity ceases if not successfully able to find an element.

   ``Wait for ready`` - If set to "True", it waits until the page is fully loaded.

.. note::
   
   The user can also use **XPath Selector** to select Elements inside the page. XPath Selectors use the following syntax:

   - * - Matches any element node
   - @* - Matches any attribute node
   - node() - Matches any node of any kind

   So, for instance, if the user wanted to select all the child element nodes of a **bookstore** node, they'd use ``/bookstore/*``. To select all elements in a document, they'd use ``//*``. Now, if they'd like to select all **title** elements which have **at least one** attribute of any kind, they'd use ``//title[@*]``. To concatenate XPath expressions, the user can use the ``| operator``. So, if they'd like to select all **title AND price** elements of all book elements, they'd use the expression ``//book/title | //book/price``.ยน

*ยน - `XPath Syntax <https://www.w3schools.com/xml/xpath_syntax.asp>`_ (``https://www.w3schools.com/xml/xpath_syntax.asp``).*

.. note::

   As well as the **XPath Selector**, the user can also use the **CSS Selector**. **CSS Selectors** use the following syntax:

   - **.{CLASS}** - Matches all elements with that class.
   - **#{CLASS}** - Matches all elements with that id.
   - ** * ** - Matches all elements.
   - **{ELEMENT}** - Matches all <p> elements.

   The syntax is pretty similar to that of **XPath Selectors**. For more on **CSS Selectors**, refer to `CSS Selectors <https://www.w3schools.com/cssref/css_Selectors.asp>`_ (``https://www.w3schools.com/cssref/css_Selectors.asp``).


.. figure:: images/openrpa_ie_get_element.png
   :align: center

   **OpenRPA.NM Get Element.**

.. 3.5.4.7.4
.. py:class:: Open URL

 Opens an URL in the currently selected InternetExplorer.Application instance. If there is no URL set, it will automatically start a new browser instance.

  **Properties Parameters**

  ``DisplayName`` - Title of the Activity inside the sequence.

  ``NewTab`` - If set to ``True``, it opens the URL inside a new tab in the browser.

  ``Url`` - The URL which the browser will navigate to.

.. figure:: images/openrpa_open_url.png
   :align: center

   **OpenRPA.NM Open URL.**


OpenRPA.Office
--------------
.. py:module:: OpenRPA.Office
      :noindex:

Here belongs the activities located inside the OpenRPA.Office toolbox.

.. 3.5.4.10.1
.. py:class:: Add Paragraph

   Adds a new paragraph to a Microsoft Word document, which is inserted at position ``Index``.

   **Properties Parameters**

   ``Filename`` - Full path or ``filename`` of the Microsoft Word document to which the paragraph will be added.

   ``Index`` - Index to which to add the paragraph. Initially, the file which will be read will index each paragraph starting at ``1``. So, if the user adds at a position which contains a paragraph after it, the paragraph will be added inbetween.

   ``Text`` - Text which will be added - ie. paragraph.

   ``DisplayName`` - Title of the activity inside the sequence.

.. figure:: images/openrpa_add_paragraph.png
   :align: center

.. 3.5.4.10.2
.. py:class:: Clear Range

   Clears all data and formatting from a range of cells.

   **Properties Parameters**

   ``Cells`` - Either select a range of cells to wipe or leave blank if it is desired to clear all cells.

   ``Filename`` - Full path or ``filename`` of Microsoft Excel workbook.

   ``Worksheet`` - Name of worksheet from which cells will be cleared.

   ``DisplayName`` - Title of the activity inside the sequence.

   ``ReadPassword`` - Provides a way to open Microsoft Excel files if a password is needed. Remember to insert the password between quotes - ie. ``"password"``.

   ``Visible`` - Actually opens Microsoft Excel interface.

   ``WritePassword`` - Provides a way to save Microsoft Excel file if a password is needed. Remember to insert the password between quotes - ie. ``"password"``.

   ``Workbook`` - Provides a way to select which ``Workbook`` will be read.

.. figure:: images/openrpa_clear_range.png
   :align: center

.. 3.5.4.10.3
.. py:class:: Close Document

   Closes an Microsoft Word document. Also closes Microsoft Word application itself if no other documents are open. This activity works very similarly to **OpenRPA.Close Application**, the only difference here is: it saves the Word document by default when closing it.

   **Properties Parameters**

   ``Filename`` - Full path or ``filename`` of Microsoft Word document which will be closed.

   ``Save Changes`` - Whether or not to save changes when closing the Word document. Default is ``True``.

   ``DisplayName`` - Title of the activity inside the sequence.

.. figure:: images/openrpa_close_document.png
   :align: center

.. 3.5.4.10.4
.. py:class:: Close Workbook

   Closes an open Microsoft Excel workbook. Also closes Microsoft Word if no other workbooks are open. This activity works very similarly to **OpenRPA.Close Application**, the only difference here is: it saves the Excel document by default when closing it.

   **Properties Parameters**

   ``Filename`` - Full path or ``filename`` of Microsoft Excel workbook which will be closed.

   ``Save Changes`` - Whether or not to save changes when closing the Excel workbook. Default is ``True``.

   ``Workbook`` - The user can also pass the ``variable`` name of a ``Workbook`` which is already open.

   ``DisplayName`` - Title of the activity inside the sequence.

.. figure:: images/openrpa_close_workbook.png
   :align: center

.. 3.5.4.10.5
.. py:class:: Get Mails

   Gets all emails from a Microsoft Outlook folder.

   **Properties Parameters**

   ``Filter`` - The user can pass a filter to get only emails containing the specified string.

   ``Folder`` - Folder from which the emails will be gathered.

   ``MaxResults`` - Specify a maximum number of emails to be acquired.

   ``UnreadOnly`` - If set to ``True``, will only acquire unread mails. Else, will acquire any read and unread mails.

   ``DisplayName`` - Title of the activity inside the sequence.

   ``Emails`` - Will save all emails to a variable of enumerable type containing all emails acquired.

.. figure:: images/openrpa_get_mails.png
   :align: center

.. 3.5.4.10.6
.. py:class:: Get Paragraph

   Gets one or more paragraphs from a Microsoft Word document.

   **Properties Parameters**

   ``Filename`` - Full path or ``filename`` of the Microsoft Word document from which the paragraph (or paragraphs) will be acquired.

   ``Index`` - Starting index for the paragraph or paragraphs which will be gathered. Leave this field blank in order to gather whole text inside Word document.

   ``DisplayName`` - Title of the activity inside the sequence.

   ``Max Results`` - Limit number of paragraphs which will be acquired. Leave blank to get all from index onwards.

   ``Count`` - Returns the total number of paragraphs inside the document.

   ``Text`` - Save the result text to this variable.

.. figure:: images/openrpa_get_paragraph.png
   :align: center

.. 3.5.4.10.8
.. py:class:: Read Cell

   Reads the content of a single cell in a Microsoft Excel sheet.

   **Properties Parameters**

   ``Cell`` - "A8"
   
   ``ArgumentType`` - Type of the variable to which the content of the cell will be saved.

   ``DisplayName`` - Title of the activity inside the sequence.

   ``Filename`` - Filename of the file which will be read.

   ``Result`` - Variable to which the content of the result of the cell will be saved.

   ``Workbook`` - Variable to which the entire ``Workbook`` object will be saved. Despite this Activity reading a specific cell, the ``Workbook`` is also available.

   ``Worksheet`` - Worksheet from which to gather the data.

   ``Formula`` - Variable to which it saves the content of the formula inside the cell.

   ``Range`` - ?

.. figure:: images/openrpa_read_cell.png
   :align: center

   **OpenRPA.Office Read Cell.**

.. 3.5.4.10.9
.. py:class:: Read Range

   Reads a range of cells in a Microsoft Excel sheet.

   **Properties Parameters**

   ``Cells`` - The cells which will be read, can be delimited with a colon.

   ``Filename`` - Filename of the file which will be read.

   ``Worksheet`` - The sheet inside the Excel file which will be read.

   ``Clear Formats`` - Clear cell formatting.

   ``DisplayName`` - Title of the Activity inside the sequence. 

   ``IgnoreEmptyRows`` - Ignores empty rows in the file which will be read. Please notice that it changes the numbering of the rows.

   ``ReadPassword`` - String containing the password for the file, if there is any.

   ``Use Header Row`` - Read header from the range of cells selected.

   ``Visible`` - **OpenRPA** will actually open an Excel file in Windows UI.

   ``WritePassword`` - Password with which the file will be written after being read.

   ``DataTable`` - ``DataTable`` to which data will be saved.

   ``lastUsedColumn`` - Save last used column index to variable.

   ``lastUsedRow`` - Save last used row index to variable.

   ``Workbook`` - Save ``Workbook`` to a specific variable.

.. figure:: images/openrpa_read_range.png
   :align: center

   **OpenRPA.Office Read Range.**

OpenRPA.OpenFlowDB
------------------
.. py:module:: OpenRPA.OpenFlowDB
      :noindex:

Here belong the activities located inside the OpenRPA.OpenFlowDB toolbox.

.. 3.5.4.11.2
.. py:class:: Delete File

   Deletes a file from the OpenFlow MongoDB database. The user can use either the ``Filename`` of the file he wants to delete or the ``id``, available from going into OpenFlow's page > Admin > Files > Clicking the Edit button for the file > ``Show json`` or by checking the URL.

   **Properties Parameters**
   
   ``_id`` - ``ID`` of the file which will be deleted.

   ``DisplayName`` - Title of the activity inside the sequence.

   ``Filename`` - Filename of the file which will be deleted.

   ``IgnoreErrors`` - Ignore any errors which may have occurred and forcibly delete the file.

.. figure:: images/openrpa_save_file.png
   :align: center

.. 3.5.4.11.3
.. py:class:: Delete One

   Deletes one item from the OpenFlow MongoDB database. User must specify the desired ``Collection`` to which the item belongs. User can also specify an object which will be deleted in batch from the database as well.

   **Properties Parameters**

   ``_id`` - ``ID`` of the item which will be deleted.

   ``Collection`` - Collection to which the item belongs.

   ``DisplayName`` - Title of the activity inside the sequence.

   ``IgnoreErrors`` - Ignore any errors which may have occurred and forcibly delete the item.

   ``Item`` - Object which the user can specify instead of the ``_id``.

.. figure:: images/openrpa_delete_one.png
   :align: center

.. 3.5.4.11.4
.. py:class:: Get Credentials

   Gets a set of encrypted credentials from OpenFlow. This is the most recommended way of acquiring previously saved credentials into the OpenFlow MongoDB database with the **Set Credentials** activity. It is a great replacement for any kind of local safe, such as **KeePass**. 

   **Properties Parameters**
   
   ``DisplayName`` - Title of the activity inside the sequence.

   ``Name`` - Name of credential which will be acquired.

   ``Password`` - Saves the password to a variable of type `SecureString <https://docs.microsoft.com/en-us/dotnet/api/system.security.securestring?view=netcore-3.1>`_ (``https://docs.microsoft.com/en-us/dotnet/api/system.security.securestring?view=netcore-3.1``).

   ``UnsecurePassword`` - Saves the password acquired to a variable of type ``String``.

   ``Username`` - Saves username acquired to a variable of type ``String``.

.. figure:: images/openrpa_openflowdb_get_credentials.png
   :align: center

.. 3.5.4.11.5
.. py:class:: Get File

   Downloads a file saved inside the OpenFlow MongoDB database and saves it to the specified ``LocalPath``. The user can use either the ``Filename`` of the file he wants to download or the ``id``, available from going into OpenFlow's page > Admin > Files > Clicking the Edit button for the file > ``Show json`` or check the URL. The folder to which the file will be saved must exist.

   **Properties Parameters**

   ``_id`` - ``ID`` of the file which will be downloaded.

   ``DisplayName`` - Title of the activity inside the sequence.

   ``Filename`` - Filename of the file which will be downloaded.

   ``IgnorePath`` - If set to ``True``, will ignore the last name of the ``LocalPath``. Useful for downloading full folders created inside OpenFlow.

   ``LocalPath``- Path of the folder to which the file will be saved.

.. figure:: images/openrpa_get_file.png
   :align: center

.. 3.5.4.11.6
.. py:class:: Grant Permission

   Add or update permissions for a user or role on the specified object, document must be updated in OpenFlow after changing permissions with **Insert or Update One**. Object must also be supplied from a **OpenFlowDB.Query** activity.

   **Properties Parameters**

   ``Delete`` - If set to ``True``, will allow specified user or role to delete the object inside OpenFlow.

   ``DisplayName`` - Title of the activity inside the sequence.

   ``EntityId`` - ``ID`` of the object inside OpenFlow MongoDB database.

   ``Item`` - ``Object`` gathered from **OpenFlowDB.Query** activity.

   ``Name`` - Name of the role or user to which permissiosn will be added.

   ``Read`` - If set to ``True``, will allow specified user or role to read the object inside OpenFlow.

   ``Result`` - ``JObject`` to which the resulting object will be saved.

   ``Update`` - If set to ``True``, will allow specified user or role to update the object inside OpenFlow. 

.. figure:: images/openrpa_grant_permission.png
   :align: center

.. 3.5.4.11.7
.. py:class:: Insert One

   Inserts one object into the OpenFlow MongoDB database.

   **Properties Parameters**

   ``Collection`` - Collection to which the object will be saved. Default is ``"entities"``.

   ``DisplayName`` - Title of the activity inside the sequence.

   ``EncryptFields`` - Encrypts the specified fields.

   ``IgnoreErrors`` - Forcibly add the object to the OpenFlow MongoDB database, ignoring any errors that may occur.

   ``Item`` - Object which will be added.

   ``Result`` - Returns a ``JObject`` containing the object which was just added.

   ``Type`` - Type of the ``Object`` which will be added.

   ``Uniqueness`` - Specifies field on which the item is unique or not.

.. figure:: images/openrpa_insert_one.png
   :align: center

.. 3.5.4.11.8
.. py:class:: Insert or Update One

   Updates an item into the OpenFlow database, if it does not exists, insert it instead. Checks on ``_id`` unless user specifies Uniqueness, then it will find existing items based on the fields mentioned in the Uniqueness.

   **Properties Parameters**

   ``Collection`` - Collection to which the object will be saved. Default is ``"entities"``.

   ``DisplayName`` - Title of the activity inside the sequence.

   ``EncryptFields`` - Encrypts the specified fields.

   ``IgnoreErrors`` - Forcibly add the object to the OpenFlow MongoDB database, ignoring any errors that may occur.

   ``Item`` - Object which will be added.

   ``Result`` - Returns a ``JObject`` containing the object which was just added.

   ``Type`` - Type of the ``Object`` which will be added.

   ``Uniqueness`` - Specifies field on which the item is unique or not.

.. figure:: images/openrpa_insert_or_update_one.png
   :align: center

.. 3.5.4.11.9
.. py:class:: Query Activity

   Query the OpenFlow MongoDB database for one or more items.

   **Properties Parameters**

   ``Collection`` - Collection to which the object will be saved. Default is ``"entities"``.

   ``DataTable`` - Saves the output of the query to a ``DataTable``.

   ``DisplayName`` - Title of the activity inside the sequence.

   ``Orderby`` - Selects order in which to query the data. More on this `here <https://docs.mongodb.com/manual/reference/operator/meta/orderby/#:~:text=In%20the%20mongo%20shell%2C%20use,in%20ascending%20or%20descending%20order.&text=These%20examples%20return%20all%20documents,age%20field%20in%20descending%20order.>`_ (``https://docs.mongodb.com/manual/reference/operator/meta/orderby/#:~:text=In%20the%20mongo%20shell%2C%20use,in%20ascending%20or%20descending%20order.&text=These%20examples%20return%20all%20documents,age%20field%20in%20descending%20order.``).

   ``Projection`` - Provides a field in which to use to project the data as per `here <https://docs.mongodb.com/manual/tutorial/project-fields-from-query-results/>`_ (``https://docs.mongodb.com/manual/tutorial/project-fields-from-query-results/``).

   ``QueryString`` - Name of the object which will be returned inside the collection.

   ``Result`` - Returns a ``JObject`` containing all objects returned by the query.

   ``Skip`` - Number of items to which to skip. Argument type is ``Int32``.

   ``Top`` - Selects top items. Argument type is ``Int32``.

.. 3.5.4.11.10
.. py:class:: Remove Permission

   Removes permissions for a user or role on the specified object, document must then be updated in OpenFlow after changing permissions with **Insert or Update One** Activity. The input field inside the activity is an autocompleting field for the user to select the ``User`` which will have permissions removed. Object ``Item`` must be the ``Result`` from a **OpenFlowDB.Query** activity.

   **Properties Parameters**

   ``DisplayName`` - Title of the activity inside the sequence.

   ``EntityId`` - ``ID`` of the object inside OpenFlow MongoDB database.

   ``Item`` - ``Object`` gathered from **OpenFlowDB.Query** activity.

   ``Name`` - Name of the role or user to which permissiosn will be added.

   ``Result`` - ``JObject`` to which the resulting object will be saved.

.. figure:: images/openrpa_remove_permission.png
   :align: center

.. 3.5.4.11.11
.. py:class:: Save File

   Uploads and saves a file into the OpenFlow MongoDB database.

   **Properties Parameters**

   ``DisplayName`` - Title of the activity inside the sequence.

   ``Filename`` - The complete path and filename of the file which will be uploaded.

   ``Path`` - Save the file with a ``path`` prefixed to it inside the database. Used for arranging items inside a specific folder for returning them later.

   ``Result`` - ``String`` containing the ``ID`` of the file inside OpenFlow MongoDB database.

.. 3.5.4.11.12
.. py:class:: Set Credentials

   Creates or updates a set of encrypted credentials inside OpenFlow. This is the most recommended way of saving credentials into the OpenFlow MongoDB database. It is a great replacement for any kind of local safe, such as **KeePass**.

   **Properties Parameters**

   ``DisplayName`` - Title of the activity inside the sequence.

   ``Name`` - Name of credential which will be stored.

   ``Password`` - Password of credential which will be stored. 

   ``Username`` - Username of credential which will be stored.

.. figure:: images/openrpa_openflowdb_set_credentials.png
   :align: center

OpenRPA.SAP
------------------
Coming soon - Work in progress

OpenRPA.Script
------------------
Coming soon - Work in progress

OpenRPA.Utilities
------------------
Coming soon - Work in progress

OpenRPA.Windows
---------------
.. py:module:: OpenRPA.Windows
      :noindex:

Here belong the activities located inside the OpenRPA.Windows toolbox.

.. py:class:: Get Element
 
 It selects an element - or elements by using the **Open Selector** button or automatically through recording. 

 You can use the **Highlight** button to highlight the selected area inside the screen. Clicking the **Highlight** button will red-highlight the first element that matches the criteria on the selector. It is useful for checking if the selector is properly set up.

   **Properties Parameters**

   ``Displayname`` - Title of the activity inside the sequence.

   ``Elements`` - Element from which the image will be gathered.
   
   ``From`` - Allows search only within an element found within any of the Element's instances.
   
   ``MaxResults`` - Number of maximum results.
   
   ``MinResults`` - Number of minimum results. If this value is higher than 0 and this activity fails to find an element, it throws an exception (``ElementNotFound``). If you want to check whether an element exists or not, set this value to 0 and test for 'item.Length() == 0' inside the sequence. 

   ``Selector`` - Contains all the data pertaining to the application selected.
   
   ``Timeout`` - Time until the activity ceases if not successfully able to find an element.

.. figure:: images/openrpa_windows_get_element.png
   :align: center

   **OpenRPA.Windows Get Element.**

System.Activities
-----------------
.. py:module:: OpenRPA.SystemActivities
      :noindex:


Here belongs the activities located inside the OpenRPA.System.Activities toolbox.

.. 3.5.4.13.2
.. py:class:: Assign Activity

   This Activity is used to assign a value to a variable.

   ``DisplayName`` - Title of the Activity inside the sequence.

   ``To`` - Variable to which the value will be assigned.

   ``Value`` - Value which will be assigned to a variable.

.. figure:: images/openrpa_assign.png
   :align: center

   **System.Activities Assign**

.. 3.5.4.13.4
.. py:class:: Delay Activity
 
 Creates a delay from an instance of an object to the ``TimeSpan`` class. Users can also simply type a length of time with the format ``HH:MM:SS``.

 **Properties Parameters**

   ``Displayname`` - Title of the Activity inside the sequence.

   ``Duration`` - The argument specifying the length of the delay. Can be a simple 00:00:00.00 {hh:min:ss.mili} or an object from the **TimeSpan** class.

   .. note::

      A **TimeSpan** value represents a time interval and can be expressed as a particular number of days, hours, minutes, seconds and milliseconds. Since it represents a general interval without reference to a particular start or endpoint, it cannot be expressed in terms of years and months, both of which have a variable number of days.ยน

*ยน - `TimeSpan Struct <https://docs.microsoft.com/en-us/dotnet/api/system.timespan?view=netcore-3.1>`_ (``https://docs.microsoft.com/en-us/dotnet/api/system.timespan?view=netcore-3.1``)*

.. figure:: images/openrpa_delay.png
   :align: center

   **System.Activities Delay.**

.. 3.5.4.13.5
.. py:class:: Do While

 Creates a loop that executes other activities dropped in it at least once and repeatedly until **looping condition** no longer evaluates to ``True``.

 **Properties Parameters**

   ``Condition`` - This is a VB Expression that represents the **looping condition**.
 
   ``Displayname`` - Title of the Activity inside the sequence.

.. figure:: images/openrpa_do_while.png
   :align: center

   **System.Activities Do While.**

.. 3.5.4.13.12
.. py:class:: If Activity
 
 It is similar to conditionals in prog. If the **clause condition** is ``True``, it will then execute the activities in the ``Then`` block. Else, if it is ``False``, i will execute the ``Else`` block.

 **Properties Parameters**

   ``Condition`` - This is a VB Expression that represents the **clause condition**.

   ``Displayname`` - Title of the Activity inside the sequence.

.. figure:: images/openrpa_if.png
   :align: center

   **System.Activities If.**


.. py:class:: Sequence Activity

 This activity is used to nest sequences upon the main sequence. You can drop activities inside it just as you would do inside the main sequence. It is helpful to organize your code/workflow because you can expand or collapse them.

 **Properties Parameters**

 ``Displayname`` - Title of the activity inside the sequence.

 .. figure:: images/openrpa_sequence.png
    :align: center

    **System.Activities Sequence.**

.. 3.5.4.13.25
.. py:class:: Throw Activity
 
 Provides a method to terminate the execution of the ``Workflow`` in a certain case, displaying an Error message. In programming, that would be known as "throwing an exception". Upon entering the exception in the ``Exception`` field, type ``new`` to exhibit the available ones.

 **Properties Parameters**

 ``Displayname`` - Title of the Activity inside the sequence.

 ``Exception`` - The exception which will appear on the Error message.

 .. figure:: images/openrpa_throw.png
    :align: center

    **System.Activities Throw.**

.. 3.5.4.13.27
.. py:class:: TryCatch Activity

 Tries to execute a sequence of activities within the ``Try`` block. If any of them causes an error, the error is catched and then the activities inside the ``Catches`` block are executed. At the end of execution, the ``Finally`` block is executed.

 **Properties Parameters**

 ``Displayname`` - Title of the Activity inside the main outer sequence.

.. figure:: images/openrpa_try_catch.png
   :align: center

   **System.Activities TryCatch.**

.. 3.5.4.13.28
.. py:class:: While Activity

 Creates a loop that executes other Activities dropped in it while the **condition** is fulfilled - i.e., ``False``. Once it is fulfilled, i.e., ``True``, the loop ceases and moves to the next Activity. Differently from the **Do While** Activity that first checks whether the condition evaluates to ``True`` before the looping begins.

 **Properties Parameters**

   ``Condition`` - This is a VB Expression that represents the **condition**.
 
   ``Displayname`` - Title of the Activity inside the sequence.

.. figure:: images/openrpa_while.png
   :align: center

   **System.Activities While.**

.. 3.5.4.13.29
.. py:class:: WriteLine Activity
 
 Writes the output to the console according to the ``Text`` string.

 **Properties Parameters**

 ``Displayname`` - Title of the Activity inside the sequence.

 ``Text`` - The string which will be printed on the console.

 ``TextWriter`` - **Optional** - The writer used to write the character stream.

 .. note::

   The **TextWriter** class is an abstract class. Therefore, users should not instantiate it in code. The **StreamWriter** class derives from **TextWriter** and provides implementations of the members for writing to a stream. The following example shows how to write two lines that consist of string values to a text file by using the **WriteLineAsync(String)** method.ยน

*ยน - `TextWriter Class <https://docs.microsoft.com/en-us/dotnet/api/system.io.textwriter?view=netcore-3.1>`_ (``https://docs.microsoft.com/en-us/dotnet/api/system.io.textwriter?view=netcore-3.1``)*

.. figure:: images/openrpa_write_line.png
   :align: center

   **System.Activities Write Line.**

.. 3.6.
***************************
 **Recorder and Selectors**
***************************
Recording is the recommended method to create Workflows inside **OpenRPA**. Instead of endlessly dragging activities into the Designer, it is preferable that the user records the steps by using the **Recorder**.

Using the **Recorder** is very easy, all the user has to do is click the **Recorder** button and do the task which will be automated. If during the recording the user finds interesting to fill, lets say, an input field with some specific variable content, the user may use a dummy text and, after closing the **Recorder**, change these dummy texts to variables by using the Assign activity.

**Selectors** go hand in hand with the **Recorder**. The **Recorder** basically builds a **Selector** for the user, given what is clicked. Selector is set of criteria and, with it, **OpenRPA** is expected to be able to find an element, unambiguously.

Notice that the user is free to create a **Selectors** from scratch, although it is **NOT** recommended (it is not only it is harder but also prone to errors and typos).

.. figure:: images/chap_recorder/openrpa_recorder_what_is_selector.png
   :align: center

A thorough example showing how to automate using the **Recorder** is shown in the :ref:`Windows Automation` section.

**OpenRPA** allows for some configuration related to the **Recorder** to be customized, such as to highlight elements while the recording is happening or to change how the **Recorder** add activities to the Designer. See more at :ref:`Parameters`, specially ``recording_add_to_designer`` and ``record_overlay``.

.. 3.6.1.
Difference between technologies (NM, SAP, Windows, ...)
=======================================================
At first, when clicking any element during a recording, the **Recorder** will assume that the element clicked belongs to a Windows UI element. Then, it will process some logic and check if there are any better technologies that would fit into whatever action the user is attempting to record. If it finds one, the **Recorder** will automatically replace the technology from "Windows" to the most appropriate technology and will suggest an Activity that better handles the automation, be it clicking on a WebElement, filling an input field in SAP or writing data to an Excel sheet. If the logic to find a different technology fails, i.e., does not find anything more useful, the **Recorder** will build a **Selector** for a ``Windows UI Element``.

In simpler words, when using the **Recorder** and clicking an Excel cell, the **Recorder** will first assume that the element is a ``Windows UI element``, but then it will realize that it is an ``Excel element`` and then will automatically replace the Activity from ``Windows.GetElement`` to ``Office.Activities.WriteCell``, since that would be better fitting for the task.

There are many technologies already implemented, such as **SAP**, **IE**, **Java**, **Image** and **NM** (NativeMessaging: Chrome, Firefox, Edge) and many more to come!

.. 3.6.2.
Returning multiple elements
===========================
Sometimes it is needed to retrieve multiple elements instead of a single one and that can be achieved by adjusting the **Selector**. E.g.: After doing a search on Google, many results are presented and the user wants to manipulate all of them, not only the first one.

Here is a quick example of how it can be done. Still on the Google search example, using the **Recorder**, select an entry from any of the results.

.. figure:: images/chap_recorder/openrpa_recorder_click_element.png
   :align: center

Notice how the **Recorder** assumed that you only wanted that specific entry and how the **Selector** was built considering that.

.. figure:: images/chap_recorder/openrpa_recorder_change_selector.png
   :align: center

To make it return not only one but multiple elements, first change the ``MaxResults`` property to a number higher than 1 (there is not an upper limit).

.. figure:: images/chap_recorder/openrpa_recorder_add_max_results_and_click_open_selector.png
   :align: center

Now, the **Selector** criteria must be changed so it returns an array of elements and not a single one. When working with WebElements, that can be done by changing the ``xpath`` so that it returns broader results.

.. figure:: images/chap_recorder/openrpa_recorder_change_selector_2.png
   :align: center

Now, to make the Activity loop each element of this broader array of elements, include another ``GetElement`` Activity inside the sequence that was originally created by the **Recorder**.

.. note ::
   Use the GetElement Activity related to the technology that the Recorder is working with. If using Windows elements, it should be Windows.GetElement. Same applies to other technologies: OpenRPA.IE.GetElement, OpenRPA.Image.GetElement, OpenRPA.NM.GetElement etc.

.. figure:: images/chap_recorder/openrpa_recorder_add_get_element.png
   :align: center

By opening the **Selector** on the newly created ``GetElement``, on the left you will find an ``Element Tree`` which allows you to further select what should be manipulated. Use the ``Highlight`` button to debug and check if you are selecting the right element.

.. figure:: images/chap_recorder/openrpa_recorder_elements_highlighted.png
   :align: center

Now, if further automation is required for each specific entry, add those activities inside the inner ``GetElement``.

**************
 **Detectors**
**************
**Detector** is the main ``Event Listener`` inside OpenRPA - refer to `Event listener <https://www.computerhope.com/jargon/e/event-listener.htm>`_ (https://www.computerhope.com/jargon/e/event-listener.htm) if you don't know what that means. Simply put, it is an activity that waits for something to happen either before the Workflow continues processing and executing its functions.

To set a **Detector**, you must first define it inside the Detector's settings (``Settings inside the main Ribbon -> Detectors -> Add Detector``).

There are also different parameters which can be set for each type of detector which are going to be further discussed.

**Screenshots on How to set up Detectors**

After that, you go back to your sequence, define a **Detector activity** inside it and select the Detector you want to use as your ``Event Listener``. The ``Detector`` will automatically start the process for which it is defined, if it is inside a ``State Machine`` or continue it's process, if inside a ``Flowchart`` or ``Sequence``.

FileWatcher
===========
The ``FileWatcher`` detector checks for file changes inside a given path. 

You can set a ``Name`` for the detector.

``Path`` refers to the absolute path the folder in which the files are located.

``File filter`` is set to filter any files with a specific given filename.

KeyboardDetector
================
The ``KeyboardSequence`` detector listens for a specific - or sequence of - key strokes. 

You can set a ``Name`` for the detector.

``Process restriction`` refers to the process upon which this won't be listened to if their interface is the main screen.

``Keys`` are the keys which enable the Detector. To set them, use the button ``Set keys``.

****************************************
 **Running Workflows from Command Line**
****************************************
Coming soon - Work in progress

.. 3.9
************
 **Plugins**
************

.. 3.9.1
Chrome, Firefox
===============
Both Chrome and Firefox plugins are necessary to record activities in those browsers. Without them, the ``Recorder`` cannot recognize the Activities performed there.

Besides that, all functionalities of OpenRPA.NM toolbox depend on the installation of those plugins.

The installation is a quite intuitive process. On the upper ribbon of **OpenRPA** GUI, in the ``Settings`` tab, the user will find the icons of each browser. After clicking on it, the corresponding app store will open.

.. figure:: images/openrpa_chrome_firefox_plugins.png
   :align: center

If using Google Chrome, a new tab will open with the Chrome App Store page. The user will, then, click on "Use in Chrome". A pop-up message will be shown so that the user may confirm the installation.

If using Firefox, a new tab will open with the Firefox Add-ons page. The user will, then, click on "Add to Firefox". After this, a pop-up message will be shown so that the user may confirm the installation.

Plase keep in mind that these plugins only exist so that **OpenRPA** may access information in those web browsers. They are not responsible for capturing data themselves. Besides that, these plugins may be removed at any time without any loss to **OpenRPA** normal functioning.

.. note:: 

   These plugins must be installed directly from their respective app store. Installation CAN NOT be done offline by transfering the files manually.

.. 3.9.2
AVI Recorder
============
The AVI Recorder is used to record the execution of a workflow. This plugin is extremely useful when debugging a workflow that is occasionally failing and it is hard to closely watch the execution of what is happening.

In the **Settings** tab inside **OpenRPA** ribbon, click **Run Plugins**. Then select ``AviRecorder``, mark the ``Enabled`` checkbox and set the desired ``Saved folder`` path where the recordings will be saved.

.. figure:: images/chap_recorder/openrpa_recorder_avi_recorder_keep_succs_unset.png
   :align: center

   **OpenRPA AviRecorder.**

By default, **OpenRPA** will only keep recordings of workflow executions that failed - either naturally because the process itself failed or forced by another Activity. If it is desired to record all executions instead - successful and failed ones -, mark the ``Keep successful`` checkbox.

Additionally, the ``Codec`` and ``Recording quality`` can be adjusted to save harddrive space or to increase the recording quality.

.. figure:: images/chap_recorder/openrpa_recorder_avi_recorder_keep_succs_set.png
   :align: center

   **OpenRPA AviRecorder with Keep successful set.**

**********************
 **Workflow Examples**
**********************

.. 3.10.1
Web Automation
==============

In this example, the `RPA Input Forms Challenge <http://www.rpachallenge.com/>`_ (``http://www.rpachallenge.com/``) will be solved. 

As recommended, the Recorder will be used to facilitate the designing process.

The steps are listed below. 

1. Download the ``Excel file``.
2. Read the ``Excel file``.
3. Map Start button.
4. Loop the DataSet rows.
5. Find the respective handle for each WebElement input field.
6. Fill all the required fields inside the webpage.
7. Map Submit button.

**Download the Excel file**
---------------------------
To download the ``Excel file``, use the **DownloadFile** activity, found inside the ``OpenRPA.Utilities`` toolbox.

Drag the activity to the main sequence inside the Designer.

Click the ``...`` button to select the path of the file to which the archive will be saved or assign the ``LocalPath`` parameter inside the Properties tab of the activity.

Paste the URL from the archive which you want to fetch. It is useful to remember that, since the URL will be acquired by OpenRPA as a ``string``, it must be contained within ``"`` quotes.

.. figure:: images/openrpa_rpa_challenge_downloadfile.png
   :align: center

**Read the Excel file**
-----------------------
The ReadExcel activity will read from an ``Excel file`` and save it into a variable.

All the steps here are visibly explained at the **How to read from an ``Excel file``**.

**How to read from an Excel file**

Drag the **ReadExcel** activity, found inside the ``OpenRPA.Utilities`` toolbox, to the main sequence. 

Select the ``Excel file`` which will be read by clicking the ``...`` button and find the file path in explorer where the sheet you want to read is found.

Then, by clicking the ``...`` button, the user will be prompted by an explorer window and there select the ``Excel file`` that should be used.

The **ReadExcel** activity will read this ``Excel file`` and save it into a variable.

As this variable does not exist yet, it must first be created. Remember that variable must be obligatorily set with the type **System.Data.DataSet**. Simply click in the ``DataSet`` input field inside the **Properties tab**, type the name of the variable you want to use and press ``Ctrl+K``.

Now the user may either create the variable inside the **Variables, Arguments & Imports box** or follow the note below.

.. note:: 

   OpenRPA is able to automatically create a new variable with the correct type required for the Activity/property. To create a new variable in the **Properties box**, type the variable name and with the caret still inside the input field, press ``Ctrl+K``.

.. note::

   A ``DataSet object`` corresponds to the whole sheet. Each ``DataTable`` (e.g. ``Sheet1``) corresponds to each sheet inside that ``Excel file``. The ``DataSet`` class is the object temporarily in-memory cache - created to store all the data consumed from this ``Excel file``. For more on the ``DataSet`` class, refer to the link to Microsoft's Documentation on the `DataSet Class <https://docs.microsoft.com/en-us/dotnet/api/system.data.dataset?view=netcore-3.1>`_ (``https://docs.microsoft.com/en-us/dotnet/api/system.data.dataset?view=netcore-3.1``).

.. note::

   A ``DataTable object`` corresponds to one table of in-memory data contained in a ``DataSet object`` from the class equally named. When you read an ``Excel file``, it is automatically assigned to a ``DataSet`` class and all the ``Sheets`` are saved into ``DataTable`` classes - numbered from 0 to the quantity of sheets inside the ``Excel file``. Here it is reminded that ``DataTable`` objects are case sensitive.


**Map the Start button**
------------------------
The challenge starts by clicking the **Start button**. 

To map the process of starting the challenge, simply click the white triangle corresponding to the space below the **Read Excel** activity. Start the Recorder and click the **Start** button inside the browser, as shown in the steps below.  

In order to cease recording, simply press the ``ESC`` button.

It is reminded here that ending the recording is obligatory, else it will record all activities you execute endlessly.

.. figure:: images/openrpa_workflow_example_rpa_challenge_map_start_button.png
   :align: center

.. figure:: images/openrpa_workflow_example_rpa_challenge_map_start_button_click.png
   :align: center

After successfully mapping the **Start** button, your workflow should look like the last image on the next page.

.. figure:: images/openrpa_workflow_example_rpa_challenge_map_start_button_final.png
   :align: center


**Loop the DataSet rows**
-------------------------
Now it is time to populate the input forms inside the page with the data we've gathered from the ``Excel file``.

Drag the **Foreach DataRow** activity, found inside the ``OpenRPA`` toolbox. Then inside the **Foreach DataRow** activity, drag a **Sequence** activity, from the ``System.Activites`` toolbox.

As stated before, each sheet inside the ``DataSet`` assigned from the **Read Excel** activity is saved in-memory as a collection inside the ``Tables`` attributes.

Each sheet inside the ``Tables`` attribute is acquired accordingly to the sheets inside the ``Excel file``, these sheets are numbered starting from 0. As an example, if you were to add a row to a ``DataTable`` inside that ``Excel file``, you'd first assign it to a ``DataTable class`` object and use the activity to add that row to the table.

You can acquire each row by assigning a single variable to the one you want to capture, with numbers starting from 0, or you can use the **Foreach DataRow** to automatically loop through each row accordingly. In our case the ``DataSet`` is assigned to the ``ds`` variable, that is the one which will be used to retrieve the ``Table`` from. Since there is only one sheet, the ``ds.Tables(0)`` is used to assign the ``Table`` from where the **Foreach DataRow** will retrieve the values.

After assigning the ``DataTable`` where the rows are going to be retrieved from, it is noted here that the columns are mapped to attributes inside the variable assigned to the left-hand side of the **Foreach DataRow** activity - in our case ``row`` to return or set the value of a ``DataColumn``.

The **Foreach DataRow** loop basically iterates through every value in the row (``First Name``, ``Last Name``, ``Company Name``, ...) and assign it to the ``XPath`` selector item inside the webpage where each field belongs. This causes the value inside the `RPA Input Forms Challenge <http://www.rpachallenge.com/>`_ (``http://www.rpachallenge.com/``) page to be populated.

.. note::   
   
   A ``DataRow object`` refers to each row mapped from the ``DataTable``. By using the ``DataRow`` object and its properties and methods the user is able to retrieve and evaluate; insert, delete and update the values inside the ``DataTable``. The ``DataRowCollection`` also represents the actual ``DataRow`` objects inside the ``DataTable``. Each column mapped from it can be retrieved by using its index as an attribute of the ``DataRow`` class object, if you'd like to retrieve the 1st column inside the row, you'd use ``row(0)``. For more on the ``DataRow`` class, refer to the link to Microsoft's Documentation on the `DataRow Class <https://docs.microsoft.com/en-us/dotnet/api/system.data.datarow?view=netcore-3.1>`_ (``https://docs.microsoft.com/en-us/dotnet/api/system.data.datarow?view=netcore-3.1``).

.. list-table::
   
   * - .. figure:: images/openrpa_workflow_example_rpa_challenge_loop_through_each_assign_row.png

     - .. figure:: images/openrpa_workflow_example_rpa_challenge_excel.png


**Find the respective handle for each WebElement input field**
--------------------------------------------------------------
By using the Recorder and clicking on each input field found in the `RPA Input Forms Challenge <http://www.rpachallenge.com/>`_ (``http://www.rpachallenge.com/``) page, it is possible to easily find the best handles to each WebElement being clicked. 

As this workflow deals with WebElements manipulation, usually the best handles are Element.ID, Element.Name, Element.ClassName and so on. In our case, the ``ng-reflect-name`` attribute is used along with the ``XPath`` selector to provide a means of capturing a given element.

Once you start recording, click a single input field inside the `RPA Input Forms Challenge <http://www.rpachallenge.com/>`_ (``http://www.rpachallenge.com/``) page. As usual, we recommend capturing the first field - that is - ``First Name`` and then proceeding to the others.

.. figure:: images/openrpa_workflow_example_rpa_challenge_map_web_element.png
   :align: center

After clicking an input field, a prompt window will appear with the title ``InsertText``, simply press ``Enter``.

.. figure:: images/openrpa_workflow_example_rpa_challenge_map_web_element_capture_input_field.png
   :align: center

In order to cease recording of the current input field, simply press the ``ESC`` button.

It is reminded here that ending the recording is obligatory, or else it will record all activities you execute endlessly.

Then, a new ``OpenRPA.NM.GetElement`` activity will appear inside the **Foreach DataRow** sequence.

.. figure:: images/openrpa_workflow_example_rpa_challenge_map_web_element_sequence_after_capture.png
   :align: center

It is desirable that the user change the name of each activity to the corresponding input field. As shown in the image below.

.. figure:: images/openrpa_workflow_example_rpa_challenge_finished_2.png

.. note::
   To change the name, or  ``DisplayName`` - set inside the activity's parameters, the user can either click twice in the name of the activity, type the desired name and press ``RETURN`` or set the parameter ``DisplayName`` inside the **Properties box**.

.. It is advisable to check whether the Recorder generated the ``OpenRPA.NM.GetElement`` activity is capturing the correct input field from the ``XPath`` selector - ie. using the ``ng-reflect-name`` attribute. The steps below explain how to do such a thing.

.. First the label which the **XPath Selector** will use must be found, use the **Inspect Element** feature available among browsers. To do that, press ``F12``, click the ``Mouse`` button on the top-left part of the developer panel and select the element you want to capture - in our case ``First Name``.

.. .. figure:: images/openrpa_workflow_example_rpa_challenge_map_web_element_get_element_from_source_code.png
   :align: center

.. Click the **Open Selector** button to verify that the label selected by the **XPath Selector** matches the label of the ``ng-reflect-name`` attribute of the input field inside the `RPA Input Forms Challenge <http://www.rpachallenge.com/>`_ (``http://www.rpachallenge.com/``) page. in our case, the **XPath Selector** should be ``"xpath": "//input[@ng-reflect-name=\"labelFirstName\"]"``.

.. .. figure:: images/openrpa_workflow_example_rpa_challenge_map_web_element_sequence_open_selector.png
   :align: center

.. .. figure:: images/openrpa_workflow_example_rpa_challenge_map_web_element_select_xpath.png
   :align: center


.. note::
   When a WebElement is clicked using the Recorder and OpenRPA determines that the WebElement is capable of receiving input values. A prompt will appear automatically where the user can type string texts and the Recorder will generate the activities as if it were wanted to fill these WebElements with the respective string texts provided. For now, the user may ignore these and fill the prompt with any text, these assigned values will be replaced so they get their values from the DataTable ``ds``. The WebElements are automatically assigned to the ``item`` variable.


.. list-table::
   
   * - .. figure:: images/openrpa_workflow_example_rpa_challenge_assign_webelement.png

     - .. figure:: images/openrpa_workflow_example_rpa_challenge_highlight_webelement_handle.png

     - .. figure:: images/openrpa_workflow_example_rpa_challenge_recorder_insert_text.png
  

**Fill all the required fields inside the webpage.**
----------------------------------------------------
Now that the handles are mapped, assign the values of the rows and columns that were obtained in the Excel sheet.

The first input field is ``First Name``, and the assignment can be done by using the **Assign** activity found in the ``RPA.Utilies`` toolbox.

In the left hand side, use the ``item.Value`` to access the property of the ``WebElement`` and in the right hand side use the desired input value - in the specific case of the ``First Name`` column, ``row(0).ToString``.

``FirstName`` is located in the first column, hence ``index = 0``.

.. list-table::
   
   * - .. figure:: images/openrpa_workflow_example_rpa_assign_handle_activity.png

     - .. figure:: images/openrpa_workflow_example_rpa_assign_handle_value.png


.. note::

   The **Assign** activity is used to reference a value to a variable. To do that, enter in the left-hand side of the activity the name, or alias, of the variable which you want to map a value to. If desired, you can press ``Ctrl+K`` to automatically create the variable or create it manually. Use the right-hand side to enter the value which will be assigned to the variable.

.. note::
   
   The value of the respective column inside the row is a ``DataCell`` object. An object temporarily in-memory cache is created to store the column value inside the respective row. Furthermore, as the Excel value may be an object of non-string type, it's better to be safe and always cast it to a string. Since the need to cast - ie. change its type - to a ``String`` before assigning it to the ``item.Value``, given that the DOM object returned by the ``Selector`` is of type ``String`` as well. This is done by using the ``ToString`` method.

**Map Submit button**
---------------------
Each entry - corresponding to each row - must be entered after being filled by clicking the **Submit** button. 

To map the process of entering each input - ie. clicking the **Submit button** -, simply click the white triangle corresponding to the space below the last **Assign** activity, start the Recorder and click the **Submit** button inside the browser, as shown in the steps below.  

In order to cease recording, simply press the ``ESC`` button. 

It is reminded here that ending the recording is obligatory, or else it will record all activities you execute endlessly.

.. figure:: images/openrpa_workflow_example_rpa_challenge_map_submit_button.png
   :align: center

.. figure:: images/openrpa_workflow_example_rpa_challenge_map_submit_button_click.png
   :align: center

After successfully mapping the **Start** button, your workflow should look like the image below.

.. figure:: images/openrpa_workflow_example_rpa_challenge_map_submit_button_final.png
   :align: center


**Workflow Finished**
---------------------
The finished workflow should look like the sequence below.

.. list-table::
   
   * - .. figure:: images/openrpa_workflow_example_rpa_challenge_finished_1.png

     - .. figure:: images/openrpa_workflow_example_rpa_challenge_finished_2.png

     - .. figure:: images/openrpa_workflow_example_rpa_challenge_finished_3.png

     - .. figure:: images/openrpa_workflow_example_rpa_challenge_finished_4.png

     - .. figure:: images/openrpa_workflow_example_rpa_challenge_finished_5.png

     - .. figure:: images/openrpa_workflow_example_rpa_challenge_finished_6.png

**Finished RPA Challenge workflow.**

.. 3.10.2
Windows Automation
==================
In this example, **Skype** will be used to exemplify how easy it is to automate Windows applications.

Our goal is to ask the user for contact info and then the robot will proceed to Skype and send a ``.PDF file`` to the specified recipient.

Hence, the **OpenRPA** major features being exposed here are: Detector, Form, Selector and the Recorder. 

This example is divided into 3 steps:
The first step refers to ``Detector``, which will be used to check if a new file is created in a specific folder.
The second step refers to ``Form``, used to prompt the User about the recipient's contact info (``Email``, ``Name`` and ``Username``)
The final step is ``Windows Automation (Skype app)/Using Selector``, where the user will record the procedure of sending a message and a file to their Skype contact.

If your main interest lies in **Windows UI automation**, you may skip directly to the Windows Automation step.

#. Detector
    * Create Detector in OpenRPA
    * Configure Detector node in Node-RED
    * Message Manipulation in Node-RED
    * Passing a variable from Node-RED to OpenRPA
#. Form.
    * OpenRPA Forms   
#. Windows Automation (Skype app)/Using Selector
    * Record task
    * Configure Selectors

Detector
--------

Detectors are synonyms to event-listeners. Alas, they wait for some specific condition to happen and then fire a message to ``Node-RED`` or even to ``OpenRPA`` itself.

In this section, the user will learn how to create a ``FileWatcher Detector``, which will listen to file changes in a specific directory and will fire an event when a new file is created. For this example, the robot should be firing each time a new ``PDF/.pdf file`` is created.

**Create Detector in OpenRPA**

First, it is needed to configure the ``FileWatcher Detector``.

To do that, the user must first click the ``Settings`` bar inside OpenRPA's ribbon.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_click_settings.png
   :align: center
   :scale: 50%
   
Then, click the ``Detectors`` button inside the ribbon.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_click_detectors.png
   :align: center
   :scale: 50%
   
After that, all the user needs is to click the desired detector inside the Detectors ribbon.

For this example, the ``Detector`` which will be used is the ``FileWatcherDetectorPlugin``. Set the Detector's ``Name`` - in our case ``Windows Automation`` as well as the ``Path`` which it will listen to - ``C:\Users\viere\Documents\workflow_example_files\windows_automation\input_files``, **no quotes**.
Then set the ``File Filter`` to ``*.pdf`` - the ``*`` is a wildcard for the filename, that is, any filename will do.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_detector_configured.png
   :align: center
   :scale: 50%

.. note::
   If you can not find a ``Detector``, please make sure it has been installed. In case of doubts, simply run the installer ``.msi`` again and make sure to include it during the installation.

.. note::
   `Wildcards <https://ryanstutorials.net/linuxtutorial/wildcards.php>`_ (``https://ryanstutorials.net/linuxtutorial/wildcards.php``) is a set of building blocks that allow you to create a pattern defining a set of files or directories. As you would remember, whenever we refer to a file or directory on the command line, we are actually referring to a string path. Whenever we refer to a path we may also use wildcards in that path to turn it into a set of files or directories..

**Configure Detector node in Node-RED**

Now the user will configure, in Node-RED, a ``Detector`` node, which will be the starting point for ``NodeRED Messages`` when the ``Detector`` is triggered.

Create a new flow inside Node-RED. Our flow is being named ``Windows Automation - Workflow Example``.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_create_new_node_red_flow.png
   :align: center
   :scale: 50%
   
Now drag a ``detector`` node to the workspace.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_drag_detector_node.png
   :align: center
   :scale: 50%
   
Double-click the ``detector`` node to set its properties. Select the ``Detector`` in the dropdown field, which will appear - in our case, ``Windows Automation``. Additionally, you may also give a name to this node such as ``Filepath Detector``, we recommend doing so to keep flows organized.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_set_detector_node_properties.png
   :align: center
   :scale: 50%
   

**Message Manipulation in Node-RED**

When the ``FileWatcher Detector`` fires, some information will be passed in the ``NodeRED Message``, such as the ``filepath`` - that is, the name of the file that has been created.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_set_debug_detector.png
   :align: center
   :scale: 50%

It is desired to capture this data and then pass it back to the robot as ``arguments`` for when workflows are invoked.
Remember that ``arguments`` should be passed to the **Robot** through ``msg.payload`` object.
As our OpenRPA Workflow does not require any other ``argument``, we can plug in the ``FileWatcher Detector`` node directly to the ``robot`` node.

**Invoking OpenRPA Workflows**

Here lies the logic behind passing the variables to and executing the OpenRPA workflow, which will be invoked upon the ``Detector``'s positive signaling.

Drag a ``robot`` node to the workspace. This node enables us to invoke the ``Windows Automation`` workflow.


.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_connect_function_node_to_robot.png
   :align: center
   :scale: 50%

Once again, it is recommended to properly name the nodes, ``Invoke Windows Automation Workflow``.

Double-click and assign the ``Robot (or agent)`` who shall execute the workflow, and obviously, the name of the ``Workflow`` that should be executed (this example, ``Windows Automation``). You may leave the field ``Local Queue`` blank.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_set_robot_node_properties.png
   :align: center
   :scale: 50%
   
Now, the user must deploy the flow created by clicking the red Deploy button at the screen's top-left side.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_click_deploy_button.png
   :align: center
   :scale: 50%
   
After that, the user should define a new argument inside the OpenRPA workflow by clicking ``Create Argument``.
As you may have seen in the ``debug`` node, the parameter being passed is called ``filepath`` and, therefore, the ``argument`` should be the exact same. As the ``argument`` is an input, set its ``Direction`` to ``In``.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_define_pathFile_argument.png
   :align: center
   :scale: 50%
   

.. note::
   If the user wants to avoid using Node-RED completely, an infinite **While loop** activity (condition: true=true) with a **Try Block** is suggested along with the **Detector** activity containing the detector defined previously. The user may also use the **Assign** activity to assign a fixed ``filepath`` for the file which will be sent to the **Skype** contact. By using the loop, every time an iteration finishes, the robot is always back to the start waiting on the ``Detector`` to fire once more and, in case anything extraordinary happens, the **Try Block** assures that the **Workflow** will keep running.

Form
----
In this section, the user will learn how to create a ``Form`` to capture the ``Email``, ``Skype contact`` and ``Contact name`` which will be used to pass the attachment and template message using the **Skype** application.

**OpenRPA Forms**

Here the user creates a dynamic WPF Form to gather the values mentioned above from the client.

First, drag a ``Invoke Formula`` snippet to the main sequence.

Now click ``Open designer`` to open the ``Form Designer``.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_click_open_designer_button.png 
   :align: center
   :scale: 50%

Clear all example code and add the code snippet below to the designer code editor.

.. code-block:: html

   <form>
      <title>Skype Automation Form</title>
      <heading>Invoice Details</heading>
      <input type='string' name='email' 
            label='Email'
            tooltip='Enter the email address here.'
            icon='pencil'>
         <validate must='NotBeEmpty' message='Email is mandatory' />
      </input>
      <input type='string' name='usernameSkype'
            label='Skype contact' icon='pencil'
            tooltip='Enter the Skype contact to which the file will be sent here.'>
         <validate must='NotBeEmpty' message='Skype contact is mandatory' />
      </input>
      <input type='string' name='name'
            label='Contact name' icon='pencil'
            tooltip='Enter the contact name to which the file will be sent here.'>
         <validate must='NotBeEmpty' message='Contact name is mandatory' />
      </input>
      <action name='submit' content='START SKYPE AUTOMATION' icon='check' validates='true' ClosesDialog='true' />
   </form>

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_openrpa_forms_filled_designer.png
   :align: center
   :scale: 50%

If youโre used to HTML or any other markup language, you might understand whatโs happening behind the scenes here. If you donโt, do not worry and refer to the **OpenRPA Forms** section.

By pressing the **Build form** button, the user can build and see a preview of the WPF form in the leftโside panel of the ``Form Designer``.

After that, the user can press the **Create variables** button so all variables defined inside the ``Form Designer`` will be automatically created. Easy-peasy, isn't it?

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_openrpa_forms_create_variables.png
   :align: center
   :scale: 50%

.. note::
   If the user wants to avoid using ``OpenRPA Forms``, they can simply use the **Assign** activity to assign values to the variables ``email``, ``usernameSkype`` and ``name``, which will be used further to send the attachment and template message to the desired client.

.. note::
   The ``Form Designer`` is the place where the user can create his desired WPF forms to gather input from the client. On the right-side of it, a preview of the input form is shown. On the left-side of it, the user enters the code used to design the input form. After adding code to the ``Form Designer``, always press the **Build form** button to save changes and visualize the preview.

Windows Automation (Skype app) / Using Selectors
------------------------------------------------
Now comes the greatest part of our journey so far in this workflow example. The built-in Recorder will be used to record the task that an user would normally do to effectively achieve the task described in this section's introduction effectively.

**Record task**

Here the user will record the task usually done, namely search for a contact inside the **Skype** application, select - or click - that contact and send a message containing the attachment.

The first step is to open the **Skype** application.

Now, with the **Skype** application open, the user will start the Recorder inside OpenRPA by clicking in the button inside OpenRPA's ribbon and execute the task as if done manually.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_skype_app_click_recorder.png
   :align: center
   :scale: 50%

Now, with the Recorder started, the user must click the ``Search`` tab, containing the placeholder ``People, groups & messages``.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_skype_app_click_search_tab.png
   :align: center

An input field will appear inside the ``Search`` tab containing the placeholder ``Search Skype``. Click that input field, an ``InsertText`` input field will appear. The user should enter an existing contact which will be used as a dummy to assign the proper ``Selector`` further in this section. After waiting for **Skype**'s own autocomplete feature to find the user, the user shall click the desired contact.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_skype_app_search_tab_input_field.png
   :align: center

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_skype_app_search_tab_input_field_filled.png
   :align: center

After clicking the desired contact, the ``Messages`` tab will open open for that specific contact.

The user must now click the ``Add File`` button in the lower right section.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_skype_app_click_add_file_button.png
   :align: center

Now a file dialog appears, where the user can select the desired file, and an input dialog from OpenRPA titled ``InsertText`` where you can again insert dummy text. The ``Selector`` will act upon this dialog to choose the file which will be sent, as is seen in the next section. Then click the ``Open`` button.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_skype_app_select_file.png
   :align: center

Now click the input field containing the ``Type a message`` placeholder, another input dialog with the ``InsertText`` title will appear. You can again enter any dummy text.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_click_type_a_message.png
   :align: center

Then, the user shall click the blue **Send** button.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_click_send_button.png
   :align: center

Finally, click the **X** button inside the ``Search`` tab to close the search dialogue and exit the Recorder by pressing the ``ESC`` button.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_skype_app_close_search_tab.png
   :align: center

**Configure Selectors**

Now the ``Selector`` for the many **GetElement** activities that appeared inside OpenRPA's designer is configured.

First, configure the first ``Selector`` for the first element to be clicked inside the **Skype** application pane. That is the one with the ``People, groups & messages`` placeholder. In our case, we changed its ``DisplayName`` from ``Search for people, groups & messages`` to ``Search Contact GetElement``, to ease the viewing process by a 3rd-party which may be interested in the workflow.

Click the **Open Selector** button inside the **GetElement** activity that was generated for that specific field.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_skype_app_people_groups_messages_selector.png
   :align: center

In this image, the user notices a **Type Text** activity, which corresponds to the dummy username that was typed. The user can remove that activity from the workspace, since it'll be replaced with another activity in the following steps.

The user will notice that upon clicking the **Highlight** button inside the new window and with the **Skype** application window open, no elements inside the screen will be highlighted. Then, we must select the given element manually.

To do that, the user can first double-click the element ``Pane Skype`` ->  ``Document Skype XXXXXXXXXX`` -> ``Button Search for people, groups & messages`` and right-click this last element and click the **Select Element** button that appears. Below is a picture of this element highlighted.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_skype_app_people_groups_messages_selector_element_highlighted.png
   :align: center

Now, the user is going to change the ``filename`` attribute in the first selector, where there may be ``"%ProgramFiles%\\WindowsApps\\Microsoft.SkypeApp_15.61.100.0_x86__XXXXX\\Skype\\Skype.exe"``, the user wants to crop the version of skype and the hash which follows it - specified here as ``{XXXXX}``. To do that, simply change it to ``"%ProgramFiles%\\WindowsApps\\Microsoft.SkypeApp_*"``ยน. 

Now the user must also deselect the fourth selector. All the changes made so far are shown in the image below.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_skype_app_people_groups_messages_selector_finished.png
   :align: center

After that, simply click the **Ok** button on the lower-left side of the screen. It is recommended that the user check once more whether the proper ``Selector`` was configured by clicking the **Highlight** button inside the activity.

Now the user must do the same steps specified above inside the **GetElement** activity responsible for capturing the ``Search`` tab input. Select the element inside ``Pane Skype`` -> ``Document Skype XXXXXXXXX`` -> ``Edit Search Skype``. It is important to remark that the ``Search`` tab must be visible inside the **Skype** application before opening the selector so OpenRPA can recognize it as an element inside the window.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_skype_app_search_tab_selector_finished.png
   :align: center

The user must also change the right-hand value of the **Assign** activity, inside the current **GetElement** activity, to the variable which is going to hold the ``username`` of the desired contact. In our case, that variable is ``usernameSkype``, as previously defined in the **Forms** section. 

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_skype_app_search_tab_assign_properties_tab.png
   :align: center

Now the user will add a **Delay** activity to the workflow. Set the **Delay**'s ``Duration`` property to ``00:00:05``, which means this delay will last for 5 seconds. This is explicitly needed because of the autocomplete function built-in in the **Skype** application. It is a hard-coded constraint in which the robot must wait for the autocomplete function to complete before proceeding to the next steps. 

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_skype_app_delay.png
   :align: center

Then, the user must repeat the steps specified above inside the **GetElement** activity responsible for capturing the ``Contact`` button.  Select the element inside ``Pane Skype`` -> ``Document Skype XXXXXXXXX`` -> ``Group PEOPLE`` -> ``Button {Contact Name}, {Status}, {Chatted Last}, {Skype Name}`` - namely, in our case, ``Paulo Veras``, ``Away``, ``Chatted 23 minutes ago``, ``Skype Name``.  It is important to remark that the ``Contact`` button must be visible inside the **Skype** application before opening the selector so OpenRPA can recognize it as an element inside the window. Below is the ``Selector`` properly set up and an image of the button highlighted.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_desired_contact_selector_finished.png
   :align: center

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_desired_contact_selector_highlighted.png
   :align: center

Now add a **post wait** by using the ``Post Wait`` properties inside the **Click Element** activity which is contained inside the **GetElement** activity responsible for capturing the ``Contact`` button.  This value should be set to ``00:00:02``. The **post wait** is used so, after clicking the desired contact button which appears in the left pane of the **Skype** window, the application itself will wait for the ``Messages`` tab to load. Since we have added the **post wait**, the **Delay** activity is not needed.

The user must now repeat the steps specified for selecting the proper ``Selector`` for the remaining activities and assure that the elements inside the screen are highlighted when properly configured. Remember, you may have to open a window in the **Add file** button to select the elements correctly.

Now set the proper value for the ``filepath`` for the file which will be sent through the **Skype** app. Assign the appropriate value inside the respective **Assign** activity, which corresponds to the input field where the ``filepath`` is going to be set. If you haven't created the ``argument`` yet, now is the time to do it - remember it must have its ``Direction`` set as ``In``. Below it is shown how to set this argument properly.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_set_filepath_inside_getelement.png
   :align: center

Finally, check whether the configs are correct for the element inside the ``Selector`` corresponding to ``Pane Skype`` -> ``Document Skype XXXXXXXXX`` -> ``Edit Type a message`` and alter item.value to item.SendKeys inside the **Assign** activity included in the **GetElement** activity. 

If the user refrains from doing so, OpenRPA will attempt to directly set the value of Skype's edit field to the contents of the variable templateMessage. The problem is: Skype does not like that! The Skype app assumes that the user would type a letter at a time instead of changing the edit field value directly, otherwise the UI gets messed up with the placeholder "Type a message " ending on top of the actual text message.

The correct way to mimic a user typing a letter at a time is to use item.SendKeys method.

If the ``Detector`` is appropriately set, the user can now test the workflow example by inserting a ``.PDF`` file inside the directory previously defined. Else, they can follow the note below.

.. note::
   If the user hasn't set the ``filepath`` argument to be acquired from the ``FileWatcherDetectorPlugin``, as seen in the 1st step in this workflow example, they must set its value manually by using an **Assign** activity.

.. note::
   To change the name, or  ``DisplayName`` - inside the activity's parameters, the user can either click twice in the name of the activity, type the desired name and press ``RETURN`` or set the parameter ``DisplayName`` inside the **Properties box**.

.. note::
   ยน - `Wildcards <https://ryanstutorials.net/linuxtutorial/wildcards.php>`_ (``https://ryanstutorials.net/linuxtutorial/wildcards.php``) is a set of building blocks that allow you to create a pattern defining a set of files or directories. As you would remember, whenever we refer to a file or directory on the command line we are actually referring to a path. Whenever we refer to a path we may also use wildcards in that path to turn it into a set of files or directories..

Workflow Finished
-----------------
Here lie the images showing the output of the workflow both in the **Skype** application and in Node-RED.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_workflow_finished.png
   :align: center

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_workflow_finished_nodered.png
   :align: center

.. 3.10.3
Image Search / OCR
==================
In this example, the user can practice OCR on an image loaded from a file and then check the results against a validation standard.

To reduce the scope of the activity, this workflow example's only purpose is to check whether the detected document is a driver's license or not.

The validation procedure is as follows: if the text "DRIVER" is located within the image, OpenRPA will assume this document is indeed a driver's license.

.. note::
   As well known, OCR is **not** guaranteed to work 100% of the time, as text readability and image quality both play a crucial role in its success rate.

Load Image from File
--------------------
Drag the **Load From File** activity to the main sequence. 

Click the ``...`` button to select the image to be loaded.

Open the **Properties tab** and assign a variable to the ``Result`` parameter, which will carry the ``ImageElement`` created by the activity.

It is useful to remind the user that everything captured from an activity that returns any kind of ``Element`` is automatically mapped to the ``item`` Element.

.. note:: 

   OpenRPA is able to automatically create a new variable with the correct type required for the Activity/property. While creating a new variable in the **Properties box**, after typing the variable name and with the caret still inside the input field, by pressing ``Ctrl+K``.

.. figure:: images/openrpa_workflow_example_image_search_ocr_load_from_file.png
   :align: center

Get Text
--------
Drag **Get Text** activity to the sequence inside the **Load From File** activity.

.. figure:: images/openrpa_workflow_example_image_search_ocr_get_text.png
   :align: center

Evaluation
----------
Drag an **If** activity to the sequence inside the **Get Text** activity. Here the user will implement the whole validation logic.

Inside the ``Condition`` input field, insert ``item.Value.Contains("DRIVER")``. Here it is checked whether any of the text acquired using the **Get Text** activity - ie. inside ``item.Value`` - contains the word ``DRIVER``.

Drag an **Assign** activity to the ``Then`` sequence inside the **If** activity.  Assign the variable ``containsDriverLicense`` to ``True``. This means that if the workflow finds any instances of the values that contains ``DRIVER`` it will automatically change the value of the variable ``containsDriverLicense`` to ``True``. Else, it will keep executing, since there is nothing contained inside the ``Else`` sequence.

.. note::

   The **Assign** activity is used to reference a value to a variable. To do that, enter in the left-hand side of the activity the name, or alias, of the variable which you want to map a value to. If desired, you can press ``Ctrl+K`` to automatically create the variable or create it manually. Use the right-hand side to enter the value which will be assigned to the variable.

.. figure:: images/openrpa_workflow_example_image_search_ocr_if_clause.png
   :align: center

**Show Notification**
---------------------
Now drag a **Show Notification** activity to the end of the main sequence. This will be the way of showing to the user whether the validation has been successful or not.

Inside the ``Message`` input field, in the activityยดs dialogue or in the **Properties box**, insert the text ``"Is the document a Driver's License? " + containsDriverLicense.ToString``. 

Here we cast the value of ``containsDriverLicense``, which is a ``bool``, to a ``string`` so it can be printed in the **Show Notification** activity.

.. figure:: images/openrpa_workflow_example_image_search_ocr_show_notif.png
   :align: center

Workflow Finished
-----------------
Here's a preview of how the workflow will look like after running it - the Output window is obviously detached for exhibiting the data.

.. list-table::
   
   * - .. figure:: images/openrpa_workflow_example_image_search_ocr_finished_1.png

     - .. figure:: images/openrpa_workflow_example_image_search_ocr_finished_2.png

     - .. figure:: images/openrpa_workflow_example_image_search_ocr_finished_3.png

     - .. figure:: images/openrpa_workflow_example_image_search_ocr_finished_output.png

.. 3.10.4
Excel Read
==========
In this example, the user will read a couple of invoices contained in ``Excel files (.xlsx)``, capture the data inside them and generate a new ``Excel file`` with the merged data.

The invoices which will be used to demonstrate this example can be found here `Invoices <https://drive.google.com/file/d/1WkBjsWhA5Dm_fp5zg_kdlBh9oe2vKnTO/view?usp=sharing>`_ (``https://drive.google.com/file/d/1WkBjsWhA5Dm_fp5zg_kdlBh9oe2vKnTO/view?usp=sharing``).

.. @TODO@: Link to BPA's own repository or simply embed file inside Sphinx.

.. figure:: images/read_excel_images/openrpa_workflow_example_read_excel_invoice_example.png
   :align: center


Unpack the ``.rar`` file at the desired directory and save the folder path somewhere, it shall be used later on.

The following steps are followed to accomplish this workflow example.

#. Create an Empty DataTable.
#. For each Invoice.
    * Read Individual Cells
    * Read Table Cells ("items")
    * Add this iteration's invoice to DataTable
#. Write Excel from DataTable

**Create an Empty DataTable.**
------------------------------
All the Excel data that will be read from the invoices will be saved into a ``DataTable``.

Drag the **CreateDataTable** activity to the end of the main sequence.

In the first input field, assign the ``DataTable`` name as ``invoicesDataTable``.

.. note:: 
   OpenRPA can automatically create a new variable with the correct type required for the Activity/property. While creating a new variable in the **Properties box**, after typing the variable name and with the caret still inside the input field, press ``Ctrl+K``.

In our case, the fields which are going to be assigned to the second input field are headers. Therefore our second input field should contain ``{"Invoice Number", "Company Name", "Shipping Address", "Shipping Tel. Number", "Due Date", "Qty. of Items", "Due Balance"}`` as its content.

It is advisable to rename the ``DisplayName`` for each activity to something meaningful, and that helps you keep track of what each part of the workflow does! Considering that, rename this activity to "Create Empty DataTable".

.. figure:: images/read_excel_images/openrpa_workflow_example_read_excel_create_empty_data_table.png
   :align: center

.. note::
   In OpenRPA, a ``DataTable`` corresponds to a 2-dimensional non-serializable object used to hold values. Think of it as a matrix with ``i`` rows and ``j`` columns. The ``i`` rows are accessible by using the ``.Rows(n)`` attribute, where ``n`` is the number of the row - starting from 0 - which you want to access. The ``j`` columns are accessible by using the ``.Item(n)`` attribute, where ``n`` is the number of the column - starting from 0 - which you want to access. It is useful to remind here that the user must have accessed the ``Rows`` attribute, therefore, if the user wanted to access the 2nd column on the 3rd row of the data table they would use ``.Rows(2).Item(1)`` attribute.

.. note::
   In the .NET API, a ``DataTable object`` corresponds to one table of in-memory data contained in a ``DataSet object`` from the class equally named. When you read an ``Excel file``, it is automatically assigned to a ``DataSet`` class, and all the ``Sheets`` are saved into ``DataTable`` classes - numbered from 0 to the number of sheets inside the ``Excel file``. Here it is reminded that ``DataTable`` objects are case sensitive.

**For each Invoice**
--------------------
The first activity will loop a directory and will return all filenames contained in it.

First drag the **Assign** activity to assign the absolute path of the directory you want to loop through to a variable - ie. ``path``.

.. figure:: images/read_excel_images/openrpa_workflow_example_read_excel_assign_path.png
   :align: center

Drag the **ForEachWithBodyFactory<>** activity to the main sequence.

Set the proper ``TypeArgument`` parameter inside the **Properties box** to ``String``. This is done because the directory which will be iterated through contain filepaths, which are returned as values of ``String`` type.  

In the right-hand side of the activity change the ``item`` variable assigned to ``filePath``.

In the left-hand side of the activity, insert ``System.IO.Path.GetFiles(path)``.

The variable ``filePath`` now contains the ``String`` to each respective invoice full filepath.

.. figure:: images/read_excel_images/openrpa_workflow_example_read_excel_for_each_with_body_factory.png
   :align: center

**Read Individual Cells**

Here the robot will read individual cells of fields that contain only a single value - these fields are static (the number of rows is fixed - one).

As these steps are quite repetitive, we will be reproducing only the steps of the ``invoiceNumber`` variable. If you want to practice further, we strongly recommend doing the same to the other variables as well, namely ``companyName``, ``shippingAddress``, ``shippingTelephoneNumber`` and ``dueDate``.

Use the Recorder to select the cell or drag the **ReadCell** activity, found inside the ``OpenRPA.Utilities`` toolbox, to the sequence inside the **ForEachWithBodyFactory<>** activity.

If the Recorder wasn't used, the user must follow a few more steps in order to use this activity. First, assign the ``Filename`` parameter inside the **Properties box** to the ``filePath`` variable to select the ``Excel file`` which will be read. Enter the cell, which will be captured into the ``Cell`` parameter. In our case, it is ``"H3"``, which corresponds to the invoice number.

The **ReadCell activity** will read from an ``Excel file`` and save the cell into a ``String`` variable by default. The user can change the type of the data captured by changing the ``ArgumentType`` parameter inside the **Properties tab**.

Since this variable does not exist yet, we must first create it. A reminder that the variable must be obligatorily set with the type **System.Data.String**. 

Simply click in the ``Result`` input field inside the **Properties tab** and type the name of the variable you want to use. In this case, it is ``invoiceNumber``.

Now repeat the procedure above for the remaining variables.

 .. figure:: images/read_excel_images/openrpa_workflow_example_read_excel_read_individual_cell.png
    :align: center

Remember that it is needed to change the variables ``Scope`` to the outermost sequence to be able to capture all the values gathered in here and save them into a ``DataTable`` later on.

 .. figure:: images/read_excel_images/openrpa_workflow_example_read_excel_change_scope.png
    :align: center

.. note:: 
   While creating a new variable in the **Properties box**, after typing the variable name and with the caret still inside the input field, by pressing ``'K`` OpenRPA will automatically create this new variable with the correct type required for the activity.

**Read Table Cells ("items")**

Here the robot will read a 'table' inside the invoice, and differently to reading individual cells, tables are usually dynamic (the number of rows may vary) or. This is done in a programmatic manner that allows the developer to read a specific range of cells, which would be simply too huge as to permit him to add the **ReadCell** activity for each variable manually.

This 'table' will be stored in a new ``DataTable`` called 'itemsDataTable' and some logic will be applied as well, such as removing empty columns, summing and counting values.

Drag a **Sequence** activity and name it ``Items Processing Logic``.

Inside this sequence, drag a **CreateDataTable** activity and create a table named ``itemsDataTable``. 

The headers for this ``DataTable`` shall be ``{"itemName", "quantity", "rate", "subTotal"}``.

.. figure:: images/read_excel_images/openrpa_workflow_example_read_excel_read_items_processing_logic_create_data_table.png
   :align: center

For the assignments, we will be using columns 0, 3, 5, 7, if you take a look at the invoice template, these are the indexes for the columns that contain data.

By using the ``Read Range`` activity, we will get the table contents into a ``DataTable``. 

First, enter the filepath of the file from which the activity will read from inside the ``Filename`` input field.

Enter the cells you want to capture in the ``Cells`` field inside the **Properties box**. In our case, those are ``"A14:H18"``. 
 
 .. figure:: images/read_excel_images/openrpa_workflow_example_read_excel_range_cells.png
    :align: center

The indexes ``0``, ``3``, ``5``, and ``7`` refer to the indexed objects inside the current ``row``, ie. the columns.

Enter the name for the ``DataTable`` you want to save it to inside the ``DataTable`` field inside the **Properties box**. In our case, this ``DataTable`` is ``items``.

In the **Properties box**, you may find the property ``IgnoreEmptyRows``, set this value to ``True``. Since our table does not contain a header, set the ``Use Header Row`` property to ``False`` - this will ensure the activity reads the first row of the data (row 14).

.. figure:: images/read_excel_images/openrpa_workflow_example_read_excel_items_processing_read_range.png
   :align: center

And by looping the ``DataTable`` with a **ForEach DataRow** activity, the **Add DataRow** activity is used to loop through each item information to our 'itemsDataTable'

.. figure:: images/read_excel_images/openrpa_workflow_example_read_excel_items_processing_for_each_and_add_data_row.png
   :align: center

Now comes the logic for calculating the subtotal value and adding this value to the total value which will be described in the final ``Excel sheet``.

Declare a new variable ``quantity`` with type ``System.Decimal``. Using the **Assign** activity, assign its value to ``quantity + Convert.ToDecimal(row(3).ToString)`` - this will cause the variable to increment its value for each item iteration.

Declare a new variable ``currentQuantity`` with type ``System.Decimal``. Using the **Assign** activity, assign its value to ``Convert.ToDecimal(row(3).ToString)``

Do the step above for the variable ``currentRate`` as well, using ``row(5)`` as its base-value.

Declare a new variable ``subTotal`` with type ``System.Decimal``. Using the **Assign** activity, assign its value to ``currentQuantity*currentRate``.

Finally, declare a new variable ``dueBalance`` with type ``System.Decimal``. Using the **Assign** activity, assign its value to ``dueBalance + currentQuantity*currentRate``.

It is useful to remark that the user must change the variables ``Scope`` to the outermost sequence to be able to capture all the values gathered in here and save them into a ``DataTable`` later on.

 .. figure:: images/read_excel_images/openrpa_workflow_example_read_excel_items_logic_assign_variables.png
    :align: center

.. note::
   In the **Read Range** activity, the ``:`` colon symbol is used to delimit the area you want to capture, the cell to the left-hand side of it is the starting cell, and the cell to the right-hand side of it is the ending cell.

**Add this iteration's invoice to DataTable**
---------------------------------------------
Now that we've gathered all the important data from this iteration's invoice, we want to add this info to the ``DataTable`` we created on step 1.

Drag the **AddDataRow** activity to the end of the sequence inside the **ForEachWithBodyFactory<>** activity.

In the first input field, insert ``invoicesDataTable``.

In the second input field, insert ``{invoiceNumber, companyName, shippingAddress, shippingTelephoneNumber, dueDate, quantity, total}``.

 .. figure:: images/read_excel_images/openrpa_workflow_example_read_excel_add_invoices_data_table.png
    :align: center

**Write Excel from DataTable**
------------------------------
This is the last part of the workflow. Here the user will finally write the ``Excel file`` containing all the data gathered.

Drag a **WriteExcel** activity into the end of the main sequence.

Click the ``...`` button to select the filename to which the ``Excel file`` will be saved to. Enter the filename inside the ``File name`` input field on the explorer window, which will appear. Then press ``Save`` to finally assign it.

Assign the ``DataTable`` from which the data gathered will be saved into the ``Excel file`` by entering its name inside the ``DataTable`` property inside the **Properties box**.

Enter the theme which will be used to stylize the ``Excel file`` in the ``Theme`` property inside the **Properties box**.

 .. figure:: images/read_excel_images/openrpa_workflow_example_read_excel_write_excel.png
    :align: center

**Workflow Finished**
---------------------
Here's a preview of how the workflow will look like after completing it.

.. figure:: images/read_excel_images/openrpa_workflow_example_read_excel_workflow_finished_1.png
   :align: center

.. figure:: images/read_excel_images/openrpa_workflow_example_read_excel_workflow_finished_2.png
   :align: center
   
.. 3.10.5
MongoDB Entities Manipulation
===========================
Coming soon - Work in progress

.. 3.10.6
File Manipulation
=================
In this example, users will find how to manipulate files in **OpenRPA**. All basic procedures will be covered, such as saving, moving and deleting files, as well as some basic diretory manipulation.

Let's assume there is a directory with files of different types. The first task is to separate these files according to their extension into different subdirectories. Files that are not .txt will be deleted.

After that, the robot will access the .txt files and search for a given keyword. The ideia here is to simulate an automation of product's description classification. If the file does have the keyword, it will be moved to a specific subdirectory.

After each action, the robot will write a new line to a log Excel sheet, with information such as the name of the file, its creation date, besides the product's information present in the files (type, price and discount).

The steps are the following:

#. Create new directories

#. Create a DataTable

#. Iterate over Files in Directory

#. Get File Name

#. Separate Files according to Extension

#. Read File

#. Get File Creation Date

#. Check File's Content (Matches) and Extract Information

#. Move File

#. Rename File

#. Add Information to DataTable

#. Delete File

#. Save DataTable to Excel File

Creating new directories
------------------------
The first step is indicating the directory the files are in (a.k.a. root directory). To do this, the user will start a new Sequence and drag an ``Assign`` Activity into it. In the "To" field, the user will indicate an already existing argument. This arguments's type must be "String", since the path to the directory will be assigned to this argument as text (that is, it will be between quotation marks).

The next step is creating the subdirectories where the files will be moved to. Three directories will be created in this example: one for files that contain product information ("Product Info"), another one for files that do not have products information ("Other txt files") and a third one for the log file ("Logs"). The procedure of creating will be same the same for all, the only difference being the name of each.

To create a new directory, the user will drag an ``Assign`` Activity into the Sequence. In the first field, the user will indicate another argument. The type of this argument will be found in the "Browse for Types..." option. The user may browse it or simply type "System.IO.DirectoryInfo". It means that this argument will not store a string or integer; it will receive an expression that will create the new directory. Please note that the name of the argument will not be the name of the directory, it is only for use of the robot. 

.. figure:: images/openrpa_manipulatingfiles_createdirectories.png
   :align: center

In the second field (i.e., "Enter a VB expression"), the user will type "System.IO.Directory.CreateDirectory(path of the new directory)". Inside the parentheses, the user will type the path of the root directory plus the name of the new directory, as if it already existed. Again, the path must be between quotation marks. For example:

If the root directory is "C:\example", the user should type "C:\example\subdirectoryName" in order to create the subdirectory.

Creating DataTable
------------------
One more step is necessary before moving on to the files. Since a Log Excel file will be saved after the execution of the ``Workflow``, a Datatable must be created in order to store the data during the process. It will be created at point of the ``Workflow`` in order to store the values globally.

This topic is already covered in other example of this documentation. Please follow :ref:`Create an Empty DataTable` and keep in mind that the names of the Variables will not be same.

Iterating over Files in Directory
---------------------------------
Since the task is classifing each file in the root directory, it is necessary to iterate over them. 

The user will drag a ``ForEachWithBodyFactor<>`` Activity into the main Sequence, below the creation of the DataTable. In the first field, the user will find the word "item", that represent each of the files in the directory. This name can be changed - any name will work. 

The most important is the second field ("in"). Here the user will type the expression ``System.IO.Directory.GetFiles(path)``, where "path" is the Argument already set with the path of the root directory at the beginning of the main Sequence ("path"). This expression will return a list of the full paths of the files in that directory. So the ``ForEach`` Activity will iterate over this list.

.. figure:: images/openrpa_manipulatingfiles_iteratedirectory.png
   :align: center

The third field is the Body, where Activities will be done with each file of the list. The following Activities will be performed inside this Body.

Get File Name
-------------
The first Activity inside the Body will be getting the file's name. Please note that the ``System.IO.Directory.GetFiles()`` expression returns a list of full paths. In order to proceed with later Activities, the user must get the file name only.

The most simple way to achieve that is by using a VB expression. The user will drag a ``Assign`` Activity into the Body. In this example, the name of the Variable will be "file_name". The expression is ``System.IO.Path.GetFileName()`` and the full path of the file must inserted inside the parentheses, i.e., the Variable "item".

.. note::
   Here the user must use a Variable, not an Argument, since this value will change according to the file of the iteration. Please note that the scope of this Variable must be the Sequence inside the Body of the ``ForEachWithBodyFactor<>`` (here named "Iterate over files"). The type of this Variable will be "string".

.. figure:: images/openrpa_manipulatingfiles_getfilename.png
   :align: center

Separate files according to Extension
-------------------------------------
After that, the user will drag an ``If`` Activity, right after the last step. The ideia here is to separate files according to their extension. In this example, only .txt files will be read, so any other extension will not be considered.

Inside the ""Condition" field, the user will type ``System.IO.Path.GetExtension(file_name OR full path) = ".txt"``. 

.. note::
   This is not the only way to get the extension of a file. The user could also use the VB expression "file_name.EndsWith(".txt")". Note that this expression looks for strings inside strings, so it must be between quotation marks.

That is, IF the extension of the file is ".txt", THEN the robot will proceed to the "Then" field; otherwise, the robot will proceed to the "Else" field.

Read File
---------
Here the Sequence is split in two. Let's first consider what will happen to the text files.

The first Activity performed with the text file will be reading its content. Again, the user will drag an ``Assign`` Activity into the "Then" field and use a Variable. In this example, the Variable's name is "content" and its type is "string".

The expression used to read the file is ``System.IO.File.ReadAllText(file_name)``. The content will be stored in the Variable assigned.

.. figure:: images/openrpa_manipulatingfiles_readfile.png
   :align: center

.. note::
   The ones that are not .txt are to be deleted in this example. It will be explained further in this tutorial.

Get File Creation Date
----------------------
The next step is getting the file's creation date. The procedure is much alike the previous one (Read File). That is, the user will use the ``Assign`` Activity in order to store the content of the VB expression.

In this case, the expression will be ``System.IO.File.GetCreationTime(file_name).ToShortTimeString``.

.. figure:: images/openrpa_manipulatingfiles_getcreationdate.png
   :align: center

.. note::
   There are other possibilities here. The user may get the Hour, Day, Month or even other information about the creation of the file. In order to this, the user must change the last part of the expression to the type of information required (e.g., ``System.IO.File.GetCreationTime(file_name).Month``).

Check File's Content (Matches) and Extract Information
------------------------------------------------------
In this example, before moving the file, some actions were added in order to extract information from the text file to add to the log file. The ``Matches`` Activitity was employed and users must pay attention to three of its properties: "Input", "Pattern" and "Results". 

The first one, "Input", is the string or Variable storing a string where the "Pattern" will be searched.

"Pattern" is the RegEx expression that will searched in the "Input" (please note that it must be between quotation marks).

Finally, "Results" is the Variable or Argument where the results are going to be stored (in this case, it must be a Variable). 

Users must be aware that the type of this Variable must be ``System.Text.RegularExpressions.Match``. It will be a list of the results. In this example, there is going to be only one result per match. In order to get this result, users must use the following syntax: variablename.First.ToString, that is, the first item of the list will be converted to string.

Move files
----------
Once those steps are completed, the robot will classify the files according to their content. In this example, the criterion is the presence of product information.

The user will drag another ``If`` Activity into this Sequence (the Body of the previous ``If`` statement). The Variable "content", that stores the content of the file, will be used here. The method is ``.Contains("string")`` and the syntax is the following: ``content.Contains("product")``.

.. note::
   Note that the searched term must be between quotation marks, since it is a string.

If the file has such term, the robot will proceed to the "Then" field; otherwise, it will proceed to the "Else". In other words, this Activity is separating the files into two categories. This is a simple example, but more complex terms may be searched.

Considering the first possibility (that the file has product information), the robot will move it to the "Product Info" directory. In order to this, it is necessary to drag another Activity into the Sequence, a ``Invoke Code``. Moving files through ``Assign`` is not possible, since this action does not generate any value to be stored in an Argument or Variable.

.. figure:: images/openrpa_manipulatingfiles_movefile.png
   :align: center

The user will, then, click on "Open editor" to edit the code to be invoked. The user is free to choose whatever programming language of their preference. In this example, VB is used. The syntax of the expression is the following: ``System.IO.File.Move(full path of origin, full path of destination)``. It is important to remark that the full path is required, i.e., including the name of the file.

The full path of the origin than be accessed through the Variable that stores the full path of the file (in this example, the "item" of the iteration). Another way to do that is by using the Argument that stores the path of the root directory (in this example, named "path") and concatenate it with another string that contains the subdirectory plus the name of the file. 

.. note::
   The way to concatenate two or more strings is by using "&".

Rename files
------------
In order to rename the files when moving them, the only thing users have to do is assiging a new name to the destination full path.

In this example, files were renamed by adding a new word to the beginning of their names, but any name could be set. When writing the expression to move the file, users must make sure the new name is written in the expression and concatenated to the path of the directory.

Add Information to DataTable
----------------------------
The next step is adding the information gathered about the file to the DataTable created in the beginning of the ``Workflow``. User will drag a ``AddDataRow`` to the end of each sub workflow (i.e., to the text files that have product information, to the text files that do not have product information and also to the other files) in order to keep a record of each file processed.

The name of the DataTable must the one created previously so as to reference the new row to the correct DataTable. In the RowData, users will add the Variables' name they want to add, following the syntax of a dictionary, that is, {variable, variable, variable}.

Further details can be found at :ref:`Add this iterationโs invoice to DataTable`. Please note taht this is another examples, so the names of the Variables must be changed according to this present example.

Delete files
------------
Since only text files are being considered in this example, other files will be deleted. Here is not possible to use Variables nor Arguments, once this action does not generate any value to be stored in a Variable. So, users must use ``Invoke Code`` Activity once again.

In this example, only the files that are not .txt will be deleted. That is, this Activity will be dropped to the ELSE field of the file's extension filter.

The shortest way to delete a file is by adding the following line of code to the editor: ``System.IO.File.Delete(file_name)``.

.. figure:: images/openrpa_manipulatingfiles_deletefile.png
   :align: center

Save DataTable to Excel file
----------------------------
After all iterations run, the DataTable must be saved into an Excel file. 

Please refer to :ref:`Write Excel from DataTable`.

.. 3.10.7
SOAP Service
============
Coming soon - Work in progress

.. 3.10.8
REST Service (integration with Node-RED)
=======================================
In this example, the user will create a workflow that connects to the `Chuck Norris Jokes API <https://api.chucknorris.io/>`_ (``https://api.chucknorris.io/``) and captures a joke.

The user will also create a dialog box using `Forge.Forms dynamic WPF forms <https://github.com/WPF-Forge/Forge.Forms>`_ (``https://github.com/WPF-Forge/Forge.Forms``) where a category for the joke can be selected.

A simple validation method is also used to check whether the message is a Chuck Norris joke or not.

The steps are listed below. 

#. Configure Variable Passing To/From in Node-RED
#. Message Manipulation in NodeโRED
#. OpenRPA Forms
#. Invoke Workflow through openrpa
#. Create Joke Failed Workflow
#. Evaluate Chuck Norris Joke
#. Invoke Joke Failed Workflow
#. Setting Evaluation Failure case in Node-RED
#. Output logic
#. Workflow Finished

Configure Variable Passing To/From in Node-RED
----------------------------------------------
Here lies the logic behind receiving data from the robot, querying the Chuck Norris API, then returning the values back to the robot.

**Workflow Logic**

Drag a ``Workflow In`` node to the workspace.

.. figure:: images/openrpa_workflow_example_rest_workflow_in_drag.png
   :align: center
   :scale: 50  %

.. figure:: images/openrpa_workflow_example_rest_workflow_in_workspace.png
   :align: center
   :scale: 50  %

Set the ``Queue name`` to define the queue that the OpenFlow workflow will be assigned to in ``Workflow In``'s properties. The queue name is completely arbitrary, the user can choose for any name they wish to. In our case, it is set as ``chuckapi``.

.. note::
   To access any node's properties inside the Node-RED workspace, simply double click the given node. The **Properties box** for the node, containing each input field required by itself, will then appear.

Check the ``RPA`` checkbox to allow this flow's workflow to be invoked from OpenRPA agents.

Set the name for the workflow in the ``Name`` input field. In our case, it is set as ``ChuckAPI``.

.. figure:: images/openrpa_workflow_example_rest_workflow_in_double_click.png
   :align: center
   :scale: 50  %

.. figure:: images/openrpa_workflow_example_rest_workflow_in_set_properties.png
   :align: center
   :scale: 50  %

Drag a ``HTTP Request`` node to the workspace.

.. figure:: images/openrpa_workflow_example_rest_http_request_drag.png
   :align: center
   :scale: 50  %

Connect the ``Workflow In`` node to the ``HTTP Request`` node.

.. figure:: images/openrpa_workflow_example_rest_http_request_nodes_connect.png
   :align: center
   :scale: 50  %

.. figure:: images/openrpa_workflow_example_rest_http_request_nodes_connected.png
   :align: center
   :scale: 50  %

.. note::
   To easily connect a node, simply press the ``Ctrl`` key while clicking in the grey rectangles = called ports - in each node's the outer part. The user can also click and hold to connect the nodes, but the author finds it more feasible simply using the ``Ctrl`` key.

Set the ``Method`` for the request as ``GET``.

Set the desired ``URL`` for the API, which the request will be sent to. In our case, ``https://api.chucknorris.io/jokes/random?category={{category}}``. 

The variable inside the `Mustache <https://mustache.github.io/mustache.5.html>`_ (https://mustache.github.io/mustache.5.html), ie. ``category`` is arbitrarily named as well.

This variable will be used by OpenRPA to pass the value of choice captured from the user. The user may name it as per his own option.

Set the desired ``Return`` type, which will be returned. In our case, it's ``parsed JSON object``.

.. figure:: images/openrpa_workflow_example_rest_http_request_set_properties.png
   :align: center
   :scale: 50  %

Drag a ``Workflow Out`` node to the workspace.

.. figure:: images/openrpa_workflow_example_rest_workflow_out_drag.png
   :align: center
   :scale: 50  %

Connect the ``HTTP Request`` node to the ``Workflow Out`` node.

.. figure:: images/openrpa_workflow_example_rest_workflow_out_nodes_connect.png 
   :align: center
   :scale: 50 %

.. figure:: images/openrpa_workflow_example_rest_workflow_out_nodes_connected.png
   :align: center
   :scale: 50 %

.. note::
   To easily connect a node simply press the ``Ctrl`` key while clicking in the grey rectangles - called ports - in each node's the outer part. The user can also click and hold to connect the nodes but the author finds it more feasible simply using the ``Ctrl`` key.

Deploy your flow by clicking the red Deploy button at the top-left side of the screen.

.. figure:: images/openrpa_workflow_example_rest_chuck_api_deploy.png 
   :align: center
   :scale: 50 %

Message Manipulation in Node-RED
---------------------------------
Now we want to send a parameter from OpenRPA to Node-RED so that our workflow is not so static.

This parameter contains a ``category`` to which the ``Chuck Norris API``'s joke will relate.

Changing parameters from a variable gathered through a workflow inside Node-RED is easily done through the ``Function`` node and its properties.

Robots ``In/Out`` arguments always are passed to the ``msg.payload`` attribute (in Node-RED) and it is easy to manipulate these by using the ``Function`` node.

.. figure:: images/openrpa_workflow_example_rest_function_node.png 
   :align: center

Simply drag a ``Function`` node to the workflow, between the **ChuckAPI** ``Workflow In`` node and ``HTTP Request`` node.

.. note::
   To automatically add a node and bind it to the sequence, drag it while pressing the ``Shift`` key. This way, the node is automatically entered in-between the sequence already established before it was dragged.

.. figure:: images/openrpa_workflow_example_rest_parameter_passing_function_drag.png 
   :align: center
   :scale: 50%

.. figure:: images/openrpa_workflow_example_rest_parameter_passing_function_workspace.png 
   :align: center
   :scale: 50%
   
In our example, the parameters needed are ``msg.category`` - which will be gathered as ``msg.payload.category`` from the ``category`` argument passed by the OpenRPA workflow.

.. figure:: images/openrpa_workflow_example_rest_parameter_passing_function_double_click.png 
   :align: center
   :scale: 50%

In the ``Function`` node's properties, set ``msg.category = msg.payload.category``. 

This is used so we can set the ``category`` parameter to the ``HTTP Request`` node, captured from the OpenRPA workflow, which the user will build next.

.. figure:: images/openrpa_workflow_example_rest_parameter_passing_function_set_properties.png 
   :align: center
   :scale: 50%

.. note::
   In this example, the user could use the ``Change`` node to set the ``msg.category`` attribute to ``msg.payload.category`` as well, or simply pass ``msg.payload.category`` directly to the HTTP Request, which will be discussed further on.
 
OpenRPA Forms
-------------
Now the user creates a dynamic WPF form to gather the ``category`` value from the client.

First, drag a ``Invoke Formula`` snippet to the main sequence.
 
Now click ``Open designer`` to open the ``Form Designer``.

.. figure:: images/openrpa_workflow_example_rest_openrpa_forms_click_open_designer_button.png 
   :align: center
   :scale: 50%

.. note::
   The ``Form Designer`` is the place where the user can create his desired WPF forms to gather input from the client. On the right-side of it, a preview of the input form is shown. On the left-side of it, the user enters the code used to design the input form. After adding code to the ``Form Designer``, always press the **Build form** button to save changes and visualize the preview.

Clear all example code and add the code snippet below to the designer code editor. Then press the **Build form** button to update the form.

.. figure:: images/openrpa_workflow_example_rest_openrpa_forms_empty_designer.png 
   :align: center
   :scale: 50%

.. code-block:: html

   <form-designer>
    <title>Choose Chuck Norris API Category</title>
    <heading>
   Please enter the desired category number inside the input field. The returned joke will be related to the selected category.
   </heading>
   <select name="category" label="Choose the desired category">
      <option name="animal" />
      <option name="career" />
      <option name="celebrity" />
      <option name="dev" />
      <option name="explicit" />
      <option name="fashion" />
      <option name="food" />
      <option name="history" />
      <option name="money" />
      <option name="movie" />
      <option name="music" />
      <option name="political" />
      <option name="region" />
      <option name="science" />
      <option name="sport" />
      <option name="travel" />
   </select> 
   <action name="submit" content='SUBMIT' icon='check' validates='true' ClosesDialog='true' ></action>
   </form-designer>

.. figure:: images/openrpa_workflow_example_rest_openrpa_forms_filled_designer.png 
   :align: center
   :scale: 50%

.. note::
   After adding the code snippet, all the variables used in the WPF form can be automatically created by pressing the **Create variables** button. 

In our case, the workflow is unable to use a ``Variable``. Since the value will be consumed by Node-RED, it must obligatorily be set as an ``Argument`` with **Direction** set as ``In/Out`` or ``Out`` and type ``String``.

.. figure:: images/openrpa_workflow_example_rest_openrpa_forms_arguments_box.png 
   :align: center
   :scale: 50%

Now, to guarantee that the value gathered from the WPF form has the correct type, the user will cast it to a ``String`` using the **Assign** activity.

Invoke Workflow through OpenRPA
--------------------------------
Now its time to finally invoke the workflow through OpenRPA and devise the processing logic.

Since the flow is already deployed, it is needed that the user synchronizes the workflows with the OpenFlow repository.

To do the task as mentioned before, click the **Reload** button inside OpenRPA's ribbon. This will refresh all workflows contained inside the OpenFlow repository to OpenRPA.

.. figure:: images/openrpa_workflow_example_rest_invoke_openflow_click_reload_button.png 
   :align: center
   :scale: 50%

Drag an **Invoke OpenFlow** activity to the main sequence inside OpenRPA's Designer.


Select the **RPA Workflow**, which you want to invoke. In our case ``ChuckAPI``.

.. figure:: images/openrpa_workflow_example_rest_invoke_openflow_drag_activity.png 
   :align: center
   :scale: 50%

.. figure:: images/openrpa_workflow_example_rest_invoke_openflow_chuck_api_selected.png 
   :align: center
   :scale: 50%

.. note::
   Note: When Node-RED finishes executing the flow, whatever is set in the msg.payload will return back to the robot. Variables are automatically mapped between the two applications: if msg.payload.person exists in NodeRED, whatever returns in there will automatically go in the variable named "person" inside OpenRPA. 

Create Joke Failed Workflow
---------------------------
Now that the ChuckAPI process is set, the user can proceed to set a workflow which will be executed in case any failures occur upon execution of the usual process.

Create a new workflow; in our case the name ``REST Workflow Example - Joke Failed`` is used to specify the workflow.

.. figure:: images/openrpa_workflow_example_rest_create_joke_failed_empty_workflow.png 
   :align: center
   :scale: 50%

Drag a **WriteLine** activity to the main sequence.

.. figure:: images/openrpa_workflow_example_rest_create_joke_failed_drag_write_line.png 
   :align: center
   :scale: 50%

Now it is needed to create the default variable - inside the **Variables, Arguments & Imports box** - from which the entry containing the ``Chuck Norris API`` joke content is returned. This variable alias is ``value``, as shown in `Chuck Norris API Random Joke <https://api.chucknorris.io/jokes/random>`_ (``https://api.chucknorris.io/jokes/random``).


Set the output value, in the ``Text`` input field or through the **Properties box** to a new variable of alias ``value``.

.. figure:: images/openrpa_workflow_example_rest_create_joke_failed_set_text_value.png 
   :align: center
   :scale: 50%

.. note::
   Press ``Ctrl+K`` to automatically create the variable when entering it upon an input field or create it manually by clicking the **Variables box** under the bottom part of the screen. Use the right-hand side to enter the value which will be assigned to the variable.

This workflow is merely used as an example of the almost endless possibilities within OpenRPA. The user could read the ``ChuckAPI`` joke into a ``.csv`` or ``.xslx`` file, invoke one or many more workflows to deal with the data, pass it into ``MongoDB Entities`` - as stated before, there are almost no limits to what the user can accomplish in terms of automation.

Evaluate Chuck Norris Joke
--------------------------
Here we set the evaluation process for check whether the joke captured from the ``Chuck Norris API`` is a joke or not.

The validation standard used here is to check whether the content of the ``value`` entry in the ``JSON Dictionary`` returned contains the string "Chuck Norris" or not. 

First, the user needs to create the default variable - inside the **Variables, Arguments & Imports box** - from which the entry containing the ``Chuck Norris API`` joke content is returned. This variable alias is ``value``, as it can be seen in `Chuck Norris API Random Joke <https://api.chucknorris.io/jokes/random>`_ (``https://api.chucknorris.io/jokes/random``).

In ``REST Workflow Example`` workflow, drag an **If** activity to the Designer.

.. figure:: images/openrpa_workflow_example_rest_evaluate_chuck_norris_joke_drag_if.png 
   :align: center
   :scale: 50%

Enter ``value.Contains("Chuck Norris")`` inside the ``Condition`` input field, shown in the activity itself or inside the **Properties box**.

.. figure:: images/openrpa_workflow_example_rest_evaluate_chuck_norris_joke_set_evaluation_condition.png 
   :align: center
   :scale: 50%
   
Setting Evaluation Failed process in Node-RED
---------------------------------------------
The user must now set the proper flow that will be further executed in case of failure of evaluation of the ``ChuckAPI`` process.

**Workflow Logic**

Drag a ``Workflow In`` node to the workspace.

.. figure:: images/openrpa_workflow_example_rest_evaluate_setting_evaluation_failed_workflow_in_drag.png 
   :align: center
   :scale: 50%

Set the ``Queue name`` to define the queue that the OpenFlow workflow will be assigned to in ``Workflow In``'s properties. 

The queue name is completely arbitrary, the user can choose for any name they wish to. In our case, it is set as ``jokefailed``.

.. note::
   To access any node's properties inside the Node-RED workspace, simply double click the given node. The **Properties box** for the node, containing each input field required by itself, will then appear.

Check the ``RPA`` checkbox to allow this flow's workflow to be invoked from OpenRPA agents.

Set the name for the workflow in the ``Name`` input field. Again, it is named arbitrarily. In our case, it is set as ``Joke Failed``.

.. figure:: images/openrpa_workflow_example_rest_evaluate_setting_evaluation_failed_workflow_in_double_click.png 
   :align: center
   :scale: 50%

.. figure:: images/openrpa_workflow_example_rest_evaluate_setting_evaluation_failed_workflow_in_set_properties.png 
   :align: center
   :scale: 50%

Drag a ``RPA Workflow`` or ``Robot`` node to the workspace. This node enables us to invoke the ``REST Workflow - Joke Failed`` workflow upon evaluation failure.

.. figure:: images/openrpa_workflow_example_rest_evaluate_setting_evaluation_failed_robot_drag.png 
   :align: center
   :scale: 50%

Set the ``Robot`` which will invoke the workflow and the ``Workflow`` which will be invoked, inside ``robot`` node's properties. As well as ``Local queue name`` and ``Name`` for the node.

``Local queue name`` is arbitrary, it is used to set the queue which will be used for queueing the robot instances.

``Name`` parameter is used only for displaying purposes inside Node-RED. 

In our case, ``Local queue name`` is set as ``jokefailed`` and ``Name`` is set as ``Invoke Joke Failed Workflow``.

.. figure:: images/openrpa_workflow_example_rest_evaluate_setting_evaluation_failed_robot_set_properties.png 
   :align: center
   :scale: 50%

Connect the ``Workflow In`` node to the ``Robot`` node.

.. figure:: images/openrpa_workflow_example_rest_evaluate_setting_evaluation_failed_robot_connect_node.png 
   :align: center
   :scale: 50%

.. figure:: images/openrpa_workflow_example_rest_evaluate_setting_evaluation_failed_robot_connected_node.png 
   :align: center
   :scale: 50%

.. note::
   To easily connect a node, simply press the ``Ctrl`` key while clicking in the grey rectangles - called ports - in each node's the outer part. The user can also click and hold to connect the nodes, but the author finds it more feasible simply using the ``Ctrl`` key.

Drag an ``Email Out`` node - the one with the letter icon to the right-most side of the activity - to the workspace. This node will be responsible for sending the ``msg.payload`` object JSON stringified to the selected email when an error occurs upon evaluation.

.. figure:: images/openrpa_workflow_example_rest_evaluate_setting_evaluation_failed_email_drag.png 
   :align: center
   :scale: 50%

Connect the top-most port in the ``Invoke Joke Failed Workflow`` node to the port outside the ``email`` node.

.. note::
   To easily connect a node simply press the ``Ctrl`` key while clicking in the grey rectangles - called ports - in the outer part of each node. The user can also click and hold to connect the nodes but the author finds it more feasible simply using the ``Ctrl`` key.

.. figure:: images/openrpa_workflow_example_rest_evaluate_setting_evaluation_failed_email_connect_node.png 
   :align: center
   :scale: 50%

.. figure:: images/openrpa_workflow_example_rest_evaluate_setting_evaluation_failed_email_connected_node.png 
   :align: center
   :scale: 50%

Set the properties for the ``email`` node.

``To`` refers to the e-mail address from the receiver. 

``Userid`` is the  UserId from the account, which will send the e-mail. (ie. e-mail without a domain - if the e-mail is ``admin@openrpa.dk``, then your UserId is ``admin``)

``Password`` - the password for the email account from the sender.

In our case, a dummy e-mail is set - as ``admin@gmail.com``, which will be used to send and receive the message. It is noted here that the user must change the e-mail, or else the workflow obviously won't work.

.. figure:: images/openrpa_workflow_example_rest_evaluate_setting_evaluation_failed_email_set_properties.png 
   :align: center
   :scale: 50%

.. note::
   If the user is using Gmail's SMTP Server, it is needed that the settings for allowing **Less secure app access** are correct. Else, the user will receive an error message upon the execution of the workflow. To do that, refer to `Less secure app access <https://myaccount.google.com/lesssecureapps>`_ (``https://myaccount.google.com/lesssecureapps``) and make sure that the ``Allow less secure apps`` settings is set to ``ON``.

Drag a ``Workflow Out`` node to the workspace.

.. figure:: images/openrpa_workflow_example_rest_evaluate_setting_evaluation_failed_workflow_out_drag.png 
   :align: center
   :scale: 50%

Connect the ``Workflow Out`` node to the ``email`` - now ``admin@gmail.com`` - node.

.. note::
   To easily connect a node simply press the ``Ctrl`` key while clicking in the grey rectangles - called ports - in each node's the outer part. The user can also click and hold to connect the nodes, but the author finds it more feasible simply using the ``Ctrl`` key.

.. figure:: images/openrpa_workflow_example_rest_evaluate_setting_evaluation_failed_workflow_out_connect.png 
   :align: center
   :scale: 50%

.. figure:: images/openrpa_workflow_example_rest_evaluate_setting_evaluation_failed_workflow_out_connected.png 
   :align: center
   :scale: 50%   

Deploy your flow by clicking the red Deploy button at the top-left side of the screen.

.. figure:: images/openrpa_workflow_example_rest_evaluate_setting_evaluation_failed_deploy.png 
   :align: center
   :scale: 50%   

.. note::
   Upon any change inside a Node-RED flow, the user must deploy the given flow, so the changes are propagated throughout robots currently using that given flow.

Invoke Joke Failed Workflow
---------------------------
Now it is needed for the workflow to invoke the ``REST Workflow Example - Joke Failed`` in case the ``ChuckAPI`` process is not properly evaluated.

To do that, drag an ``Invoke OpenFlow`` activity to the ``Else`` sequence, inside the **If** activity.

.. figure:: images/openrpa_workflow_example_rest_evaluate_invoke_joke_failed_drag.png 
   :align: center
   :scale: 50%   

Now select ``Joke Failed`` as the workflow to be invoked.

.. figure:: images/openrpa_workflow_example_rest_evaluate_invoke_joke_failed_select.png 
   :align: center
   :scale: 50%   

This way, the ``REST Workflow Example - Joke Failed`` activity will be automatically invoked upon any failure in the evaluation process.

Output logic
------------
Drag a **Show Balloon Tip** activity to the ``Then`` sequence, inside the **If** activity.

.. figure:: images/openrpa_workflow_example_rest_output_logic_show_balloon_tip_drag.png 
   :align: center
   :scale: 50%   

Insert the ``Title`` for the **Balloon Tip**, which will appear.

Insert the ``Message`` which will appear to the user. In our case, it is the variable ``value``.

.. note::
   Press ``Ctrl+K`` to automatically create the variable when entering it upon an input field or create it manually by clicking the **Variables box** under the bottom part of the screen. Use the right-hand side to enter the value which will be assigned to the variable.

.. figure:: images/openrpa_workflow_example_rest_output_logic_show_balloon_tip_set.png 
   :align: center
   :scale: 50%   

Workflow Finished
-----------------
A snippet is shown below containing both the output and the end of the workflow. As well as the whole workflow thereafter.

.. figure:: images/openrpa_workflow_example_rest_output.png 
   :align: center

.. list-table::
   
   * - .. figure:: images/openrpa_workflow_example_rest_1st_workflow_finished_1.png

     - .. figure:: images/openrpa_workflow_example_rest_1st_workflow_finished_2.png

     - .. figure:: images/openrpa_workflow_example_rest_2nd_workflow_finished_1.png

.. figure:: images/openrpa_workflow_example_rest_node-red_flow.png 
   :align: center
   :scale: 50%   

.. 3.10.9
Reading and Parsing PDF Files
=============================
In this example, the user will create a ``Workflow`` that extracts data from a ``PDF file``, processes the data gathered using `Regular Expressions <https://ryanstutorials.net/regular-expressions-tutorial/>`_ (``https://ryanstutorials.net/regular-expressions-tutorial/``) and saves the data into a ``CSV file``.

First the user needs to download the invoice file which will be used to extract the data from. It is available on `this link <https://drive.google.com/file/d/1jCSvQ42ABkeJVcWksUNUftfiPSjZBlSs/view?usp=sharing>`_ (``https://drive.google.com/file/d/1jCSvQ42ABkeJVcWksUNUftfiPSjZBlSs/view?usp=sharing``).

The steps are listed below:

1. Extract text data from PDF.
2. Match Regular Expression groups.
3. Create ``DataTable`` to store results.
4. Add row to ``DataTable``.
5. Save ``DataTable`` into CSV.

Extract data from PDF
---------------------
In this section the user will learn how to extract text data from a PDF and save it into a variable.

First of all,  the user should drag a **ReadPDF** activity into the main sequence.

.. figure:: images/reading_and_parsing_pdf_files/openrpa_workflow_example_read_and_parsing_pdf_drag_readpdf.png
   :align: center

Then, click the ``...`` button to select the file from which data will read. That is the invoice file just downloaded.

The user also needs to create a variable which will be used to hold the text generated by the extraction with the **ReadPDF** activity. In this case, the variable is ``result``. It must be set inside the ``AllText`` parameter, available inside the **Properties box**.

.. figure:: images/reading_and_parsing_pdf_files/openrpa_workflow_example_read_and_parsing_pdf_configure_readpdf.png
   :align: center

.. note:: 

   OpenRPA is able to automatically create a new variable with the correct type required for the Activity/property. While creating a new variable in the **Properties box**, after typing the variable name and with the caret still inside the input field, by pressing ``Ctrl+K``.


Match Regular Expression groups
-------------------------------
Now the user will use the **Matches** Activity to extract groups of data from the string returned by **ReadPDF**.

First of all, the user should drag a **Matches** Activity into the main sequence.

.. figure:: images/reading_and_parsing_pdf_files/openrpa_workflow_example_read_and_parsing_pdf_drag_matches.png
   :align: center

In the first input box, containing the placeholder ``The input string to match against``, the user will insert the content of the variable, that is, the text captured in the previous section.

In the second input box, the user will insert the **RegEx pattern** used to divide data into groups. The one used here is ``(\b[a-zA-Z0-9$.\-() ]*)``. For a thorough explanation on **Regular Expressions**, please refer to `RyansTutorials Regular Expressions <https://ryanstutorials.net/regular-expressions-tutorial/>`_ (``https://ryanstutorials.net/regular-expressions-tutorial/``). It is interesting to remind the user that, since the **RegEx pattern** is captured as a string, it must be enclosed in quotes. It is also recommended using the `Regex101 <https://regex101.com/>`_ (``https://regex101.com/``) for matching the groups and testing the pattern if needed.

The user must also configure the variable to which the matches will be saved (in this example, ``invoiceResults``) inside the ``Results`` parameter in the **Properties box**. It will be configured with type **Match list**, or simply ``Match[]``. As seen in the image below.

.. figure:: images/reading_and_parsing_pdf_files/openrpa_workflow_example_read_and_parsing_pdf_configure_matches.png
   :align: center

Create DataTable to store results
---------------------------------
In this section, the user will create the ``DataTable`` used to store the results and configure its header.

First, the user will drag a **CreateDataTable** activity to the sequence inside the **Matches** activity.

.. figure:: images/reading_and_parsing_pdf_files/openrpa_workflow_example_read_and_parsing_pdf_drag_createdatatable.png
   :align: center

Now, the user must create the variable in which the ``DataTable`` will be saved inside the `New DataTable variable` placeholder. In this example, the variable is named ``invoiceDataTable``.

.. note::
   Press ``Ctrl+K`` to automatically create the variable when entering it upon an input field. Otherwise, the user can create it manually by clicking the **Variables box** under the bottom part of the screen. Use the right-hand side to enter the value which will be assigned to the variable.

The user must also define its headers inside the `Array of DataTable columns` placeholder. Since in this example only three fields from the invoice are captured, namely ``Company Name``, ``Invoice Number`` and ``Total Balance``, the header will be defined as ``{"Company Name", "Invoice Number" and "Total Balance"}``.

.. figure:: images/reading_and_parsing_pdf_files/openrpa_workflow_example_read_and_parsing_pdf_config_createdatatable.png
   :align: center

.. note::

   A ``DataTable object`` corresponds to one table of in-memory data contained in a ``DataSet object`` from the class equally named. When you read an ``Excel file``, it is automatically assigned to a ``DataSet`` class and all the ``Sheets`` are saved into ``DataTable`` classes - numbered from 0 to the quantity of sheets inside the ``Excel file``. Here it is reminded that ``DataTable`` objects are case sensitive.

Add row to DataTable
--------------------
Here the user will add the data gathered from the ``PDF file`` into the ``DataTable`` defined in the previous section.

First, drag a **AddDataRow** activity into the sequence contained inside the **Matches** activity.

.. figure:: images/reading_and_parsing_pdf_files/openrpa_workflow_example_read_and_parsing_pdf_drag_adddatarow.png
   :align: center

Now, the user must insert the ``DataTable`` to which the data will be inserted to inside the `DataTable to insert to` placeholder.

The user must also define the data that will be inserted.

The ``Company Name`` is the ``Match object`` of no. 1 inside the ``invoiceResults`` list. It will be assigned as ``invoiceResults(0).ToString``.

The ``invoiceNumber`` is the ``Match object`` of no. 2 inside the ``invoiceResults`` list. It will be assigned as ``invoiceResults(2).ToString``.

The ``invoiceTotalBalance`` is the ``Match object`` of no. 3 inside the ``invoiceResults`` list. It will be assigned as ``invoiceResults(44).ToString``.

Therefore, the row which will be added inside the `Array of DataTable columns` placeholder is ``{invoiceResults(0).ToString, invoiceResults(2).ToString, invoiceResults(44).ToString}``. It is shown below.

.. figure:: images/reading_and_parsing_pdf_files/openrpa_workflow_example_read_and_parsing_pdf_configure_adddatarow.png
   :align: center

Save DataTable into CSV
-----------------------
The user will now save the ``DataTable`` created in a CSV file.

First, drag a **WriteCSV** file into the main sequence.

.. figure:: images/reading_and_parsing_pdf_files/openrpa_workflow_example_read_and_parsing_pdf_drag_writecsv.png
   :align: center

Now, click the ``...`` button to insert the ``filepath`` of the CSV file which the data will be saved to - in this example, ``invoice1.csv``.

Then, insert the ``DataTable`` which was captured into the ``DataTable`` inside its **Properties box**. In this example, this variable is the ``DataTable`` defined in the previous section - i.e., ``invoiceDataTable``.

Finally, change the ``Delimiter`` parameter to ``","``.

Workflow Finished
-----------------
A ``CSV file`` is generated, which can be opened on **Excel** application or **Notepad**.

.. figure:: images/reading_and_parsing_pdf_files/openrpa_workflow_example_workflow_finished_csv.png
   :align: center

.. 3.10.10
OpenRPA.Database Activities, DataTable, DataView
================================================
In this example, the user will create a Workflow that reads a ``.csv`` dataset from AirBnB data and inserts the data into a ``MySQL`` database. We'll also use a shortened version of the ``listings.csv`` **Amsterdam**'s data set file, available at `Inside AirBnB <http://insideairbnb.com/get-the-data.html>`_ (``http://insideairbnb.com/get-the-data.html``). Our version, containing only 169 entries, is available `here <https://drive.google.com/file/d/1pYQiRs_9k4mi7yu41sTVMr2_I2wtZ8AB/view?usp=sharing>`_ (``https://drive.google.com/file/d/1pYQiRs_9k4mi7yu41sTVMr2_I2wtZ8AB/view?usp=sharing``) and is the one which will be used in this Workflow example.

The authentication method with which **MySQL** was installed must also **NOT BE** encrypted, ie. it must be set as ``legacy mode``, since the  **DataProvider** ``MySql.Data.MySqlClient`` is used for connecting to the database. 

Attention: this is a very complex example and the user is expected to know about database ``Schemas`` and have a proper ``MySQL server`` running. But do not be afraid! You can still learn a lot by just looking by the example, even if you do not try to replicate all the steps by yourself.

#. Download CSV File
#. Review types from Dataset using Pandas
#. Read dataset from CSV into ``DataTable``
#. Create ``Schema`` and ``Table`` which will hold the data inside ``MySQL``
#. Create DataTable to store results
#. Add batch number column
#. Connect to Database
#. Fetch SQL Table to DataTable
#. Loop through Dataset
#. Incrementing Id and Batch No. variables
#. Adding DataRows and updating SQL Table
#. Executing Queries into the Data Inserted and visualizing Data
#. Using a DataView to filter through the Data

Download CSV File
-----------------
In this section, the user will learn how to download a file from internet and save it into a folder using a specific ``filepath``.

First, drag a ``DownloadFile`` activity and click the `...` button to type the ``filepath`` which will contain the dataset - in our case it is ``"C:\BPA\Workflow Examples\Using DataTables\airbnb_review_listings.csv"`` - and click the **Save** button. We'll also name the activity ``Download Dataset``. In our case, this ``filepath`` is ``"C:\BPA\Workflow Examples\Using DataTables\airbnb_review_listings.csv"``.

Also insert the ``URL`` from which the dataset will be downloaded inside the **Properties box** - ``https://drive.google.com/file/d/1pYQiRs_9k4mi7yu41sTVMr2_I2wtZ8AB/view?usp=sharing``.

Set the ``Overwrite`` parameter to ``True`` as well, just in case you have already downloaded the file to the specified ``filepath``.

.. figure:: images/using_datatables/openrpa_workflow_examples_using_datatables_drag_download_file.png
   :align: center

.. figure:: images/using_datatables/openrpa_workflow_examples_using_datatables_download_file_select_filepath_click_save.png
   :align: center

.. figure:: images/using_datatables/openrpa_workflow_examples_using_datatables_download_file_insert_url.png
   :align: center

Now click the **Play** button inside OpenRPA's ribbon to download the file. It is also recommended that the user checks whether the file actually exists in the specified folder.

.. note::
   To change the name, or  ``DisplayName`` - as set inside the activity's parameters, the user can either click twice in the name of the activity, type the desired name and press ``RETURN`` or set the parameter ``DisplayName`` inside the **Properties box**.

Review types from Dataset using Pandas
--------------------------------------
First, let's take a look at the types which the dataset contains by using ``pandas`` library - or **Python Data Analysis Library**.

Initialize a Python shell - here we assume you already have **Python** and the ``pandas`` library installed. If you do not have it installed, you can use the `Colab Platform <https://colab.research.google.com/>`_ (https://colab.research.google.com/) created by Google, yet you must upload the file to the ``Files`` sidebar and use the ``relative path`` - ie. ``./airbnb_review_listings.csv`` instead of the ``filepath`` set in the previous section, which in our case is ``"C:\BPA\Workflow Examples\Using DataTables\airbnb_review_listings.csv"``. 

Remember to add the escape character - ``\``, since we're using a shell! This leads the ``filepath`` to point to ``"C:\\BPA\Workflow Examples\\Using DataTables\\airbnb_review_listings.csv"``.

Execute the following code:

.. code-block:: python

   >>> import pandas as pd
   >>> df = pd.read_csv("C:\\BPA\Workflow Examples\\Using DataTables\\airbnb_review_listings.csv")
   >>> len(df.dtypes)
   >>> df.dtypes

This will show all the types contained inside the dataset. As seen in the code snippet below.

.. code-block:: python
   
   >>> len(df.dtypes)
   16
   >>> df.dtypes
   id                                  int64
   name                               object
   host_id                             int64
   host_name                          object
   neighbourhood_group               float64
   neighbourhood                      object
   latitude                          float64
   longitude                         float64
   room_type                          object
   price                               int64
   minimum_nights                      int64
   number_of_reviews                   int64
   last_review                        object
   reviews_per_month                 float64
   calculated_host_listings_count      int64
   availability_365                    int64
   dtype: object

This means that the dataset contains 16 ``features`` - or ``variables`` with many different types. Some are of type ``int64``, some are of type ``float64`` and some are of type ``object`` - the latter ones will be treated as if they were ``String`` objects. It also means that we must create our database with different datatypes and set variables inside **OpenRPA** with the correct given types. 

If you do not know what types are, please refer to :ref:`What is a type?`.

Read dataset from CSV into ``DataTable``
----------------------------------------
In this section the user will learn how to read the ``.csv`` file into a ``DataTable``

Now the user must drag a **ReadExcel** activity into the Designer and select the ``filepath`` of the ``.csv`` file with the ``...`` button or by directly pasting it into the ``Filename`` parameter inside the **Properties box**.

Along with the previously set parameter, the user must also set the ``DataTable`` to which the ``.csv`` file will be read into - in our case it is ``amsterdamdt``. As well as the ``Delimiter`` - which defines the delimiter for the ``.csv`` file, in our case it is the ``","`` character.

.. note::
   Press ``Ctrl+K`` to automatically create the variable when entering it upon an input field. Otherwise, the user can create it manually by clicking the **Variables box** under the bottom part of the screen. Use the right-hand side to enter the value which will be assigned to the variable.

.. figure:: images/using_datatables/openrpa_workflow_examples_using_datatables_read_csv.png
   :align: center

.. figure:: images/using_datatables/openrpa_workflow_examples_using_datatables_read_csv_select_file.png
   :align: center

.. note::
   In OpenRPA, a ``DataTable`` corresponds to a 2-dimensional non-serializable object used to hold values. Think of it as a matrix with ``i`` rows and ``j`` columns. The ``i`` rows are accessible by using the ``.Rows(n)`` attribute, where ``n`` is the number of the row - starting from 0 - which you want to access. The ``j`` columns are accessible by using the ``.Item(n)`` attribute, where ``n`` is the number of the column - starting from 0 - which you want to access. It is useful to remind here that the user must have accessed the ``Rows`` attribute, therefore, if the user wanted to access the 2nd column on the 3rd row of the datatable they would use ``.Rows(2).Item(1)`` attribute.

.. note::
   In the .NET API, a ``DataTable object`` corresponds to one table of in-memory data contained in a ``DataSet object`` from the class equally named. When you read an ``Excel file``, it is automatically assigned to a ``DataSet`` class and all the ``Sheets`` are saved into ``DataTable`` classes - numbered from 0 to the quantity of sheets inside the ``Excel file``. Here it is reminded that ``DataTable`` objects are case sensitive.

Create ``Schema`` and ``Table`` which will hold the data inside ``MySQL``
-------------------------------------------------------------------------
In this section the user creates the ``database`` and ``table`` which will hold the data by using **MySQL Workbench**.

Copy and paste the following code section into a new query inside **MySQL Workbench**.

.. code-block:: sql

   CREATE DATABASE `using_datatables` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION='N' */;
   CREATE TABLE using_datatables.`airbnbdata` (
      `id` int NOT NULL AUTO_INCREMENT,
      `datasetId` bigint DEFAULT NULL,
      `placeName` varchar(255) NOT NULL,
      `hostId` bigint DEFAULT NULL,
      `hostName` varchar(255) DEFAULT NULL,
      `neighbourhoodGroup` varchar(255) DEFAULT NULL,
      `neighbourhood` varchar(255) DEFAULT NULL,
      `latitude` double DEFAULT NULL,
      `longitude` double DEFAULT NULL,
      `room_type` varchar(255) DEFAULT NULL,
      `price` bigint DEFAULT NULL,
      `minimum_nights` bigint DEFAULT NULL,
      `number_of_reviews` bigint DEFAULT NULL,
      `last_review` varchar(255) DEFAULT NULL,
      `reviews_per_month` double DEFAULT NULL,
      `calculated_host_listings_count` bigint DEFAULT NULL,
      `availability_365` bigint DEFAULT NULL,
      PRIMARY KEY (`id`)
   );


.. note:: 

   Here you can notice that the features of type ``object`` inside our dataset are going to be set as ``varchar(255)`` - which is mapped from the type ``System.Data.String`` inside OpenRPA. That also occurs with ``bigint``, which is mapped from the ``System.Data.Double`` datatype.

Now click the ``Execute query`` button inside the query panel.

.. figure:: images/using_datatables/openrpa_workflow_examples_using_datatables_create_schema_and_table.png
   :align: center

If everything goes well, **MySQL Workbench** should show a message in the ``Action Output`` section exactly as below.

.. figure:: images/using_datatables/openrpa_workflow_examples_using_datatables_schema_and_table_created.png
   :align: center

That's it! Now the user is ready to continue.


Create DataTable to store results
---------------------------------
In this section, the user will create the ``DataTable`` used to store the results and configure its header.

First,  drag a **CreateDataTable** activity to the main sequence.

.. figure:: images/using_datatables/openrpa_workflow_examples_using_datatables_create_data_table.png
   :align: center

Now, create the variable in which the ``DataTable`` will be saved inside the `New DataTable variable` placeholder. In this example, the variable is named ``sqldt``.

.. note::
   Press ``Ctrl+K`` to automatically create the variable when entering it upon an input field. Otherwise, the user can create it manually by clicking the **Variables box** under the bottom part of the screen. Use the right-hand side to enter the value which will be assigned to the variable.

The user must also define its headers inside the field containing the `Array of DataTable columns` placeholder. All of our datasets ``features`` will be added to the ``DataTable`` object, along with the default ``int`` datatype, which is the ``Primary Key`` and was defined by us in the previous section. Henceforth, our header must be set as ``{"id", "name", "host_id", "host_name", "neighbourhood_group", "neighbourhood", "latitude", "longitude", "room_type", "price", "minimum_nights", "number_of_reviews", "last_review", "reviews_per_month", "calculated_host_listings_count", "availability_365"}``.

The purpose of this ``DataTable`` is to save all the data gathered from the ``.csv`` file and then later use a ``DataView`` to filter through and exhibit the data gathered from it.

.. figure:: images/using_datatables/openrpa_workflow_examples_using_datatables_create_sql_storage_data_table.png
   :align: center

Add Batch No. Column
---------------------
In this section, the user will learn how to add a data column to a ``DataTable`` containing the current index of the entry being processed by using the **AddDataColumn** activity and also how to alter a table using **MySQL Workbench**.

First, drag an **AddDataColumn** activity into the main sequence. This one will add the ``batch_no`` which corresponds to the index of the entry currently being processed.

Insert ``sqldt`` inside the ``DataTable`` placeholder.

Insert ``batch_no`` inside the ``New columns name`` placeholder.

Select its datatype inside the dropdown as ``System.Data.Int64`` by using the ``Browse for types...`` option.

.. figure:: images/using_datatables/openrpa_workflow_examples_using_datatables_adddatacolumn_batchno.png
   :align: center

Now we must alter the ``SQL Table`` so it will also contain the ``BIGINT`` feature ``batch_no``.

Click with the right `mouse` button inside the ``airbnbdata SQL Table`` within **MySQL Workbench** and then click the ``Alter Table...`` button.

.. figure:: images/using_datatables/openrpa_workflow_examples_using_datatables_alter_table.png
   :align: center

This will open a new tab, containing all settings pertaining to the ``airbnbdata SQL Table`` which allows us to add a new column. First, we must scroll down until the end of the features inside the ``SQL Table`` and click twice in the empty field.

.. figure:: images/using_datatables/openrpa_workflow_examples_using_datatables_alter_table_column_prompt.png
   :align: center

Right below ``Column Name`` and type ``batch_no`` into it. Then double click the empty field right below ``Datatype`` and type ``BIGINT``. Also click the ``NN`` checkbox, which will make sure this field is never ``NULL``.

.. figure:: images/using_datatables/openrpa_workflow_examples_using_datatables_alter_table_empty_column_prompt.png
   :align: center

Now click the ``Apply`` button. A page where you can review the changes - ie. the actual ``SQL query`` done - appears. Then click ``Execute``.

.. figure:: images/using_datatables/openrpa_workflow_examples_using_datatables_adddatacolumn_batchno_apply_page.png
   :align: center

.. figure:: images/using_datatables/openrpa_workflow_examples_using_datatables_alter_table_filled_column_prompt.png
   :align: center   

That's it!  The user has now successfully added the ``batch_no`` both to the ``DataTable`` object which will initially hold the data and the ``SQL Table``. 

Connect to Database
-------------------
In this section, the user will learn how to setup a **MySQL** connection to the database which was created in previous sections.

First, drag a **Sequence** activity to the main sequence so we can modularize our workflow and change its name to ``Connect to Database``.

.. figure:: images/using_datatables/openrpa_workflow_examples_using_datatables_connect_to_database.png
   :align: center

.. note::
   To change the name, or  ``DisplayName`` - as set inside the activity's parameters, the user can either click twice in the name of the activity, type the desired name and press ``RETURN`` or set the parameter ``DisplayName`` inside the **Properties box**.

Now drag a **Database Scope** activity to the ``Connect to Database`` sequence. We must set its parameters manually since **MySQL** is used. 

First, set ``ConnectionString`` as ``"Server=localhost;Port=3306;Database=using_datatables;Uid=${USERNAME};Pwd='${PASSWORD}';"``. where ``${USERNAME}`` is the username set for the database - it must also have access to write to the given database - and ``${PASSWORD}`` is the password for the given username.

Then, set the ``DataProvider``, which in our case is "MySql.Data.MySqlClient"

Now finally set the ``DataSource``, which is ``"using_datatables"``. This is the ``database or schema`` which we created in :ref:`Create Schema and Table which will hold the data inside MySQL`.

Now, the connection is successfully set up!

.. figure:: images/using_datatables/openrpa_workflow_examples_using_datatables_database_scope.png
   :align: center

Fetch SQL Table to DataTable
----------------------------
In this section, the user will learn how to fetch an existing ``SQL Table`` into a ``DataTable``.
 
First, drag an **Execute Query** Activity into the ``Start Database Connection`` sequence.
 
Insert ``"select * from airbnbdata;"`` into the edit field ``The query to execute``. This is the ``SQL Query`` which will be executed to fetch all the data. Notice that the statement consists of a simple ``select``, but this query can get as complex as it is needed.
 
Insert ``sqlrawdt`` into the edit the field ``The DataTable to save result into``. This is the ``DataTable`` object where data will be saved.
 
The purpose of this ``DataTable`` ``sqlrawdt`` is to hold data that will be modified and then committed to the ``SQL Table`` later on. When running the ``querying`` Activities in **OpenRPA**, the resulting object is a ``DataView``, which is not connected to the ``SQL Table`` at all - So by manipulating ``sqlrawdt``, with the results from many queries, at the later stages we can commit all the changes at once by using the **Update from DataTable** Activity.

.. figure:: images/using_datatables/openrpa_workflow_examples_using_datatables_execute_query.png
   :align: center

Loop through Dataset
--------------------
In this section, the user will learn how to loop through the ``dataset`` gathered, parse the data into the proper datatypes and use the **If** Activity to assign a default value to abnormal entries contained inside the dataset. Finally, the user will add the rows both to ``sqldt`` and ``sqlrawdt``. At the end of this section, a reference table is found for indexing the given ``dataset features`` along with its ``datatypes``.

First, drag a **Foreach DataRow** activity into the sequence inside the **Database Scope** Activity. Inside the field containing the ``Enter a VB Expression``, insert ``amsterdamdt``.

Similarly to the way :ref:`Read Excel` Workflow example reads cells from the ``DataTable`` returned by the **Read Excel** activity, every feature of our ``dataset`` must be assigned to a variable.

Here 4 types of data are dealt with: ``Int64``, ``Double``, ``DateTime`` and ``String`` - which correspond respectively to ``bigint``, ``double``, ``date`` and ``varchar(255)`` inside the ``SQL Table``.

For the ``Int64`` type, the user must parse the data using the ``Int64.Parse`` method. 

An example is shown where the user must set the ``id_dataset`` variable's value as ``Int64.Parse(row.Item(0).ToString)`` and also set its type as ``System.Data.Int64``. Go ahead and set the remaining ones! These are``host_id``, ``price``, ``minimum_nights``, ``number_of_reviews``, ``calculated_host_listings_count`` and ``availability_365``.

.. figure:: images/using_datatables/openrpa_workflow_examples_using_datatables_loop_through_dataset_assign_int64.png
   :align: center

For the features of type ``Double``, for this specific InsideAirBnB dataset, they can be either a null value (ie. variable.ToString returns "") or a numeric value that can be properly converted by using ``CDbl()``.
 
As can be seen, an ``If`` Activity is used to distinguish between null and valid values.
To avoid writing ``row.item(xx)[...]`` extensively many times, some temp variable ``<featureNameValue>`` were used.

An example is shown below, with the ``temp variable`` set as ``latitudeValue`` and the actual value which will be inserted into the table as ``latitude``. Go ahead and set the remaining ones! These are ``longitude`` and ``reviews_per_month``.

.. figure:: images/using_datatables/openrpa_workflow_examples_using_datatables_loop_through_double_variables.png
   :align: center

For the ``DateTime`` type, the user must also use a ``temp variable`` to check against abnormal entries. Here the **If** Activity is also used as was just shown above, the only difference is the default value is arbitrarily set as ``New System.DateTime(2011,10,12,0,0,0)`` instead of ``0``.

.. figure:: images/using_datatables/openrpa_workflow_examples_using_datatables_loop_through_date_variable.png
   :align: center

The last type is ``String``. All the user has to do is find the given ``i-th`` entry in the row and match it to the given entry inside the dataset and cast it to ``String`` using the ``.ToString`` method. It is useful to remind the user that **OpenRPA** starts indexing at 0.

.. figure:: images/using_datatables/openrpa_workflow_examples_using_datatables_loop_through_string_variables.png
   :align: center

The table referencing each index follows below:

``
id_dataset - Int64 - 0
place_name - String - 1
host_id - Int64 - 2
host_name - String - 3
neighbourhood_group - String - 4
neighbourhood - String - 5
latitude - Double - 6
longitude - Double - 7
room_type - String - 8
price - Int64 - 9
minimum_nights - Int64 - 10
number_of_reviews - Int64 - 11
last_review - DateTime - 12
reviews_per_month - Double - 13
calculated_host_listings_count - Int64 - 14
availability_365 - Int64 - 15
``

.. note::
   In OpenRPA, a ``DataTable`` corresponds to a 2-dimensional non-serializable object used to hold values. Think of it as a matrix with ``i`` rows and ``j`` columns. The ``i`` rows are accessible by using the ``.Rows(n)`` attribute, where ``n`` is the number of the row - starting from 0 - which you want to access. The ``j`` columns are accessible by using the ``.Item(n)`` attribute, where ``n`` is the number of the column - starting from 0 - which you want to access. It is useful to remind here that the user must have accessed the ``Rows`` attribute, therefore, if the user wanted to access the 2nd column on the 3rd row of the datatable they would use ``.Rows(2).Item(1)`` attribute.

.. note::
   In the .NET API, a ``DataTable object`` corresponds to one table of in-memory data contained in a ``DataSet object`` from the class equally named. When you read an ``Excel file``, it is automatically assigned to a ``DataSet`` class and all the ``Sheets`` are saved into ``DataTable`` classes - numbered from 0 to the quantity of sheets inside the ``Excel file``. Here it is reminded that ``DataTable`` objects are case sensitive.

Incrementing Id and Batch No. variables
---------------------------------------
In this section, the user will use the **Assign** Activity to increment the variables ``id`` and ``batch_no``, as shown below.

First, drag an **Assign** Activity into the end of the ``Data Processing Logic`` sequence.

Assign ``id`` to ``id + 1``.

Drag another **Assign** Activity into the end of the ``Data Processing Logic`` sequence.

Assign ``batch_no`` to ``batch_no + 1``.

.. figure:: images/using_datatables/openrpa_workflow_examples_using_datatables_loop_through_increment_variables.png
   :align: center

Adding DataRows and updating SQL Table
--------------------------------------
In this section, the user will insert the acquired values into the two ``DataTables``; ``sqldt``: used to filter through and exhibit the values - and ``sqlrawdt``: used to update the ``SQL Table`` and commit the changes by using the **Update from DataTable** Activity.

First, drag an **AddDataRow** Activity into the end of the ``Data Processing Logic`` sequence.

Insert ``sqldt`` in the field containing the ``DataTable to insert into``.

Insert ``{id, id_dataset, place_name, host_id, host_name, neighbourhood_group, neighbourhood, latitude, longitude, room_type, price, minimum_nights, number_of_reviews, last_review, reviews_per_month, calculated_host_listings_count, availability_365, batch_no}`` inside the field containing the ``Array of DataTable columns``.

Again, drag another **AddDataRow** Activity into the end of the ``Data Processing Logic`` sequence.

Insert ``sqlrawdt`` in the field containing the ``DataTable to insert into``.

Insert ``{id, id_dataset, place_name, host_id, host_name, neighbourhood_group, neighbourhood, latitude, longitude, room_type, price, minimum_nights, number_of_reviews, last_review, reviews_per_month, calculated_host_listings_count, availability_365, batch_no}`` in the field containing the ``Array of DataTable columns``.

.. figure:: images/using_datatables/openrpa_workflow_using_datatables_update_datatables.png
   :align: center

Drag an **Update from DataTable** Activity into the ``Database Scope`` sequence.

Insert ``"airbnbdata"`` inside the ``TableName`` input field - ie. the one containing the ``Table to insert rows into``.

Insert ``sqlrawdt`` inside the ``DataTable`` input field - ie. the one containing the ``The DataTable to save result into``.

.. figure:: images/using_datatables/openrpa_workflow_using_datatables_update_from_datatable.png
   :align: center

Drag a **WriteLine** into the end of the sequence and insert ``""Successfully added data into MySQL DB. Number of rows added: " + result.ToString"`` into the ``Text`` field, ie. the one containing the ``VB Expression``.

Executing Queries into the Data Inserted and visualizing Data
-------------------------------------------------------------
In this section, the user will learn how to use the querying activities to work with data inserted into the ``SQL Table``.

First, drag an **Execute Non Query** activity into the ``Database Scope`` sequence. This activity simply executes a ``SQL Query`` and saves the number of rows affected into an ``Int32`` variable.

Here the user will delete the row of an arbitrary entry - ie. ``217`` - and save the resulting value of the operation into the ``return217`` variable.

Insert ``"DELETE from using_datatables.airbnbdata WHERE id = 217;"`` inside the ``Query`` field, ie. the one containing the ``Query to execute``. This will delete the entry containing ``id`` no. 217. Save its result into a variable called ``return217`` by entering its name inside the ``Result`` property in the Activity's **Property Box** and pressing ``Ctrl+K``. If it properly deletes the row, it should return an ``Int32`` variable containing the value ``1``.

Now, drag an **Execute Query** activity into the ``Database Scope`` sequence.

Insert "SELECT * FROM using_datatables.airbnbdata;" inside the ``Query`` field, ie. the one containing the ``Query to execute`` and also insert ``resultsDT`` into the ``DataTable`` field, ie. the one containing the ``The DataTable to save result into`` and press ``Ctrl+K`` to create it. This will select all entries from the ``airbnbdata SQL Table`` and save it to the ``resultsDT DataTable``.

.. figure:: images/using_datatables/openrpa_workflow_using_datatables_execute_non_query_and_execute_query.png
   :align: center

Here the user will acquire the ``place_name`` of an arbitrary entry - ie. ``213`` - and save it to a variable named ``place_name_value``.

Now, drag an **Execute Scalar<>** activity into the ``Database Scope`` sequence. A window will open where the user can select the type which will be returned by the ``query``, in our case it is a ``String``. Also insert ``"SELECT place_name FROM using_datatables.airbnbdata WHERE id = 213;"`` into the ``Query`` field, ie. the one containing the ``Query to execute``, and also enter ``place_name_value`` into the ``Result`` field, ie. the one containing the ``The result of the query``. This query will select the ``place_name`` value from the entry containing ``id`` no. ``213`` and save it into the ``place_name_value`` variable.

.. figure:: images/using_datatables/openrpa_workflow_using_datatables_execute_scalar_string.png
   :align: center

.. figure:: images/using_datatables/openrpa_workflow_using_datatables_execute_scalar_string_activity.png
   :align: center

Now the user will visualize the data inserted.

Since the first value - ``return217`` - is a number containing the number of rows affected and the query being run is expected to affect a single row, the user can check if its value is equal to ``1`` by using an **If** Activity and then write data to the output, depending whether or not the goal was achieved.

Drag an **If** Activity into the ``Database Scope`` sequence. Inside the ``Condition`` input field, ie. the one containing the ``VB Expression``, insert ``return217 = 1``.

Drag a **WriteLine** Activity into the ``Then`` sequence inside the **If** Activity and insert ``"Successfully deleted row no. 217"`` into the ``Text`` field, ie. the one containing the ``Enter a VB Expression``.

Now, drag a **WriteLine** Activity into the ``Else`` sequence inside the **If** Activity and insert ``"Unable to delete row no. 217"`` into the ``Text`` field, ie. the one containing the ``Enter a VB Expression`` placeholder. This will only happen if the Activity wasn't able to delete the row containing the ``id`` equal to ``217``.

Drag a **WriteLine** Activity into the end of the ``Database Scope`` sequence. Insert ``"place_name of row no. 178: " + resultsDT.Rows(178).Item(2).ToString`` into the ``Text`` field, ie. the one containing the ``Enter a VB Expression`` placeholder. This will show the ``place_name`` value of the ``178-ith`` row of the table gathered with the **Execute Query** Activity.

Finally, drag another **WriteLine** Activity into the end of the ``Database Scope`` sequence. Insert ``"place_name of row no. 213" + place_name_value``. This will show the value gathered from the query executed with the **Execute Scalar<>** Activity.

.. figure:: images/using_datatables/openrpa_workflow_using_datatables_visualize_data.png
   :align: center

Using a DataView to filter through the Data
-------------------------------------------
Now the user will use a ``DataView`` type to filter through the data.

First, drag an **Assign** Activity into the outermost sequence and assign ``sqldtview`` to ``sqldt.DefaultView``. Also set its type as ``System.Data.DataView``, so **OpenRPA** will be able to filter through it.

.. figure:: images/using_datatables/openrpa_workflow_using_datatables_assign_dataview.png
   :align: center

Now, drag another **Assign** Activity into the outermost sequence and assign ``sqldtview.RowFilter`` to ``"id > 162". This will filter the ``sqldt DataTable`` to only acquire values upon which the ``id`` is greater than 162.

.. figure:: images/using_datatables/openrpa_workflow_using_datatables_assign_rowfilter.png
   :align: center

Now, drag a **Foreach DataRow** Activity so we can filter through the data. Insert ``sqldtview`` as ``DataView`` in the **Properties Box**. 

.. figure:: images/using_datatables/openrpa_workflow_using_datatables_for_each_datarow_filter.png
   :align: center

Finally, add a **WriteLine** Activity into the ``Then`` sequence and insert ``"Place name of row " + row.Item(0).ToString + " is: " + row.Item(2).ToString`` to exhibit the ``place_name`` value of the given row.

.. figure:: images/using_datatables/openrpa_workflow_using_datatables_for_each_datarow_filter_drag_writeline.png
   :align: center