=============
 **OpenFlow** 
=============


**********************
 **What is OpenFlow?** 
**********************

OpenFlow is an application, which enables the user to manage, invoke and configure your robots through workflow entries. It also serves as a central cloud repository from where it is available to save your robots and gather them from the OpenRPA GUI and provides an easy way to integrate many workflows with forms and other kinds of input and processing.

**************************
 **Installing, First Run**
**************************
The following guide's purpose is to help the user install an instance of OpenFlow **locally**. If you already have an URL provided in which to use OpenFlow, please refer to the next section.

The user must make sure he already has `NodeJS <https://nodejs.org/en/>`_ (``https://nodejs.org/en/``) - preferably using `nvm <https://github.com/nvm-sh/nvm>`_ (``https://github.com/nvm-sh/nvm``), `MongoDB Community Server <https://www.mongodb.com/try/download/community>`_ (``https://www.mongodb.com/try/download/community``) and `RabbitMQ <https://www.rabbitmq.com/download.html>`_ (``https://www.rabbitmq.com/download.html``).

Quickstart Running OpenFlow using NPM
=====================================
In this section lies a brief and concise description of how to install OpenFlow through NPM.

Then, the user must run the following command from a command prompt with escalated privileges in Windows 10.

.. code-block:: powershell

   npm install --global windows-built-tools


If using any GNU/Linux distro which uses the ``APT`` package manager, the following command replaces the one above.

.. code-block:: powershell

   sudo apt-get install gcc g++ make

Then, the user must install the ``openiap`` package.

.. code-block:: powershell

   npm i openiap -g

Then he shall create a template configuration file.

.. code-block:: powershell

   openflow-cli --init


Now the user can install the service.

.. code-block:: powershell

   openflow-cli --install openflow

All the user has to do now to access OpenFlow is visit the `OpenFlow page <http://localhost.openrpa.dk>`_ (``http://localhost.openrpa.dk``).

Developer Setup
===============
If you have interest in creating a develeoper setup in order to develop some extra features yourself or to debug, in this section you will find a brief and concise description of how to install OpenFlow by cloning the `OpenFlow's GitHub Repository <https://github.com/open-rpa/openflow>`_ (``https://github.com/open-rpa/openflow``) and run it from **Visual Studio Code**

Obviously, `Visual Studio Code <https://code.visualstudio.com/download>`_ (``https://code.visualstudio.com/download``) is required.

First, the user must clone the repository into a folder.

.. code-block:: powershell

   git clone https://github.com/open-rpa/openflow

Then, the user must initialize a command prompt and move to the desired directory.

.. code-block:: powershell

   cd openflow

Now the user must install ``gulpy`` and ``typescript`` globally.

.. code-block:: powershell

   npm i gulp typescript browserify tsify -gather

And also install packages for OpenFlow API/Web.

.. code-block:: powershell

   npm i

The user must now install the packages for Node-RED by using the following command.

.. code-block:: powershell

   cd openflow_node_red_configure_form
   npm i
   cd ..
Now the user will open the working folder in VS Code.

.. code-block:: powershell

   code OpenFlow.code-workspace

And create a folder at the top level of the OpenFlow folder called ``config`` and inside it a file called ``.env`` - be careful since the name of the file has a dot starting it!

Lastly, he shall add the following content to the ``.env`` file:

.. code-block:: powershell

   nodered_id=nodered1
   nodered_sa=nodered1
   port=80
   nodered_port=1880
   nodered_domain_schema=$nodered_id$.localhost.openrpa.dk
   tls_crt=
   tls_key=
   tls_ca=

   signing_crt=LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURqRENDQW5TZ0F3SUJBZ0lKQUp5N0tI
   MTE1dkQ4TUEwR0NTcUdTSWIzRFFFQkN3VUFNRnN4Q3pBSkJnTlYKQkFZVEFrUkxNUk13RVFZRFZRUUlEQXBUY
   jIxbExWTjBZWFJsTVNFd0h3WURWUVFLREJoSmJuUmxjbTVsZENCWAphV1JuYVhSeklGQjBlU0JNZEdReEZEQV
   NCZ05WQkFNTUMzTnBaMjVwYm1kalpYSjBNQjRYRFRFNU1EUXdOekUwCk5ETXpORm9YRFRJNU1EUXdOREUwTkR
   Nek5Gb3dXekVMTUFrR0ExVUVCaE1DUkVzeEV6QVJCZ05WQkFnTUNsTnYKYldVdFUzUmhkR1V4SVRBZkJnTlZC
   QW9NR0VsdWRHVnlibVYwSUZkcFpHZHBkSE1nVUhSNUlFeDBaREVVTUJJRwpBMVVFQXd3TGMybG5ibWx1WjJObG
   NuUXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCCkFRQy9JSkdEaGxLTU9SWkoycXQ
   wSWpjSDZOWUFtZDVxQzQ4dkNJRE54QWZCbmQxQnN4WlVjWkl5dkFlT28yNDcKM3I0eTYwNDgxRHVUS2JaMTBTN
   jRqRU05aW1XTXB1TFlJRnVyQ3BWNzVEWWhxMS85Q0FJVHJqNjlmVDluSkptcwpjM2lxTnJ1Tlg1bDlISXdadWt
   QM1ZNRkJRNWZVd3N1ZnE0YW1NbnVnZmtyUEVzSngxK3VJb0NYU3pyblZvcnZpClZ0ZFh4a3M4N0l1S0ZnMDJIZ
   1RQSzdwc0FXYTBRY3g2ck04bkV5TUhwNUdlR1Rvb1NNbkcyZ1RGNWZOSVFNdTMKVEVoc2p3SWRTYmRwck1Gb1V
   ZV05Bc2FueTJOQk0wREhZRUdjQlZhZ0xWNUhFUW5ySUM3NEhtNjYxdG9HaU5VSAoveW04U3VndTgwWVFiVGxPc
   TFWNnNkaVRBZ01CQUFHalV6QlJNQjBHQTFVZERnUVdCQlMrYWc1NGtITllKZ29pCm9yRnlia293THR5R3ZqQWZ
   CZ05WSFNNRUdEQVdnQlMrYWc1NGtITllKZ29pb3JGeWJrb3dMdHlHdmpBUEJnTlYKSFJNQkFmOEVCVEFEQVFIL
   01BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQTZpZHBYdzdSR2pzcUpNanI2c1YvaQpXeXFsL2xkSy9sa1NCdnN
   BSENieDdQYi9rVUd2NHJNbndYMnBHdTR0YkFnSDc4eStmS3dzazllYkxDeTA4Y1k0Ckt5czhzbUpLenhWN0R6U
   3RVR1NvZmZMaFliVVVMK3UyNU5vVXc0TG1WQU5FU0NaMTZ3aTdPQUdJMkJnNFR6TXoKdnlIUHRaaE9wTXBNV2lz
   M2ZnRXFzV3QxS2VLcXo0Z2M5RnJtZDZPNlQzVVAxWTRBR3VEWnNScnpiU2RQS2JxbApxekprT2tQcGtHOGo3ZjF
   WNkk1ZlkzblZaSWk2YW1TcTM1RTJkQzVMY0dIQXRtT1lWL0c4TEQ3OUFnTVpFUU5vCkF2R2RnV1gvbXBFVkFjM
   mRFQkJlcUN6WjF1aVhWUjdERld2ZDFKTEpsdVRyTm9jMUROc0xNKzNEZFFiQ2JnYVcKLS0tLS1FTkQgQ0VSVElG
   SUNBVEUtLS0tLQo=
   singing_key=LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZB
   QVNDQktjd2dnU2pBZ0VBQW9JQkFRQy9JSkdEaGxLTU9SWkoKMnF0MElqY0g2TllBbWQ1cUM0OHZDSUROeEFmQm
   5kMUJzeFpVY1pJeXZBZU9vMjQ3M3I0eTYwNDgxRHVUS2JaMQowUzY0akVNOWltV01wdUxZSUZ1ckNwVjc1RF
   locTEvOUNBSVRyajY5ZlQ5bkpKbXNjM2lxTnJ1Tlg1bDlISXdaCnVrUDNWTUZCUTVmVXdzdWZxNGFtTW51Z2
   ZrclBFc0p4MSt1SW9DWFN6cm5Wb3J2aVZ0ZFh4a3M4N0l1S0ZnMDIKSGdUUEs3cHNBV2EwUWN4NnJNOG5FeU
   1IcDVHZUdUb29TTW5HMmdURjVmTklRTXUzVEVoc2p3SWRTYmRwck1GbwpVWVdOQXNhbnkyTkJNMERIWUVHY0
   JWYWdMVjVIRVFucklDNzRIbTY2MXRvR2lOVUgveW04U3VndTgwWVFiVGxPCnExVjZzZGlUQWdNQkFBRUNnZ0V
   BVXBjZ1NsV2hGamNWQ3BVVHdmdUhERVB4TmhGSHEwdVRkQitZaVZKTWg3NVAKL2pRRlVqaEJsT3JyMlJlR2F4
   aTEyQXNXby9LU1MrV2Frdzd4d1kzYkFKenRoUG9Zekl3dkVKcGlQa2MvblEwUgpUYVpJUDNqc1k3WGIwQlpn
   MGNTVVAvbW0wbENkWXhNUzk0c21FNXJzWitkdGxPTVlXc2NrU0cxSVB2SlVJV2FZCnl3NC9kaHJ3TWRsREVZS
   2tSbks1aDR1dXR1dzA1Q1VzNkZWN2F5cEJRRStGM3RxVlF3QWxGbWNueXdvZTB5WjQKZW1tWkRvT1dzNUk4cG
   NGbjZCSW1wZjN3UEg5UWhlQXJVaXRqV3YrZmI2cWRVaHJFVDBxMzh4dTZ5M1lJNFNLYQpXME9kUng4L3FTYll
   XdkpzbmxscDR0aUpDWE5IdnV6MVBKSGhxOUprQVFLQmdRRCt2dHlWcVJoaEJZTmd6WWorClFCaDNLcktrNEVqT
   XZaSGhEelhES0pMZ2JEVmJzNExrQkYySWZGOTF0S1k3d09CNVpXcU82Z3FqVVJBVE5hc1YKOExCOGE2TEpXYVJ
   uTklLMnJkd1FwalFYcy92OVBSYnJwc2tTbDRJdUsyZWNBMjBSQkhicW5yNHZ5ZkQ4U3BzaApSdHlTUk5CRGVsaU
   01Z1JDM0JKKzBZbjBVUUtCZ1FEQUVZSUp3Y2xnQloyWmNNTlh1dW1lLzUxdHBHeGppRTJpCjZ3SDNsOHNTVDN1U
   1A4MHdndGdHaVFsUTRsR3BmSThqWkl4N0pwcGw0Qko1ZEtuVnpIS1dqMzA3YXYxcjdpU3QKLzJOVDNobzdaYkNl
   YzlhMHlJU2E3dTNGZGxzZ0VPcE45dURmbG5GQVQ3ZmIrM2d4Sk9DUWp1TkFCZXZaK2pScwpZY0ZhQWhGNW93S0J
   nUUNGUG9HVVNsRDFGblFrWXYwL3QzalVnK0hTK1hrNmxnRkNqYmthTGhPOURQeFB6Ykl0CjM5YW9lQjFhTExZeV
   ZPMVVzZVl0Z0Y4MkUwVnNOc3NZKzc3a0pVeU5NclVhUWs0SWpTR3BGN1h4bS9PMi9vZ0oKbEVCaDJCdUFXTFdsM
   WVqcldNRjJjTGVidVcyeUdMZlJqUVg3LzhCTE95Z3I4bmZTSE5nVHV6Z0VNUUtCZ0JrZgpNUjhObGNWVmRyT25L
   Q1hGY09FM0ZlUk5hVS9yZUJ3akdQTEZpKzR0TDBDRno5VFVpR1R5YjZHQXVLV3VnUnBrCkFHdnJOSzYyakRRT3F
   sZ29rYVJYeUUySlJQUmxCYThzaEZWbjY0NXhVcFNuR2lJelNBVHIwM1hNY1ViVWI1RWIKQlhhNU9yN3FybVc3a3
   BENi9kUnFuQmEzcjQyblNFd1V6VEYwcTh4NUFvR0FIcXdRSyt1R0NTdlNsNENJUGhyRQpDREIvcytDK2NJNXVCe
   FJCMHVlNjc3L2lpdGZPSU9lOUNiTHE3R0tib0w4RVg3eXhKNVRLWjlYQmh5LzNCWmVNCllydEx3M2JicTNTN2hp
   UGFYSmE1dXZma3BWR1RnNEdzTnBJQ3VNTEJUaXJ6M0ZRV25UNFNZbzkrREVoalhEeVQKWlVOMERtUkJVNjNjWjR
   SUlXd2xWUTA9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
   NODE_ENV=development

   saml_federation_metadata=http://localhost.openrpa.dk/issue/FederationMetadata/2007-06/FederationMetadata.xml
   saml_issuer=uri:localhost.openrpa.dk
   # saml_entrypoint=http://localhost.openrpa.dk/issue
   # saml_baseurl=http://localhost.openrpa.dk:1880/

   allow_personal_nodered=false
   allow_user_registration=true
   # mongodb_url=mongodb://localhost:27017
   # mongodb_db=openflow

   # api_bypass_perm_check=true
   update_acl_based_on_groups=true
   multi_tenant=false

   websocket_max_package_count=1048576

   api_ws_url=ws://localhost.openrpa.dk
   domain=localhost.openrpa.dk
   protocol=http
   amqp_url=amqp://localhost
   aes_secret=7TXsxf7cn9EkUqm5h4MEWGjzkxkNCk2K
   auto_create_users=true
   auto_create_domains=
   skip_history_collections=audit,jslog

And if the user is using **Windows 10**, he must allow Powershell Scripts to run by changing the Execution Policy using the following command in a Powershell Prompt with escalated privileges.

.. code-block:: powershell

   Set-ExecutionPolicy Bypass --Force

Finally, the user can run ``OpenFlow`` by pressing ``Ctrl+Shift+D``, selecting ``OpenFlow`` in the dropdown box and clicking the **Play** button.

The user can now access OpenFlow by using a browser and navigating to the ``http://localhost.openrpa.dk`` URL.

To properly install and configure Node-RED, please refer to the **Installing & First Run** section in the Node-RED chapter.

*********************************
 **Accessing for the first time**
*********************************

To access OpenFlow webpage, simply go to the URL as specified by your working enviroment (contact your IT responsible, if needed). If you are running a local version, by default the URL should be ``http://localhost.openrpa.dk``.
If you do not have access to an OpenFlow of you own and you are not running a local version, we encourage you to do some experimentation using our own demo enviroment, which can be found at ``https://app.openiap.io``.

After accessing the page, users may be prompted to authenticate themselves. After signing in, the user is redirected to the home page of OpenFlow.

.. note ::
   If you are accessing OpenFlow demo enviroment (``https://app.openiap.io``), when prompted for credentials, you may type any username/password combination and your user will be then created automatically with the same credentials. Please keep note of your username/password!

.. figure:: images/openflow_sign_in_page.png
   :scale: 50%
   :align: center
   
   **Authentication page.**


.. figure:: images/openflow_index_page.png
   :scale: 35%
   :align: center

   **OpenFlow's home page.**

************************
 **Creating a new user**
************************
To create a new user first click the Admin dropdown and the Users option.

.. figure:: images/openflow_dropdown_index_page.png
   :scale: 50%
   :align: center

   **Admin dropdown.**

Now click the navy blue ``Add user`` button.

.. figure:: images/openflow_users_page.png
   :scale: 35%
   :align: center

   **Users page.**

Now it is needed to fill the given forms and click save.

.. figure:: images/openflow_userdetail_page.png
   :scale: 25%
   :align: center

   **User creation page.**


**********
 **Roles**
**********
Here we explain **Roles** in OpenFlow and how they interfere with OpenRPA and Node-RED access privileges.

What are Roles?
===============
In OpenFlow, **Roles** are an unit or collection of privileges and permissions that can be assigned to one or more users. These **Roles** serve various purposes, such as granting access to workflows inside **OpenRPA** or granting access to flows inside **Node-RED**, which in turn may or may not activate workflows inside OpenRPA.

RPARole (Pool)
==============
The **RPARole** is a parameter set in the Role editting page of a role which creates a pool of consumers.

If set, this parameter will act upon a robot such that each robot logged in with a **Role** containing this parameter set will be assigned as a consumer on the ``id`` of that given **Role**. Think of it as creating a `pool <https://cs.stackexchange.com/q/86372>`_ (``https://cs.stackexchange.com/q/86372``) of consumers, where each consumer is assigned upon logging in.

But what is a consumer?
-----------------------

   *The term "consumer" means different things in different contexts. In general in messaging a consumer is an application (or application instance) that consumes messages. The same application can also publish messages and thus be a publisher at the same time.In this sense a consumer is a subscription for message delivery that has to be registered before deliveries begin and can be cancelled by the application*.

   *RabbitMQ is a messaging broker. It accepts messages from publishers, routes them and, if there were queues to route to, stores them for consumption or immediately delivers to consumers, if any. Consumers consume from queues. In order to consume messages there has to be a queue. When a new consumer is added, assuming there are already messages ready in the queue, deliveries will start immediately. The target queue can be empty at the time of consumer registration. In that case first deliveries will happen when new messages are enqueued*.¹

¹ - `Consumers <https://www.rabbitmq.com/consumers.html>`_ (``https://www.rabbitmq.com/consumers.html``)

Granting permissions (admin, nodered, user)
===========================================
Coming soon - Work in progress


*****************************
 **Workflows Tab (Node-RED)**
*****************************

What is it?
===========
Workflows in Node-RED are mainly called 'Flows'. These flows are made to connect different services, applications and logic functions. When grouped together they can be used to process data and output the results to a given service or file. 

At the  `Workflows page <http://localhost.openrpa.dk/#/Workflows>`_ (eg. ``http://localhost.openrpa.dk/#/Workflows``) in OpenFlow, it is possible to remotely invoke these flows.

.. figure:: images/openflow_node_red_subflow.png
   :align: center

   **Node-RED subflow example.**


Invoking
========
Workflows can be started through all three applications: OpenRPA, OpenFlow and Node-RED. Invoking a workflow does not change it's content, it merely executes it remotely. Think of it as a read-only procedure.

- **Deploying a Workflow to Node-RED**

   Upon accessing Node-RED, flow tabs are shown containing all the flows available for deployment. To execute a Node-RED flow, simply click the starting node inside a Node-RED subflow. Everytime a change is made to a Node-RED flow or subflow it is required to deploy it again so the changes are applied.

   If it is desired to invoke a workflow through OpenFlow according to the settings set on the Node-RED application, a few more steps are required.

   1. Enter the Node-RED page and select the desired flow tab where you want to create the subflow containing the invoke call to OpenFlow.
   2. Create a subflow with a ``Workflow In`` node as its starting point.
   3. Click twice the ``Workflow In`` node corresponding to the workflow you want to create.
   4. Name it by setting up the ``Queue name`` input field.
   5. If desired, route it to send a form back to the user by using ``Workflow Out``  (more about Forms below).
   6. Check one or both of the checkboxes: RPA - to enable this node to be invoked from OpenRPA - and WEB - to enable invoking from OpenFlow.
   7. Deploy the current flow.

   It is important to remark that when a ``Workflow In`` node is deployed, it will create a corresponding role inside OpenFlow named "nodered$<``Queue name``>", and only users that are members of this role can invoke this workflow. On the following next steps, if you can't see your workflow when attempting to remotely invoke it, double check and see if your user is a member of that role!

.. note::
   The user must have the ``nodered users`` role enabled in order to able to invoke Node-RED flows from within OpenFlow.

.. figure:: images/openflow_setting_nodered_workflow.png
   :align: center

   **Enabling Node-RED invoking from OpenFlow.**

-  **Invoking a Node-RED workflow in OpenFlow**

   After the steps above are complete, go to the `Workflows page <http://localhost.openrpa.dk/#/Workflows>`_ (eg. ``http://localhost.openrpa.dk/#/Workflows``) and directly invoke the desired workflow. A form page will then open to choose the input parameters, if any.

   The forms are either automatically generated by OpenRPA, according to the variables preset - more on that on OpenRPA's Variables section - or manually generated by the user on the `Forms page <http://localhost.openrpa.dk/#/Forms>`_ (eg. ``http://localhost.openrpa.dk/#/Forms``).

   Upon clicking submit on a form, the parameters are sent to the robot for processing and execution of the given workflow.

.. figure:: images/openflow_workflows_page.png

      **Workflows page.**

.. figure:: images/openflow_form_example.png

      **Form example.**


********************************
 **RPA Workflows Tab (OpenRPA)**
********************************

What is it?
===========
Workflows in OpenRPA and OpenFlow are the same thing, an algorithm or a sequence of steps that execute a meaningful task. The difference is that when you invoke a workflow in OpenFlow, it creates an instance of that workflow. By accessing the Workflows tab, you may invoke workflows remotely, meaning, the stack in OpenFlow will send a message to the available agent to process and execute the given workflow.

From OpenFlow you can create forms, grant permissions to a given workflow and most importantly invoke it.

OpenFlow automatically manages the workflow repository. When properly connected, by saving a workflow inside OpenRPA, it will also automatically appear inside the Workflows webpage.

To download a workflow, simply go to the RPA Workflows link and click download. After dowloading the .XAML file, you may share it with others or import it into your OpenRPA client.

Invoking
========

- **Methods for Invoking**
	
   Here we discuss the methods for invoking a workflow using OpenFlow.

- **Invoking through OpenFlow's RPA Workflows Page**

   To invoke a workflow through OpenFlow, simply go to `RPA Workflows page <http://localhost.openrpa.dk/#/RPAWorkflows>`_ (eg. http://localhost.openrpa.dk/#/Workflows) and click Invoke, another page for the specific workflow will be opened where all the forms needed to be filled are going to be presented. Simply fill them and click Invoke again. The input data is then sent to the chosen robot/agent and it will start processing the workflow.

   Data processing is bi-directional: input parameters are sent to a robot/agent and the workflow output will also be returned. That means that you can make many workflows calling different applications. Think of it as a message, messages are sent, read and replied to. Nothing prevents that message from being sent, read or replied to multiple times.

.. note::
   For the user to invoke a workflow using OpenFlow, the user must have the proper permissions. See more at OpenRPA's chapter Granting permissions to users/roles.

.. figure:: images/openflow_rpa_workflows.png
   :align: center
  
   **RPA Workflows page.**


**********
 **Forms**
**********

Forms are an user-friendly way of passing input to a workflow by creating dynamic OpenFlow's webpages. There are two ways of generating a form, one of them is through OpenFlow's automatically generated forms which are created upon saving a Workflow into its repository and the other one is manually creating a form and connecting it to a Node-RED workflow.


Creating a Form
===============

Creating a form is rather easy and simple. Go to the Forms page, where all forms are listed, available under the Admin dropdown or on the `Forms page <http://localhost.openrpa.dk/#/Forms>`_ (eg. http://localhost.openrpa.dk/#/Forms) and click the Navy blue ``Add form`` button.

.. figure:: images/openflow_forms_page.png
   :align: center

   **OpenFlow's Forms page.**

Now at the Forms edit page, there are many basic from which you can choose. For synthetic purposes, we are only going to discuss the most used one here: Text Field Component. 

Drag the Form from the Basic category into the Form workspace. Immediately after, a window containing all the parameters to configure the form will appear.

.. figure:: images/openflow_forms_creation_page.png
   :align: center

   **OpenFlow's Forms creation page.**

.. figure:: images/openflow_form_starter_config_page.png
   :align: center

   **OpenFlow's Forms starter configuration tab.**

Configuring the Form
====================
Below are the steps needed to properly configure a form, in our case TextField Form.

- **Changing Form Label**

   To change the Form's label, ie. the title which will appear for the end-user, simply click the Display tab and change the input form titled **Label**, the changes are shown real-time.

.. figure:: images/openflow_form_label_config_page.png
   :align: center

   **OpenFlow's Form Display configuration tab.**

- **Assigning Input Variable**

   To assign the input form to a variable configured inside the OpenRPA workflow you've mapped to OpenFlow, simply go to the API tab and insert the name of the variable inside **Property Name** and press save. Now the next time this workflow is called, a new parameter will appear.

.. figure:: images/openflow_text_field_api_config.png
   :align: center

   **OpenFlow's Form API configuration tab.**

- **Assigning Form to Node-RED Workflow**

   Now it is required that you assign a Form to a Node-RED workflow. To do that, go to Node-RED and click twice on the ``Workflow Out`` node you want to assign the form to. The ``Edit workflow out node`` tab appears and you must select the form you've just created in the ``Userform`` dropdown.

.. figure:: images/openflow_node_red_configure_form.png

   **Assigning Form to Node-RED workflow.**

Basic Forms
===========
The Basic forms contain the most basic forms of inputs.

Text Field
----------
Coming soon - Work in progress

Text Area
---------
Coming soon - Work in progress

Number
------
Coming soon - Work in progress

Password
---------
Coming soon - Work in progress

Checkbox
---------
Coming soon - Work in progress

Select Boxes
---------
Coming soon - Work in progress

Select
---------
Coming soon - Work in progress

Radio
---------
Coming soon - Work in progress

Button
---------
Coming soon - Work in progress

Advanced Forms
==============
The Advanced forms contain the most advanced forms of inputs.

Email
---------
Coming soon - Work in progress

URL
---------
Coming soon - Work in progress

Phone Number
------------
Coming soon - Work in progress

Tags
---------
Coming soon - Work in progress

Address
---------
Coming soon - Work in progress

Date / Time
------------
Coming soon - Work in progress

Day
---
Coming soon - Work in progress

Time
---------
Coming soon - Work in progress

Currency
---------
Coming soon - Work in progress

Survey
---------
Coming soon - Work in progress

Signature
---------
Coming soon - Work in progress

Layout Forms
=============
The Layout forms contain view-related forms of input.

HTML Element
------------
Coming soon - Work in progress

Content
---------
Coming soon - Work in progress

Columns
---------
Coming soon - Work in progress

Field Set
---------
Coming soon - Work in progress

Panel
---------
Coming soon - Work in progress

Table
---------
Coming soon - Work in progress

Tabs
---------
Coming soon - Work in progress

Well
---------
Coming soon - Work in progress


***********************
 **Entities - MongoDB**
***********************


What are entities?
=================
Coming soon - Work in progress


Usages
======
Coming soon - Work in progress

Collections
===========
Coming soon - Work in progress