.. 2.5.
**********
 **Roles**
**********
Here is explained what **Roles** in OpenFlow are and how they interfere with **OpenRPA** and **Node-RED** access privileges.

What are Roles?
===============
In **OpenFlow**, Roles are an unit or collection of privileges and permissions that can be assigned to one or more users or to a group of users. These Roles serve various purposes, such as granting access to projects/workflows inside **OpenRPA** or granting access to specific flows inside **Node-RED**.

Remember that both human users and robots are called ``users`` in **OpenFlow** and Roles work the same way for both.

RPARole (Pool)
==============
Sometimes it may desired to create a Pool of ``users``, e.g. "Buyers", so that many ``users`` (buyer_John, buyer_Maria, buyer_robot1, ...) can be inserted in this Pool. By doing so, it will become easier to manage previleges and accesses when compared to manually adjusting each ``user``'s Roles.

RPARole also allows workflows or Node-RED flows to assign a task to the "Buyers" Pool instead of a specific ``user``. This way, when a workflow can be assigned to any ``user`` from a Pool, the framework will automatically assign the task to the first available listening ``user``.

Therefore, **RPARole** is a parameter set in the Role editting page of a role which enables a Role to become a Pool of users instead.

If set, all ``users`` added to the Role start listening to the Role-Queue ``id``, i.e., ``users`` now become consumers to the Queue belonging to this Role. When an ``user`` logs in, they listen natively to their own User-Queue ``id``; Additionaly, for each Role with the parameter RPARole that this user is memberof, the user will also start listening to Role-Queue ``id``. See more at `pool <https://cs.stackexchange.com/q/86372>`_ (``https://cs.stackexchange.com/q/86372``).

But what is a consumer?
-----------------------

   *The term "consumer" means different things in different contexts. In general in messaging a consumer is an application (or application instance) that consumes messages. The same application can also publish messages and thus be a publisher at the same time. In this sense a consumer is a subscription for message delivery that has to be registered before deliveries begin and can be cancelled by the application*.

   *RabbitMQ is a messaging broker. It accepts messages from publishers, routes them and, if there were queues to route to, stores them for consumption or immediately delivers to consumers, if any. Consumers consume from queues. In order to consume messages there has to be a queue. When a new consumer is added, assuming there are already messages ready in the queue, deliveries will start immediately. The target queue can be empty at the time of consumer registration. In that case first deliveries will happen when new messages are enqueued*.ยน

ยน - `Consumers <https://www.rabbitmq.com/consumers.html>`_ (``https://www.rabbitmq.com/consumers.html``)

.. 2.5.3.
Granting permissions (admin, nodered, user)
===========================================
Changing permissions in **OpenFlow** is very easy. 

In order to change roles, the user must be an ``Admin``, i.e., be assigned to the ``admins`` role.

Then, the user must click the ``Admin`` dropdown inside **OpenFlow**'s webpage.

.. figure:: images/chap_openflow_roles/openflow_roles_click_roles_dropdown.png
   :align: center
   :scale: 50%

All you need to do now is go to the **Roles** page inside OpenFlow's page and click the ``Pencil/Edit`` icon corresponding to the Role which you want to add users to. As an example, we're going to change the ``personal nodered users`` Role.

.. figure:: images/chap_openflow_roles/openflow_roles_edit_personal_nodered_users_role.png
   :align: center
   :scale: 50%

After clicking the ``Pencil/Edit`` icon, the user is redirected to the **Role** page, which contains the ``Name`` of the role, the ``rparole`` checkbox, the ``add`` input field and the ``member`` list, as seen below. To add a new ``user``/``Role`` to that Role, simply insert the name of this ``user``/``Role`` in the ``add`` input field. A dropdown list will then appear and the user chooses which ``user``/``Role`` it is desired to be added to the Role.

.. figure:: images/chap_openflow_roles/openflow_roles_add_user.png
   :align: center
   :scale: 50%

After selecting the desired values, the **add** button will become clickable. After clicking it, the recently selected ``user/Role`` will be added to the ``member`` list. Remember to **Save** the changes, otherwise they will not take place.

.. figure:: images/chap_openflow_roles/openflow_roles_click_save_button.png
   :align: center
   :scale: 50%

Node-RED permissions
--------------------
Everytime a ``Workflow In`` node is set with a ``Queue name`` and the flow to which it belongs to is deployed inside **Node-RED**, a new Role is created inside the **Roles** page with the prefix of the subdomain for the **Node-RED** (default: "nodered1"), the middle part is the name of the queue (as defined inside the node properties) and the suffix is "users". E.g.: "nodered1google-vision-apiusers".

.. note::

   When logged in as a non-``Admin`` user, to have access and invoke that workflow inside the **Workflows** page, the user must be added to that Role!

List of Main Roles inside OpenFlow
----------------------------------
Here are the main Roles inside **OpenFlow** and their permissions.

* **filestore users** - members of this Role can see all files uploaded to **OpenFlow**.
* **filestore admins** - members of this Role have full control (delete, update, ...) on all files uploaded to OpenFlow.
* **robot users** - currently unused, supposed to represent all robots.
* **robot admins** - currently unused, members from this role have full control (delete, update, ...) on all objects related to robots.
* **personal nodered users** - members of this Role can create new **Node-RED** instances, if **OpenFlow** is running on Kubernetes.
* **nodered users** - members from this Role have read-only access to all Node-RED instances.
* **nodered admins** - members from this Role have full access to all Node-RED instances.
* **nodered api users** - members from this Role can call APIs exposed from all Node-RED instances, when ``api_allow_anonymous`` is set to ``true``.
* **users** - All users are members of this Role.
* **admins** - Members from this role have access to everything inside the system. At the moment, ``admins`` can do everything the ``root`` user is able to do.
