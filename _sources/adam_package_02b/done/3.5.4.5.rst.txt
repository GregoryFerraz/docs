.. 3.5.2.5.1
.. py:class:: Get Element

 This Activity is similar to OpenRPA.GetElement. It selects an Element - or elements - filtered with the IE selector. 

 Clicking **Highlight** will red-highlight the first element that matches the criteria on the selector. Useful for checking if the selector is properly set up.

This activity also supports nesting **GetElements**. In order to know more about that, please refer to :ref:`Return multiple elements` section.

 **Properties Parameters**

   ``Displayname`` - Title of the Activity inside the sequence.

   ``Elements`` - the selected IE Elements.
   
   ``From`` - Allows search only within an Element found within any of the IEElement's instances.

   ``LoopAction`` - Loop the selected ``Activity`` until something is found.

   ``MaxResults`` - Maximum number of elements to be found.

   ``MinResults`` - Number of minimum results. If this value is higher than 0 and this Activity fails to find an element, it throws an exception (``ElementNotFound``). If you want to check whether an elements exists or not, set this value to 0 and test for 'item.Length() == 0' inside the sequence. 

   ``Selector`` - Contains all the data to identify the IE application.

   ``Timeout`` - Time until the Activity ceases if not successfully able to find an element.

   ``Wait for ready`` - If true, waits until the page is fully loaded.

.. note::
   
   The user can also use **XPath Selector** to select elements inside the page. **XPath Selectors** use the following syntax:

   - * - Matches any element node
   - @* - Matches any attribute node
   - node() - Matches any node of any kind

   So, for instance, if the user wanted to select all the child element nodes of a **bookstore** node, they'd use ``/bookstore/*``. To select all elements in a document, they'd use ``//*``. Now if they'd like to select all **title** elements which have **at least one** attribute of any kind, they'd use ``//title[@*]``. To concatenate XPath expressions, the user can use the ``| operator``. So, if they'd like to select all **title AND price** elements of all book elements, they'd use the expression ``//book/title | //book/price``.ยน

*ยน - `XPath Syntax <https://www.w3schools.com/xml/xpath_syntax.asp>`_ (``https://www.w3schools.com/xml/xpath_syntax.asp``).*

.. note::

   As well as the **XPath Selector**, the user can also use the **CSS Selector**. CSS Selectors use the following syntax:

   - **.{CLASS}** - Matches all elements with that class.
   - **#{CLASS}** - Matches all elements with that id.
   - ** * ** - Matches all elements.
   - **{ELEMENT}** - Matches all <p> elements.

   The syntax is pretty similar to that of **XPath Selectors**. For more on **CSS Selectors**, refer to `CSS Selectors <https://www.w3schools.com/cssref/css_Selectors.asp>`_ (``https://www.w3schools.com/cssref/css_Selectors.asp``).


.. figure:: images/openrpa_ie_get_element.png
   :align: center

   **OpenRPA.IE Get Element.**

.. 3.5.2.5.2
.. py:class:: Open URL

 Opens an URL in the currently selected InternetExplorer.Application instance. If there is no URL set, it will automatically start a new Internet Explorer instance.

  **Properties Parameters**

  ``DisplayName`` - Title of the Activity inside the sequence.

  ``FocusBrowser`` - If set to ``True``, will focus the window opened by the browser.

  ``Url`` - The URL which the browser will navigate to.

.. figure:: images/openrpa_open_url.png
   :align: center

   **OpenRPA.IE Open URL.**
