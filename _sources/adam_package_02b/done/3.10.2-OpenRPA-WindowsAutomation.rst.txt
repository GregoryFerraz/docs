Windows Automation
==================
In this example, **Skype** will be used to exemplify how easy it is to automate Windows applications.
Our goal is to ask the user for a contact info and then the robot will proceed to Skype and send a ``.PDF file`` to the specified recipient.
Hence, the **OpenRPA** major features being exposed here are: Detector, Form, Selector and the Recorder. 

This example is divided in 3 steps:
The first steps refers to ``Detector``, which will be used to check if a new file is created in an specific folder.
The second step refers to ``Form``, used to prompt the User about the recipient's contact info (``Email``, ``Name`` and ``Username``)
The final step is ``Windows Automation (Skype app)/Using Selector``, where the user will record the procedure of sending a message and a file to the their Skype's contact.

If your main interest lies on **Windows UI automation**, you may skip directly to the Windows Automation step.

#. Detector
    * Create Detector in OpenRPA
    * Configure Detector node in Node-RED
    * Message Manipulation in Node-RED
    * Passing a variable from Node-RED to OpenRPA
#. Form.
    * OpenRPA Forms   
#. Windows Automation (Skype app)/Using Selector
    * Record task
    * Configure Selectors

Detector
--------

Detectors are synonyms to event-listeners. Alas, they wait for some specific condition to happen and then fire a message to ``Node-RED`` or even to ``OpenRPA`` itself.

In this section, the user will learn how to create a ``FileWatcher Detector``, which will listen to file changes in a specific directory and will fire an event when a new file is created. For this example, the robot should be firing each time a new ``PDF/.pdf file`` is created.

**Create Detector in OpenRPA**

First, it is needed to configure the ``FileWatcher Detector``.

To do that, the user must first click the ``Settings`` bar inside OpenRPA's ribbon.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_click_settings.png
   :align: center
   :scale: 50%
   
Then, click the ``Detectors`` button inside the ribbon.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_click_detectors.png
   :align: center
   :scale: 50%
   
After that, all the user needs is to click the desired detector inside the Detectors ribbon.

For this example, the ``Detector`` which will be used is the ``FileWatcherDetectorPlugin``. Set the Detector's ``Name`` - in our case ``Windows Automation`` as well as the ``Path`` which it will listen to - ``C:\Users\viere\Documents\workflow_example_files\windows_automation\input_files``, **no quotes**.
Then set the ``File Filter`` to ``*.pdf`` - the ``*`` is a wildcard for the filename, that is, any filename will do.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_detector_configured.png
   :align: center
   :scale: 50%

.. note::
   If you can not find a ``Detector``, please make sure it has been installed. In case of doubts, simply run the installer ``.msi`` again and make sure to include it during the installation.

.. note::
   `Wildcards <https://ryanstutorials.net/linuxtutorial/wildcards.php>`_ (``https://ryanstutorials.net/linuxtutorial/wildcards.php``) are a set of building blocks that allow you to create a pattern defining a set of files or directories. As you would remember, whenever we refer to a file or directory on the command line we are actually referring to a string path. Whenever we refer to a path we may also use wildcards in that path to turn it into a set of files or directories..

**Configure Detector node in Node-RED**

Now the user will configure, in Node-RED, a ``Detector`` node which will be the starting point for ``NodeRED Messages`` when the ``Detector`` is triggered.

Create a new flow inside Node-RED. Our flow is being named ``Windows Automation - Workflow Example``.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_create_new_node_red_flow.png
   :align: center
   :scale: 50%
   
Now drag a ``detector`` node to the workspace.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_drag_detector_node.png
   :align: center
   :scale: 50%
   
Double-click the ``detector`` node to set its properties. Select the ``Detector`` in the dropdown field which will appear - in our case, ``Windows Automation``. Additionally, you may also give a name to this node such as ``Filepath Detector``, we recommend doing so to keep flows organized.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_set_detector_node_properties.png
   :align: center
   :scale: 50%
   

**Message Manipulation in Node-RED**

When the ``FileWatcher Detector`` fires, some information will be passed in the ``NodeRED Message``, such as the ``filepath`` - that is, the name of the file that has been created.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_set_debug_detector.png
   :align: center
   :scale: 50%

It is desired to capture this data and then pass it back to the robot as ``arguments`` for when workflows are invoked.
Remember that ``arguments`` should be passed to the **Robot** through ``msg.payload`` object.
As our OpenRPA Workflow does not require any other ``argument``, we can plug in the ``FileWatcher Detector`` node directly to the ``robot`` node.

**Invoking OpenRPA Workflows**

Here lies the logic behind passing the variables to and executing the OpenRPA workflow which will be invoked upon the ``Detector``'s positive signaling.

Drag a ``robot`` node to the workspace. This node enables us to invoke the ``Windows Automation`` workflow.


.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_connect_function_node_to_robot.png
   :align: center
   :scale: 50%

Once again, it is recommended to properly name the nodes, ``Invoke Windows Automation Workflow``.
Double-click and assign the ``Robot (or agent)`` whom shall will execute the workflow, and obviously, the name of the ``Workflow`` that should be executed (this example, ``Windows Automation``). You may leave the field ``Local Queue`` blank.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_set_robot_node_properties.png
   :align: center
   :scale: 50%
   
Now, the user must deploy the flow created by clicking the red Deploy button at the top-left side of the screen.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_click_deploy_button.png
   :align: center
   :scale: 50%
   
After that, the user should define, inside the OpenRPA workflow, a new argument by clicking ``Create Argument``.
As you may have seen in the ``debug`` node, the parameter being passed is called ``filepath`` and therefore the ``argument`` should be the exact same. As the ``argument`` is an input, set its ``Direction`` to ``In``.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_define_pathFile_argument.png
   :align: center
   :scale: 50%
   

.. note::
   If the user wants to avoid using Node-RED completely, an infinite **While loop** activity (condition: true=true) with a **Try Block** is suggested along with the **Detector** activity containing the detector defined previously. The user may also use the **Assign** activity to assign a fixed ``filepath`` for the file which will be sent to the **Skype** contact. By using the loop, every time an iteration finishes, the robot is always back to the start waiting on the ``Detector`` to fire once more and in case anything extraordinary happens, the **Try Block** assures that the **Workflow** will keep running.

Form
----
In this section, the user will learn how to create a ``Form`` to capture the ``Email``, ``Skype contact`` and ``Contact name`` which will be used to pass the attachment and template message using the **Skype** application.

**OpenRPA Forms**

Here the user creates a dynamic WPF Form to gather the values mentioned above from the client.

First drag a ``Invoke Formula`` snippet to the main sequence.

Now click ``Open designer`` to open the ``Form Designer``.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_click_open_designer_button.png 
   :align: center
   :scale: 50%

Clear all example code and add the code snippet below to the designer code editor.

.. code-block:: html

   <form>
      <title>Skype Automation Form</title>
      <heading>Invoice Details</heading>
      <input type='string' name='email' 
            label='Email'
            tooltip='Enter the email address here.'
            icon='pencil'>
         <validate must='NotBeEmpty' message='Email is mandatory' />
      </input>
      <input type='string' name='usernameSkype'
            label='Skype contact' icon='pencil'
            tooltip='Enter the Skype contact to which the file will be sent here.'>
         <validate must='NotBeEmpty' message='Skype contact is mandatory' />
      </input>
      <input type='string' name='name'
            label='Contact name' icon='pencil'
            tooltip='Enter the contact name to which the file will be sent here.'>
         <validate must='NotBeEmpty' message='Contact name is mandatory' />
      </input>
      <action name='submit' content='START SKYPE AUTOMATION' icon='check' validates='true' ClosesDialog='true' />
   </form>

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_openrpa_forms_filled_designer.png
   :align: center
   :scale: 50%

If you’re used to HTML or any other markup language you might understand what’s happening behind the scenes here. If you don’t, do not worry and refer to the **OpenRPA Forms** section.

By pressing the **Build form** button the user is able to build and see a preview of the WPF form in the left‑side panel of the ``Form Designer``.

After that, the user can press the **Create variables** button so all variables defined inside the ``Form Designer`` will be automatically created. Easy-peasy, isn't it?

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_openrpa_forms_create_variables.png
   :align: center
   :scale: 50%

.. note::
   If the user wants to avoid using ``OpenRPA Forms``, they can simply use the **Assign** activity to assign values to the variables ``email``, ``usernameSkype`` and ``name``, which will be used further to send the attachment and template message to the desired client.

.. note::
   The ``Form Designer`` is the place where the user can create his desired WPF forms to gather input from the client. At the right-side of it, a preview of the input form is shown. At the left-side of it, the user enters the code used to design the input form. After adding code to the ``Form Designer``, always press the **Build form** button to save changes and visualize the preview.

Windows Automation (Skype app) / Using Selectors
------------------------------------------------
Now comes the greatest part of our journey so far in this workflow example. The built-in Recorder will be used to record the task that an user would normally do to effectively achieve the task described in this section's introduction.

**Record task**

Here the user will record the task usually done, namely search for a contact inside the **Skype** application, select - or click - that contact and send a message containing the attachment.

The first step is to open the **Skype** application.

Now, with the **Skype** application open, the user will start the Recorder inside OpenRPA by clicking in the button inside OpenRPA's ribbon and execute the task as if done manually.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_skype_app_click_recorder.png
   :align: center
   :scale: 50%

Now, with the Recorder started, the user must click the ``Search`` tab, containing the placeholder ``People, groups & messages``.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_skype_app_click_search_tab.png
   :align: center

An input field will appear inside the ``Search`` tab containing the placeholder ``Search Skype``. Click that input field, an ``InsertText`` input field will appear. The user should enter an existing contact which will be used as a dummy to assign the proper ``Selector`` further in this section. After waiting for **Skype**'s own autocomplete feature to find the user, the user shall click the desired contact.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_skype_app_search_tab_input_field.png
   :align: center

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_skype_app_search_tab_input_field_filled.png
   :align: center

After clicking the desired contact, the ``Messages`` tab open will open for that specific contact.

The user must now click the ``Add File`` button in the lower right section.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_skype_app_click_add_file_button.png
   :align: center

Now a file dialog appears, where the user can select the desired file, and an input dialog from OpenRPA titled ``InsertText`` where you can again insert dummy text. The ``Selector`` will act upon this dialog to choose the file which will be sent, as is seen in the next section. Then click the ``Open`` button.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_skype_app_select_file.png
   :align: center

Now click the input field with the ``Type a message`` placeholder, another input dialog with the ``InsertText`` title will appear, you can again enter any dummy text.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_click_type_a_message.png
   :align: center

Then, the user shall click the blue **Send** button.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_click_send_button.png
   :align: center

Finally, click the **X** button inside the ``Search`` tab to close the search dialogue and exit the Recorder by pressing the ``ESC`` button.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_skype_app_close_search_tab.png
   :align: center

**Configure Selectors**

Now the ``Selector`` for the many **GetElement** activities that appeared inside OpenRPA's designer is configured.

First, configure the first ``Selector`` for the first element to be clicked inside the **Skype** application pane. That is, the one with the ``People, groups & messages`` placeholder. In our case, we changed its ``DisplayName`` from ``Search for people, groups & messages`` to ``Search Contact GetElement``, to ease the viewing process by a 3rd-party which may be interested in the workflow.

Click the **Open Selector** button inside the **GetElement** activity that was generated for that specific field.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_skype_app_people_groups_messages_selector.png
   :align: center

In this image, the user notices a **Type Text** activity, which corresponds to the dummy username that was typed. The user can remove that activity from the workspace, since it'll be replaced with another activity in the following steps.

The user will notice that upon clicking the **Highlight** button inside the new window and with the **Skype** application window open, no elements inside the screen will be highlighted. Then, we must select the given element manually.

To do that, the user can first double-click the element ``Pane Skype`` ->  ``Document Skype XXXXXXXXXX`` -> ``Button Search for people, groups & messages`` and right-click this last element and click the **Select Element** button that appears. Below follows a picture of this element highlighted.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_skype_app_people_groups_messages_selector_element_highlighted.png
   :align: center

Now, the user is going to change the ``filename`` attribute in the first selector, where there may be ``"%ProgramFiles%\\WindowsApps\\Microsoft.SkypeApp_15.61.100.0_x86__XXXXX\\Skype\\Skype.exe"``, the user wants to crop the version of skype and the hash which follows it - specified here as ``{XXXXX}``. To do that, simply change it to ``"%ProgramFiles%\\WindowsApps\\Microsoft.SkypeApp_*"``¹. 

Now the user must also deselect the fourth selector. All the changes made so far are shown in the image below.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_skype_app_people_groups_messages_selector_finished.png
   :align: center

After that, simply the **Ok** button in the lower-left side of the screen. It is recommended that the user check once more whether the proper ``Selector`` was configured by clicking the **Highlight** button inside the activity.

Now the user must do the same steps specified above inside the **GetElement** activity responsible for capturing the ``Search`` tab input. Select the element inside ``Pane Skype`` -> ``Document Skype XXXXXXXXX`` -> ``Edit Search Skype``. It is important to remark that the ``Search`` tab must be visible inside the **Skype** application before opening the selector so OpenRPA can recognize it as an element inside the window.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_skype_app_search_tab_selector_finished.png
   :align: center

The user must also change the right-hand value of the **Assign** activity, inside the current **GetElement** activity, to the variable which is going to hold the ``username`` of the desired contact. In our case, that variable is ``usernameSkype``, as previously defined in the **Forms** section. 

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_skype_app_search_tab_assign_properties_tab.png
   :align: center

Now the user will add a **Delay** activity to the workflow. Set the **Delay**'s ``Duration`` property to ``00:00:05``, which means this delay will last for 5 seconds. This is needed specifically because of the autocomplete function built-in in the **Skype** application. It is a hard-coded constraint in which the robot must wait for the autocomplete function to complete before proceeding to the next steps. 

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_skype_app_delay.png
   :align: center

Then, the user must repeat the steps specified above inside the **GetElement** activity responsible for capturing the ``Contact`` button.  Select the element inside ``Pane Skype`` -> ``Document Skype XXXXXXXXX`` -> ``Group PEOPLE`` -> ``Button {Contact Name}, {Status}, {Chatted Last}, {Skype Name}`` - namely, in our case, ``Paulo Veras``, ``Away``, ``Chatted 23 minutes ago``, ``Skype Name``.  It is important to remark that the ``Contact`` button must be visible inside the **Skype** application before opening the selector so OpenRPA can recognize it as an element inside the window. Below is the ``Selector`` properly set up and an image of the button highlighted.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_desired_contact_selector_finished.png
   :align: center

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_desired_contact_selector_highlighted.png
   :align: center

Now add a **post wait** by using the ``Post Wait`` properties inside the **Click Element** activity which is contained inside the **GetElement** activity responsible for capturing the ``Contact`` button.  This value should be set to ``00:00:02``. The **post wait** is used so, after clicking the desired contact button which appears in the left pane of the **Skype** window, the application itself will wait for the ``Messages`` tab to load. Since we have added the **post wait**, the **Delay** activity is not needed.

The user must now repeat the steps specified for selecting the proper ``Selector`` for the remaining activities and assure that the elements inside the screen are highlighted when properly configured. Remember, you may have to open a window... in the case of the **Add file** button to properly select the elements.

Now set the proper value for the ``filepath`` for the file which will be sent through the **Skype** app. Assign the proper value inside the respective **Assign** activity which corresponds to the input field where the ``filepath`` is going to be set. If you haven't created the ``argument`` yet, now is the time to do it - remember it must have its ``Direction`` set as ``In``. Below it is shown how to set this argument properly.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_set_filepath_inside_getelement.png
   :align: center

Finally, check whether the configs are correct for the element inside the ``Selector`` corresponding to ``Pane Skype`` -> ``Document Skype XXXXXXXXX`` -> ``Edit Type a message`` and alter item.value to item.SendKeys inside the **Assign** activity included in the **GetElement** activity. 

If the user refrains from doing so, OpenRPA will attempt to directly set the value of the Skype's edit field to the contents of the variable templateMessage. The problem is: Skype does not like that! The Skype app assumes that the user would type a letter at a time instead of changing the edit field value directly, otherwise the UI gets messed up with the placeholder "Type a message " ending on top of the actual text message.

The correct way to mimic an user typing a letter at a time is to use item.SendKeys method.

If the ``Detector`` is set properly, the user can now test the workflow example by inserting a ``.PDF`` file inside the directory previously defined. Else, they can follow the note below.

.. note::
   If the user hasn't set the ``filepath`` argument to be acquired from the ``FileWatcherDetectorPlugin``, as seen in the 1st step in this workflow example, they must set its value manually by using an **Assign** activity.

.. note::
   To change the name, or  ``DisplayName`` - as set inside the activity's parameters, the user can either click twice in the name of the activity, type the desired name and press ``RETURN`` or set the parameter ``DisplayName`` inside the **Properties box**.

.. note::
   ¹ - `Wildcards <https://ryanstutorials.net/linuxtutorial/wildcards.php>`_ (``https://ryanstutorials.net/linuxtutorial/wildcards.php``) are a set of building blocks that allow you to create a pattern defining a set of files or directories. As you would remember, whenever we refer to a file or directory on the command line we are actually referring to a path. Whenever we refer to a path we may also use wildcards in that path to turn it into a set of files or directories..

Workflow Finished
-----------------
Here lie the images showing the output of the workflow both in the **Skype** application and in Node-RED.

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_workflow_finished.png
   :align: center

.. figure:: images/windows_automation_images/openrpa_workflow_examples_windows_automation_workflow_finished_nodered.png
   :align: center
