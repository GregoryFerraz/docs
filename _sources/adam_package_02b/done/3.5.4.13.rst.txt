System.Activities
-----------------
.. py:module:: OpenRPA.SystemActivities
      :noindex:


Here belong the activities located inside the OpenRPA.System.Activities toolbox.

.. 3.5.2.13.2
.. py:class:: Assign

   This Activity is used to assign a value to a variable.

   ``DisplayName`` - Title of the Activity inside the sequence.

   ``To`` - Variable to which the value will be assigned.

   ``Value`` - Value which will be assigned to variable.

.. figure:: images/openrpa_assign.png
   :align: center

   **System.Activities Assign**

.. 3.5.2.13.4
.. py:class:: Delay Activity
 
 Creates a delay from an instance of an object to the ``TimeSpan`` class. Users can also simply type a length of time with the format ``HH:MM:SS``.

 **Properties Parameters**

   ``Displayname`` - Title of the Activity inside the sequence.

   ``Duration`` - The argument specifying the length of the delay. Can be a simple 00:00:00.00 {hh:min:ss.mili} or an object from the **TimeSpan** class.

   .. note::

      A **TimeSpan** value represents a time interval and can be expressed as a particular number of days, hours, minutes, seconds and milliseconds. Since it represents a general interval without reference to a particular start or endpoint, it cannot be expressed in terms of years and months, both of which have a variable number of days.ยน

*ยน - `TimeSpan Struct <https://docs.microsoft.com/en-us/dotnet/api/system.timespan?view=netcore-3.1>`_ (``https://docs.microsoft.com/en-us/dotnet/api/system.timespan?view=netcore-3.1``)*

.. figure:: images/openrpa_delay.png
   :align: center

   **System.Activities Delay.**

.. 3.5.2.13.5
.. py:class:: Do While

 Creates a loop that executes other activities dropped in it at least once and repeatedly until **looping condition** no longer evaluates to ``True``.

 **Properties Parameters**

   ``Condition`` - This is a VB Expression that represents the **looping condition**.
 
   ``Displayname`` - Title of the Activity inside the sequence.

.. figure:: images/openrpa_do_while.png
   :align: center

   **System.Activities Do While.**

.. 3.5.2.13.12
.. py:class:: If Activity
 
 It is similar to conditionals in prog. If the **clause condition** is ``True``, it will then execute the activities in the ``Then`` block. Else, if it is ``False``, i will execute the ``Else`` block.

 **Properties Parameters**

   ``Condition`` - This is a VB Expression that represents the **clause condition**.

   ``Displayname`` - Title of the Activity inside the sequence.

.. figure:: images/openrpa_if.png
   :align: center

   **System.Activities If.**


.. py:class:: Sequence Activity

 This activity is used to nest sequences upon the main sequence. You can drop activities inside it just as you would do inside the main sequence. It is helpful to organize your code/workflow because you can expand or collapse them.

 **Properties Parameters**

 ``Displayname`` - Title of the activity inside the sequence.

 .. figure:: images/openrpa_sequence.png
    :align: center

    **System.Activities Sequence.**

.. 3.5.2.13.25
.. py:class:: Throw Activity
 
 Provides a method to terminate the execution of the ``Workflow`` in a certain case, displaying an Error message. In programming, that would be known as "throwing an exception". Upon entering the exception in the ``Exception`` field, type ``new`` to exhibit the available ones.

 **Properties Parameters**

 ``Displayname`` - Title of the Activity inside the sequence.

 ``Exception`` - The exception which will appear on the Error message.

 .. figure:: images/openrpa_throw.png
    :align: center

    **System.Activities Throw.**

.. 3.5.2.13.27
.. py:class:: TryCatch Activity

 Tries to execute a sequence of activities within the ``Try`` block. If any of them causes an error, the error is catched and then the activities inside the ``Catches`` block are executed. At the end of execution, the ``Finally`` block is executed.

 **Properties Parameters**

 ``Displayname`` - Title of the Activity inside the main outer sequence.

.. figure:: images/openrpa_try_catch.png
   :align: center

   **System.Activities TryCatch.**

.. 3.5.2.13.28
.. py:class:: While Activity

 Creates a loop that executes other Activities dropped in it while the **condition** is fulfilled - i.e., ``False``. Once it is fulfilled, i.e., ``True``, the loop ceases and moves to the next Activity. Differently from the **Do While** Activity, it is first checked whether the condition evaluates to ``True`` before the looping begings.

 **Properties Parameters**

   ``Condition`` - This is a VB Expression that represents the **condition**.
 
   ``Displayname`` - Title of the Activity inside the sequence.

.. figure:: images/openrpa_while.png
   :align: center

   **System.Activities While.**

.. 3.5.2.13.29
.. py:class:: WriteLine Activity
 
 Writes the output to the console according to the ``Text`` string.

 **Properties Parameters**

 ``Displayname`` - Title of the Activity inside the sequence.

 ``Text`` - The string which will be printed on the console.

 ``TextWriter`` - **Optional** - The writer used to write the character stream.

 .. note::

   The **TextWriter** class is an abstract class. Therefore, users should not instantiate it in code. The **StreamWriter** class derives from **TextWriter** and provides implementations of the members for writing to a stream. The following example shows how to write two lines that consist of string values to a text file by using the **WriteLineAsync(String)** method.ยน

*ยน - `TextWriter Class <https://docs.microsoft.com/en-us/dotnet/api/system.io.textwriter?view=netcore-3.1>`_ (``https://docs.microsoft.com/en-us/dotnet/api/system.io.textwriter?view=netcore-3.1``)*

.. figure:: images/openrpa_write_line.png
   :align: center

   **System.Activities Write Line.**
