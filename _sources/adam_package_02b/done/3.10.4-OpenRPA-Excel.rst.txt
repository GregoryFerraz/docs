Excel Read
==========
In this example, the user will read a couple of invoices contained in ``Excel files (.xlsx)``, capture the data inside them and generate a new ``Excel file`` with the merged data.

The invoices which will be used to demonstrate this example can be found here `Invoices <https://drive.google.com/file/d/1WkBjsWhA5Dm_fp5zg_kdlBh9oe2vKnTO/view?usp=sharing>`_ (``https://drive.google.com/file/d/1WkBjsWhA5Dm_fp5zg_kdlBh9oe2vKnTO/view?usp=sharing``).

.. @TODO@: Link to BPA's own repository or simply embed file inside Sphinx.

.. figure:: images/read_excelimages/openrpa_workflow_example_read_excel_invoice_example.png
   :align: center


Unpack the ``.rar`` file at the desired directory and save the folder path somewhere, it shall be used later on.

The following steps are followed to accomplish this workflow example.

#. Create an Empty DataTable.
#. For each Invoice.
    * Read Individual Cells
    * Read Table Cells ("items")
    * Add this iteration's invoice to DataTable
#. Write Excel from DataTable

**Create an Empty DataTable.**
------------------------------
All the Excel data that will be read from the invoices will be saved into a ``DataTable``.

Drag the **CreateDataTable** activity to the end of the main sequence.

In the first input field, assign the ``DataTable`` name as ``invoicesDataTable``.

.. note:: 
   OpenRPA is able to automatically create a new variable with the correct type required for the Activity/property. While creating a new variable in the **Properties box**, after typing the variable name and with the caret still inside the input field, by pressing ``Ctrl+K``.

In our case, the fields which are going to be assigned to the second input field are headers. Therefore our second input field should contain ``{"Invoice Number", "Company Name", "Shipping Address", "Shipping Tel. Number", "Due Date", "Qty. of Items", "Due Balance"}`` as its content.

It is advisable to rename the ``DisplayName`` for each activity to something meaningful and that helps you keep track of what each part of the workflow does! Considering that, rename this activity to "Create Empty DataTable".

.. figure:: images/read_excelimages/openrpa_workflow_example_read_excel_create_empty_data_table.png
   :align: center

.. note::
   In OpenRPA, a ``DataTable`` corresponds to a 2-dimensional non-serializable object used to hold values. Think of it as a matrix with ``i`` rows and ``j`` columns. The ``i`` rows are accessible by using the ``.Rows(n)`` attribute, where ``n`` is the number of the row - starting from 0 - which you want to access. The ``j`` columns are accessible by using the ``.Item(n)`` attribute, where ``n`` is the number of the column - starting from 0 - which you want to access. It is useful to remind here that the user must have accessed the ``Rows`` attribute, therefore, if the user wanted to access the 2nd column on the 3rd row of the datatable they would use ``.Rows(2).Item(1)`` attribute.

.. note::
   In the .NET API, a ``DataTable object`` corresponds to one table of in-memory data contained in a ``DataSet object`` from the class equally named. When you read an ``Excel file``, it is automatically assigned to a ``DataSet`` class and all the ``Sheets`` are saved into ``DataTable`` classes - numbered from 0 to the quantity of sheets inside the ``Excel file``. Here it is reminded that ``DataTable`` objects are case sensitive.

**For each Invoice**
--------------------
The first activity will loop a directory and will return all filenames contained in it.

First drag the **Assign** activity to assign the absolute path of the directory you want to loop through to a variable - ie. ``path``.

.. figure:: images/read_excelimages/openrpa_workflow_example_read_excel_assign_path.png
   :align: center

Drag the **ForEachWithBodyFactory<>** activity to the main sequence.

Set the proper ``TypeArgument`` parameter inside the **Properties box** to ``String``. This is done because the directory which will be iterated through contain filepaths, which are returned as values of ``String`` type.  

In the right-hand side of the activity change the ``item`` variable assigned to ``filePath``.

In the left-hand side of the activity insert ``System.IO.Path.GetFiles(path)``.

The variable ``filePath`` now contains the ``String`` to each respective invoice full filepath.

.. figure:: images/read_excelimages/openrpa_workflow_example_read_excel_for_each_with_body_factory.png
   :align: center

**Read Individual Cells**

Here the robot will read individual cells pertaining to fields that contain only a single value - these fields are static (the number of rows is fixed - one).

As these steps are quite repetitive, we will be reproducing only the steps pertaining to the ``invoiceNumber`` variable. If you want to practice further, we strongly recommend doing the same to the other variables as well, namely ``companyName``, ``shippingAddress``, ``shippingTelephoneNumber`` and ``dueDate``.

Use the Recorder to select the cell or drag the **ReadCell** activity, found inside the ``OpenRPA.Utilities`` toolbox, to the sequence inside the **ForEachWithBodyFactory<>** activity.

If the Recorder wasn't used, the user must follow a few more steps in order to use this activity. First, assign the ``Filename`` parameter inside the **Properties box** to the ``filePath`` variable to select the ``Excel file`` which will be read. Enter the cell which will be captured into the ``Cell`` parameter. In our case, it is ``"H3"``, which corresponds to the invoice number.

The **ReadCell activity** will read from an ``Excel file`` and save the cell into a ``String`` variable by default. The user can change the type of the data captured by changing the ``ArgumentType`` parameter inside the **Properties tab**.

Since this variable does not exist yet, we must first create it. A reminder that variable must be obligatorily set with the type **System.Data.String**. 

Simply click in the ``Result`` input field inside the **Properties tab** and type the name of the variable you want to use. In this case, it is ``invoiceNumber``.

Now repeat the procedure above for the remaining variables.

 .. figure:: images/read_excelimages/openrpa_workflow_example_read_excel_read_individual_cell.png
    :align: center

Remember that it is needed to change the variables ``Scope`` to the outermost sequence to be able to capture all the values gathered in here and save them into a ``DataTable`` later on.

 .. figure:: images/read_excelimages/openrpa_workflow_example_read_excel_change_scope.png
    :align: center

.. note:: 
   While creating a new variable in the **Properties box**, after typing the variable name and with the caret still inside the input field, by pressing ``'K`` OpenRPA will automatically create this new variable with the correct type required for the activity.

**Read Table Cells ("items")**

Here the robot will read a 'table' inside the invoice and differently to reading individual cells, tables are usually dynamic (the number of rows may vary) or. This is done in a programmatic manner that allows the developer the option to read a specific range of cells which would be simply too huge as to permit him to manually add the **ReadCell** activity for each variable.

This 'table' will be stored in a new ``DataTable`` called 'itemsDataTable' and some logic will be applied as well, such as removing empty columns, summing and counting values.

Drag a **Sequence** activity and name it ``Items Processing Logic``.

Inside this sequence, drag a **CreateDataTable** activity and create a table named ``itemsDataTable``. 

The headers for this ``DataTable`` shall be ``{"itemName", "quantity", "rate", "subTotal"}``.

.. figure:: images/read_excelimages/openrpa_workflow_example_read_excel_read_items_processing_logic_create_data_table.png
   :align: center

For the assignments, we will be using columns 0, 3, 5, 7, if you take a look at the invoice template, these are the indexes for the columns 
that contain data.

Now, by using the ``Read Range`` activity, we will get the table contents into a ``DataTable``. 

First enter the filepath of the file from which the activity will read from inside the ``Filename`` input field.

Enter the cells you want to capture in the ``Cells`` field inside the **Properties box**. In our case, those are ``"A14:H18"``. 
 
 .. figure:: images/read_excelimages/openrpa_workflow_example_read_excel_range_cells.png
    :align: center

The indexes ``0``, ``3``, ``5`` and ``7`` refer to the indexed objects inside the current ``row``, ie. the columns.

Enter the name for the ``DataTable`` you want to save it to inside the ``DataTable`` field inside the **Properties box**. In our case this ``DataTable`` is ``items``.

In the **Properties box**, you may find the property ``IgnoreEmptyRows``, set this value to ``True``. Since our table does not contain a header, set the ``Use Header Row`` property to ``False`` - this will ensure the activity reads the first row of the data (row 14).

.. figure:: images/read_excelimages/openrpa_workflow_example_read_excel_items_processing_read_range.png
   :align: center

And by looping the ``DataTable`` with a **ForEach DataRow** activity, the **Add DataRow** activity is used to loop through each item information to our 'itemsDataTable'

.. figure:: images/read_excelimages/openrpa_workflow_example_read_excel_items_processing_for_each_and_add_data_row.png
   :align: center

Now comes the logic for calculating the subtotal value and adding this value to the total value which will be described in the final ``Excel sheet``.

Declare a new variable ``quantity`` with type ``System.Decimal``. Using the **Assign** activity, assign its value to ``quantity + Convert.ToDecimal(row(3).ToString)`` - this will cause the variable to increment its value for each item iteration.

Declare a new variable ``currentQuantity`` with type ``System.Decimal``. Using the **Assign** activity, assign its value to ``Convert.ToDecimal(row(3).ToString)``

Do the step above for the variable ``currentRate`` as well, using ``row(5)`` as its base-value.

Declare a new variable ``subTotal`` with type ``System.Decimal``. Using the **Assign** activity, assign its value to ``currentQuantity*currentRate``.

Finally, declare a new variable ``dueBalance`` with type ``System.Decimal``. Using the **Assign** activity, assign its value to ``dueBalance + currentQuantity*currentRate``.

It is useful to remark that the user must change the variables ``Scope`` to the outermost sequence to be able to capture all the values gathered in here and save them into a ``DataTable`` later on.

 .. figure:: images/read_excelimages/openrpa_workflow_example_read_excel_items_logic_assign_variables.png
    :align: center

.. note::
   In the **Read Range** activity, the ``:`` colon symbol is used to delimit the area you want to capture, the cell to the left-hand side of it is the starting cell and the cell to the right-hand side of it is the ending cell.

**Add this iteration's invoice to DataTable**
---------------------------------------------
Now that we've gathered all the important data from this iteration's invoice, we want to add these info to the ``DataTable`` we created on step 1.

Drag the **AddDataRow** activity to the end of the sequence inside the **ForEachWithBodyFactory<>** activity.

In the first input field, insert ``invoicesDataTable``.

In the second input field, insert ``{invoiceNumber, companyName, shippingAddress, shippingTelephoneNumber, dueDate, quantity, total}``.

 .. figure:: images/read_excelimages/openrpa_workflow_example_read_excel_add_invoices_data_table.png
    :align: center

**Write Excel from DataTable**
------------------------------
This is the last part of the workflow. Here the user will finally write the ``Excel file`` containing all the data gathered.

Drag a **WriteExcel** activity into the end of the main sequence.

Click the ``...`` button to select the filename to which the ``Excel file`` will be saved to. Enter the filename inside the ``File name`` input field on the explorer window which will appear. Then press ``Save`` to finally assign it.

Assign the ``DataTable`` from which the data gathered will be saved into the ``Excel file`` by entering its name inside the ``DataTable`` property inside the **Properties box**.

Enter the theme which will be used to stylize the ``Excel file`` in the ``Theme`` property inside the **Properties box**.

 .. figure:: images/read_excelimages/openrpa_workflow_example_read_excel_write_excel.png
    :align: center

**Workflow Finished**
---------------------
Here's a preview of how the workflow will look like after completing it.

.. figure:: images/read_excelimages/openrpa_workflow_example_read_excel_workflow_finished_1.png
   :align: center

.. figure:: images/read_excelimages/openrpa_workflow_example_read_excel_workflow_finished_2.png
   :align: center
