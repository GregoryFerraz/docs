Reading and Parsing PDF Files
=============================
In this example, the user will create a ``Workflow`` that extracts data from a ``PDF file``, processes the data gathered using `Regular Expressions <https://ryanstutorials.net/regular-expressions-tutorial/>`_ (``https://ryanstutorials.net/regular-expressions-tutorial/``) and saves the data into a ``CSV file``.

First the user needs to download the invoice file which will be used to extract the data from. It is available on `this link <https://drive.google.com/file/d/1jCSvQ42ABkeJVcWksUNUftfiPSjZBlSs/view?usp=sharing>`_ (``https://drive.google.com/file/d/1jCSvQ42ABkeJVcWksUNUftfiPSjZBlSs/view?usp=sharing``).

The steps are listed below:

1. Extract text data from PDF.
2. Match Regular Expression groups.
3. Create ``DataTable`` to store results.
4. Add row to ``DataTable``.
5. Save ``DataTable`` into CSV.

Extract data from PDF
---------------------
In this section the user will learn how to extract text data from a PDF and save it into a variable.

First of all,  the user should drag a **ReadPDF** activity into the main sequence.

.. figure:: images/reading_and_parsing_pdf_files/openrpa_workflow_example_read_and_parsing_pdf_drag_readpdf.png
   :align: center

Then, click the ``...`` button to select the file from which data will read. That is the invoice file just downloaded.

The user also needs to create a variable which will be used to hold the text generated by the extraction with the **ReadPDF** activity. In this case, the variable is ``result``. It must be set inside the ``AllText`` parameter, available inside the **Properties box**.

.. figure:: images/reading_and_parsing_pdf_files/openrpa_workflow_example_read_and_parsing_pdf_configure_readpdf.png
   :align: center

.. note:: 

   OpenRPA is able to automatically create a new variable with the correct type required for the Activity/property. While creating a new variable in the **Properties box**, after typing the variable name and with the caret still inside the input field, by pressing ``Ctrl+K``.


Match Regular Expression groups
-------------------------------
Now the user will use the **Matches** Activity to extract groups of data from the string returned by **ReadPDF**.

First of all, the user should drag a **Matches** Activity into the main sequence.

.. figure:: images/reading_and_parsing_pdf_files/openrpa_workflow_example_read_and_parsing_pdf_drag_matches.png
   :align: center

In the first input box, containing the placeholder ``The input string to match against``, the user will insert the content of the variable, that is, the text captured in the previous section.

In the second input box, the user will insert the **RegEx pattern** used to divide data into groups. The one used here is ``(\b[a-zA-Z0-9$.\-() ]*)``. For a thorough explanation on **Regular Expressions**, please refer to `RyansTutorials Regular Expressions <https://ryanstutorials.net/regular-expressions-tutorial/>`_ (``https://ryanstutorials.net/regular-expressions-tutorial/``). It is interesting to remind the user that, since the **RegEx pattern** is captured as a string, it must be enclosed in quotes. It is also recommended using the `Regex101 <https://regex101.com/>`_ (``https://regex101.com/``) for matching the groups and testing the pattern if needed.

The user must also configure the variable to which the matches will be saved (in this example, ``invoiceResults``) inside the ``Results`` parameter in the **Properties box**. It will be configured with type **Match list**, or simply ``Match[]``. As seen in the image below.

.. figure:: images/reading_and_parsing_pdf_files/openrpa_workflow_example_read_and_parsing_pdf_configure_matches.png
   :align: center

Create DataTable to store results
---------------------------------
In this section, the user will create the ``DataTable`` used to store the results and configure its header.

First, the user will drag a **CreateDataTable** activity to the sequence inside the **Matches** activity.

.. figure:: images/reading_and_parsing_pdf_files/openrpa_workflow_example_read_and_parsing_pdf_drag_createdatatable.png
   :align: center

Now, the user must create the variable in which the ``DataTable`` will be saved inside the `New DataTable variable` placeholder. In this example, the variable is named ``invoiceDataTable``.

.. note::
   Press ``Ctrl+K`` to automatically create the variable when entering it upon an input field. Otherwise, the user can create it manually by clicking the **Variables box** under the bottom part of the screen. Use the right-hand side to enter the value which will be assigned to the variable.

The user must also define its headers inside the `Array of DataTable columns` placeholder. Since in this example only three fields from the invoice are captured, namely ``Company Name``, ``Invoice Number`` and ``Total Balance``, the header will be defined as ``{"Company Name", "Invoice Number" and "Total Balance"}``.

.. figure:: images/reading_and_parsing_pdf_files/openrpa_workflow_example_read_and_parsing_pdf_config_createdatatable.png
   :align: center

.. note::

   A ``DataTable object`` corresponds to one table of in-memory data contained in a ``DataSet object`` from the class equally named. When you read an ``Excel file``, it is automatically assigned to a ``DataSet`` class and all the ``Sheets`` are saved into ``DataTable`` classes - numbered from 0 to the quantity of sheets inside the ``Excel file``. Here it is reminded that ``DataTable`` objects are case sensitive.

Add row to DataTable
--------------------
Here the user will add the data gathered from the ``PDF file`` into the ``DataTable`` defined in the previous section.

First, drag a **AddDataRow** activity into the sequence contained inside the **Matches** activity.

.. figure:: images/reading_and_parsing_pdf_files/openrpa_workflow_example_read_and_parsing_pdf_drag_adddatarow.png
   :align: center

Now, the user must insert the ``DataTable`` to which the data will be inserted to inside the `DataTable to insert to` placeholder.

The user must also define the data that will be inserted.

The ``Company Name`` is the ``Match object`` of no. 1 inside the ``invoiceResults`` list. It will be assigned as ``invoiceResults(0).ToString``.

The ``invoiceNumber`` is the ``Match object`` of no. 2 inside the ``invoiceResults`` list. It will be assigned as ``invoiceResults(2).ToString``.

The ``invoiceTotalBalance`` is the ``Match object`` of no. 3 inside the ``invoiceResults`` list. It will be assigned as ``invoiceResults(44).ToString``.

Therefore, the row which will be added inside the `Array of DataTable columns` placeholder is ``{invoiceResults(0).ToString, invoiceResults(2).ToString, invoiceResults(44).ToString}``. It is shown below.

.. figure:: images/reading_and_parsing_pdf_files/openrpa_workflow_example_read_and_parsing_pdf_configure_adddatarow.png
   :align: center

Save DataTable into CSV
-----------------------
The user will now save the ``DataTable`` created in a CSV file.

First, drag a **WriteCSV** file into the main sequence.

.. figure:: images/reading_and_parsing_pdf_files/openrpa_workflow_example_read_and_parsing_pdf_drag_writecsv.png
   :align: center

Now, click the ``...`` button to insert the ``filepath`` of the CSV file which the data will be saved to - in this example, ``invoice1.csv``.

Then, insert the ``DataTable`` which was captured into the ``DataTable`` inside its **Properties box**. In this example, this variable is the ``DataTable`` defined in the previous section - i.e., ``invoiceDataTable``.

Finally, change the ``Delimiter`` parameter to ``","``.

Workflow Finished
-----------------
A ``CSV file`` is generated, which can be opened on **Excel** application or **Notepad**.

.. figure:: images/reading_and_parsing_pdf_files/openrpa_workflow_example_workflow_finished_csv.png
   :align: center